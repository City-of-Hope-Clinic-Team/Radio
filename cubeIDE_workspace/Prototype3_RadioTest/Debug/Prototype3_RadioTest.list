
Prototype3_RadioTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000241c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080025a8  080025a8  000125a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025e8  080025e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080025e8  080025e8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025e8  080025e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025e8  080025e8  000125e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025ec  080025ec  000125ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080025f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000000c  080025fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080025fc  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006da8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001415  00000000  00000000  00026de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000778  00000000  00000000  00028200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d0  00000000  00000000  00028978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e89a  00000000  00000000  00029048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007916  00000000  00000000  000478e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b858d  00000000  00000000  0004f1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107785  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d20  00000000  00000000  001077d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002590 	.word	0x08002590

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002590 	.word	0x08002590

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fac4 	bl	800075e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f829 	bl	800022c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f8ab 	bl	8000334 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001de:	f000 f86b 	bl	80002b8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t checkStatus;
  uint8_t checkFIFO_Status;
  uint8_t receivedByte;
  //setupTXsimple();
  setupRXsimple(); // Configure as a receiver
 80001e2:	f000 f967 	bl	80004b4 <setupRXsimple>

  HAL_GPIO_WritePin(GPIOA, CE_Pin, GPIO_PIN_SET);
 80001e6:	2201      	movs	r2, #1
 80001e8:	2104      	movs	r1, #4
 80001ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001ee:	f000 fd9f 	bl	8000d30 <HAL_GPIO_WritePin>
	checkFIFO_Status = spiReadByte(REG_FIFO_STATUS);// x01 expected
	flushTXFIFO();
	*/

	// RX side
	  checkStatus = spiReadByte(REG_STATUS);
 80001f2:	2007      	movs	r0, #7
 80001f4:	f000 f8ce 	bl	8000394 <spiReadByte>
 80001f8:	4603      	mov	r3, r0
 80001fa:	71fb      	strb	r3, [r7, #7]
	  if (checkStatus & (1 << MASK_RX_DR))
 80001fc:	79fb      	ldrb	r3, [r7, #7]
 80001fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000202:	2b00      	cmp	r3, #0
 8000204:	d00e      	beq.n	8000224 <main+0x58>
	  {
		  receivedByte = receiveByte();
 8000206:	f000 f997 	bl	8000538 <receiveByte>
 800020a:	4603      	mov	r3, r0
 800020c:	71bb      	strb	r3, [r7, #6]
		  checkStatus = spiReadByte(REG_STATUS);
 800020e:	2007      	movs	r0, #7
 8000210:	f000 f8c0 	bl	8000394 <spiReadByte>
 8000214:	4603      	mov	r3, r0
 8000216:	71fb      	strb	r3, [r7, #7]
		  // Clear RX_DR flag
		  spiWriteByte(REG_STATUS, 0x40); // Assert bit 6 of Status high (clear RX_DR flag)
 8000218:	2140      	movs	r1, #64	; 0x40
 800021a:	2007      	movs	r0, #7
 800021c:	f000 f8e6 	bl	80003ec <spiWriteByte>
		  // Flush RX FIFO
		  flushRXFIFO();
 8000220:	f000 f9ae 	bl	8000580 <flushRXFIFO>
		  // Stack overflow recommends reconfiguring as receiver here
		  // I think it'll be fine, but that's another thing to try.
		  // Source: https://stackoverflow.com/questions/51810883/nrf24l01-rx-mode-and-flush
	  }
	  HAL_Delay(100);
 8000224:	2064      	movs	r0, #100	; 0x64
 8000226:	f000 fb0f 	bl	8000848 <HAL_Delay>
	  checkStatus = spiReadByte(REG_STATUS);
 800022a:	e7e2      	b.n	80001f2 <main+0x26>

0800022c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b096      	sub	sp, #88	; 0x58
 8000230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000232:	f107 0314 	add.w	r3, r7, #20
 8000236:	2244      	movs	r2, #68	; 0x44
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f002 f9a0 	bl	8002580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000240:	463b      	mov	r3, r7
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]
 800024c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800024e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000252:	f000 fd93 	bl	8000d7c <HAL_PWREx_ControlVoltageScaling>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800025c:	f000 f9ae 	bl	80005bc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000260:	2310      	movs	r3, #16
 8000262:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000264:	2301      	movs	r3, #1
 8000266:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000268:	2300      	movs	r3, #0
 800026a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800026c:	2360      	movs	r3, #96	; 0x60
 800026e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000270:	2300      	movs	r3, #0
 8000272:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000274:	f107 0314 	add.w	r3, r7, #20
 8000278:	4618      	mov	r0, r3
 800027a:	f000 fdd5 	bl	8000e28 <HAL_RCC_OscConfig>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000284:	f000 f99a 	bl	80005bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000288:	230f      	movs	r3, #15
 800028a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800028c:	2300      	movs	r3, #0
 800028e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800029c:	463b      	mov	r3, r7
 800029e:	2100      	movs	r1, #0
 80002a0:	4618      	mov	r0, r3
 80002a2:	f001 f9d5 	bl	8001650 <HAL_RCC_ClockConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002ac:	f000 f986 	bl	80005bc <Error_Handler>
  }
}
 80002b0:	bf00      	nop
 80002b2:	3758      	adds	r7, #88	; 0x58
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002bc:	4b1b      	ldr	r3, [pc, #108]	; (800032c <MX_SPI1_Init+0x74>)
 80002be:	4a1c      	ldr	r2, [pc, #112]	; (8000330 <MX_SPI1_Init+0x78>)
 80002c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002c2:	4b1a      	ldr	r3, [pc, #104]	; (800032c <MX_SPI1_Init+0x74>)
 80002c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002ca:	4b18      	ldr	r3, [pc, #96]	; (800032c <MX_SPI1_Init+0x74>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002d0:	4b16      	ldr	r3, [pc, #88]	; (800032c <MX_SPI1_Init+0x74>)
 80002d2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80002d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002d8:	4b14      	ldr	r3, [pc, #80]	; (800032c <MX_SPI1_Init+0x74>)
 80002da:	2200      	movs	r2, #0
 80002dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002de:	4b13      	ldr	r3, [pc, #76]	; (800032c <MX_SPI1_Init+0x74>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002e4:	4b11      	ldr	r3, [pc, #68]	; (800032c <MX_SPI1_Init+0x74>)
 80002e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80002ec:	4b0f      	ldr	r3, [pc, #60]	; (800032c <MX_SPI1_Init+0x74>)
 80002ee:	2220      	movs	r2, #32
 80002f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002f2:	4b0e      	ldr	r3, [pc, #56]	; (800032c <MX_SPI1_Init+0x74>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002f8:	4b0c      	ldr	r3, [pc, #48]	; (800032c <MX_SPI1_Init+0x74>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002fe:	4b0b      	ldr	r3, [pc, #44]	; (800032c <MX_SPI1_Init+0x74>)
 8000300:	2200      	movs	r2, #0
 8000302:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <MX_SPI1_Init+0x74>)
 8000306:	2207      	movs	r2, #7
 8000308:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800030a:	4b08      	ldr	r3, [pc, #32]	; (800032c <MX_SPI1_Init+0x74>)
 800030c:	2200      	movs	r2, #0
 800030e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <MX_SPI1_Init+0x74>)
 8000312:	2208      	movs	r2, #8
 8000314:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000316:	4805      	ldr	r0, [pc, #20]	; (800032c <MX_SPI1_Init+0x74>)
 8000318:	f001 fb86 	bl	8001a28 <HAL_SPI_Init>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000322:	f000 f94b 	bl	80005bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000028 	.word	0x20000028
 8000330:	40013000 	.word	0x40013000

08000334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b086      	sub	sp, #24
 8000338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	2200      	movs	r2, #0
 800033e:	601a      	str	r2, [r3, #0]
 8000340:	605a      	str	r2, [r3, #4]
 8000342:	609a      	str	r2, [r3, #8]
 8000344:	60da      	str	r2, [r3, #12]
 8000346:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000348:	4b11      	ldr	r3, [pc, #68]	; (8000390 <MX_GPIO_Init+0x5c>)
 800034a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034c:	4a10      	ldr	r2, [pc, #64]	; (8000390 <MX_GPIO_Init+0x5c>)
 800034e:	f043 0301 	orr.w	r3, r3, #1
 8000352:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000354:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <MX_GPIO_Init+0x5c>)
 8000356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000358:	f003 0301 	and.w	r3, r3, #1
 800035c:	603b      	str	r3, [r7, #0]
 800035e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	2114      	movs	r1, #20
 8000364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000368:	f000 fce2 	bl	8000d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 800036c:	2314      	movs	r3, #20
 800036e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000370:	2301      	movs	r3, #1
 8000372:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000374:	2300      	movs	r3, #0
 8000376:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000378:	2300      	movs	r3, #0
 800037a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	4619      	mov	r1, r3
 8000380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000384:	f000 fb6a 	bl	8000a5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000388:	bf00      	nop
 800038a:	3718      	adds	r7, #24
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40021000 	.word	0x40021000

08000394 <spiReadByte>:

/* USER CODE BEGIN 4 */
uint8_t spitxbuffer[8];
uint8_t spirxbuffer[8];
uint8_t spiReadByte(uint8_t address)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af02      	add	r7, sp, #8
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
	spitxbuffer[0] = address;
 800039e:	4a10      	ldr	r2, [pc, #64]	; (80003e0 <spiReadByte+0x4c>)
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	7013      	strb	r3, [r2, #0]
	spitxbuffer[1] = 0;
 80003a4:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <spiReadByte+0x4c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_RESET); // put CSN = 0
 80003aa:	2200      	movs	r2, #0
 80003ac:	2110      	movs	r1, #16
 80003ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b2:	f000 fcbd 	bl	8000d30 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, spitxbuffer, spirxbuffer, 2*sizeof(uint8_t), HAL_MAX_DELAY);
 80003b6:	f04f 33ff 	mov.w	r3, #4294967295
 80003ba:	9300      	str	r3, [sp, #0]
 80003bc:	2302      	movs	r3, #2
 80003be:	4a09      	ldr	r2, [pc, #36]	; (80003e4 <spiReadByte+0x50>)
 80003c0:	4907      	ldr	r1, [pc, #28]	; (80003e0 <spiReadByte+0x4c>)
 80003c2:	4809      	ldr	r0, [pc, #36]	; (80003e8 <spiReadByte+0x54>)
 80003c4:	f001 fd41 	bl	8001e4a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_SET); // put CSN = 0
 80003c8:	2201      	movs	r2, #1
 80003ca:	2110      	movs	r1, #16
 80003cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d0:	f000 fcae 	bl	8000d30 <HAL_GPIO_WritePin>
	return spirxbuffer[1];
 80003d4:	4b03      	ldr	r3, [pc, #12]	; (80003e4 <spiReadByte+0x50>)
 80003d6:	785b      	ldrb	r3, [r3, #1]

}
 80003d8:	4618      	mov	r0, r3
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	2000008c 	.word	0x2000008c
 80003e4:	20000094 	.word	0x20000094
 80003e8:	20000028 	.word	0x20000028

080003ec <spiWriteByte>:

void spiWriteByte(uint8_t address, uint8_t value)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af02      	add	r7, sp, #8
 80003f2:	4603      	mov	r3, r0
 80003f4:	460a      	mov	r2, r1
 80003f6:	71fb      	strb	r3, [r7, #7]
 80003f8:	4613      	mov	r3, r2
 80003fa:	71bb      	strb	r3, [r7, #6]
	spitxbuffer[0] = address | 1<<5; // need to set 3 msb to 1 for writes
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	f043 0320 	orr.w	r3, r3, #32
 8000402:	b2da      	uxtb	r2, r3
 8000404:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <spiWriteByte+0x54>)
 8000406:	701a      	strb	r2, [r3, #0]
	spitxbuffer[1] = value;
 8000408:	4a0d      	ldr	r2, [pc, #52]	; (8000440 <spiWriteByte+0x54>)
 800040a:	79bb      	ldrb	r3, [r7, #6]
 800040c:	7053      	strb	r3, [r2, #1]

	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_RESET); // put CSN = 0
 800040e:	2200      	movs	r2, #0
 8000410:	2110      	movs	r1, #16
 8000412:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000416:	f000 fc8b 	bl	8000d30 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, spitxbuffer, spirxbuffer, 2, HAL_MAX_DELAY);
 800041a:	f04f 33ff 	mov.w	r3, #4294967295
 800041e:	9300      	str	r3, [sp, #0]
 8000420:	2302      	movs	r3, #2
 8000422:	4a08      	ldr	r2, [pc, #32]	; (8000444 <spiWriteByte+0x58>)
 8000424:	4906      	ldr	r1, [pc, #24]	; (8000440 <spiWriteByte+0x54>)
 8000426:	4808      	ldr	r0, [pc, #32]	; (8000448 <spiWriteByte+0x5c>)
 8000428:	f001 fd0f 	bl	8001e4a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_SET); // put CSN = 0
 800042c:	2201      	movs	r2, #1
 800042e:	2110      	movs	r1, #16
 8000430:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000434:	f000 fc7c 	bl	8000d30 <HAL_GPIO_WritePin>


}
 8000438:	bf00      	nop
 800043a:	3708      	adds	r7, #8
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	2000008c 	.word	0x2000008c
 8000444:	20000094 	.word	0x20000094
 8000448:	20000028 	.word	0x20000028

0800044c <spiWriteNByte>:

void spiWriteNByte(uint8_t address, const uint8_t *buf, uint8_t len)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	4603      	mov	r3, r0
 8000454:	6039      	str	r1, [r7, #0]
 8000456:	71fb      	strb	r3, [r7, #7]
 8000458:	4613      	mov	r3, r2
 800045a:	71bb      	strb	r3, [r7, #6]
	spitxbuffer[0] = address | 1 <<5;
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	f043 0320 	orr.w	r3, r3, #32
 8000462:	b2da      	uxtb	r2, r3
 8000464:	4b11      	ldr	r3, [pc, #68]	; (80004ac <spiWriteNByte+0x60>)
 8000466:	701a      	strb	r2, [r3, #0]
	spitxbuffer[1] = 0;
 8000468:	4b10      	ldr	r3, [pc, #64]	; (80004ac <spiWriteNByte+0x60>)
 800046a:	2200      	movs	r2, #0
 800046c:	705a      	strb	r2, [r3, #1]
	//Put CSN low
	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_RESET); // put CSN = 0
 800046e:	2200      	movs	r2, #0
 8000470:	2110      	movs	r1, #16
 8000472:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000476:	f000 fc5b 	bl	8000d30 <HAL_GPIO_WritePin>
	//Transmit register address
	HAL_SPI_Transmit(&hspi1, spitxbuffer, 1, HAL_MAX_DELAY);	//Receive data
 800047a:	f04f 33ff 	mov.w	r3, #4294967295
 800047e:	2201      	movs	r2, #1
 8000480:	490a      	ldr	r1, [pc, #40]	; (80004ac <spiWriteNByte+0x60>)
 8000482:	480b      	ldr	r0, [pc, #44]	; (80004b0 <spiWriteNByte+0x64>)
 8000484:	f001 fb73 	bl	8001b6e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)buf, len, HAL_MAX_DELAY);
 8000488:	79bb      	ldrb	r3, [r7, #6]
 800048a:	b29a      	uxth	r2, r3
 800048c:	f04f 33ff 	mov.w	r3, #4294967295
 8000490:	6839      	ldr	r1, [r7, #0]
 8000492:	4807      	ldr	r0, [pc, #28]	; (80004b0 <spiWriteNByte+0x64>)
 8000494:	f001 fb6b 	bl	8001b6e <HAL_SPI_Transmit>
	//Bring CSN high
	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_SET); // put CSN = 1
 8000498:	2201      	movs	r2, #1
 800049a:	2110      	movs	r1, #16
 800049c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a0:	f000 fc46 	bl	8000d30 <HAL_GPIO_WritePin>
}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	2000008c 	.word	0x2000008c
 80004b0:	20000028 	.word	0x20000028

080004b4 <setupRXsimple>:
	// Enable error correction, power up, PRIM_RX = 0 [PTX]
	spiWriteByte(REG_CONFIG, 0x0A);
}

void setupRXsimple(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
	spiWriteByte(REG_SETUP_RETR, 0x00); // no retransmission / acknowledgment
 80004ba:	2100      	movs	r1, #0
 80004bc:	2004      	movs	r0, #4
 80004be:	f7ff ff95 	bl	80003ec <spiWriteByte>
	spiWriteByte(REG_EN_AA, 0x00); //no auto acknowledge
 80004c2:	2100      	movs	r1, #0
 80004c4:	2001      	movs	r0, #1
 80004c6:	f7ff ff91 	bl	80003ec <spiWriteByte>
	spiWriteByte(REG_SETUP_AW, 0x02); // makes address width 4 bytes
 80004ca:	2102      	movs	r1, #2
 80004cc:	2003      	movs	r0, #3
 80004ce:	f7ff ff8d 	bl	80003ec <spiWriteByte>
	spiWriteByte(REG_RF_CH, 0x02);// make frequency 2.402 Ghz
 80004d2:	2102      	movs	r1, #2
 80004d4:	2005      	movs	r0, #5
 80004d6:	f7ff ff89 	bl	80003ec <spiWriteByte>
	spiWriteByte(REG_RF_SETUP, 0x26); // lowest data rate + highest output pwr
 80004da:	2126      	movs	r1, #38	; 0x26
 80004dc:	2006      	movs	r0, #6
 80004de:	f7ff ff85 	bl	80003ec <spiWriteByte>

	// Address for the radio that we expect to be receiving data from
	uint8_t TxAddr[4] = {0x00, 0x11, 0x22, 0x33};
 80004e2:	4b14      	ldr	r3, [pc, #80]	; (8000534 <setupRXsimple+0x80>)
 80004e4:	607b      	str	r3, [r7, #4]
	// The unique address for data pipe 0 (see page 39 of datasheet)
	uint8_t Rx_0_Addr[4] = {0x78, 0x78, 0x78, 0x78};
 80004e6:	f04f 3378 	mov.w	r3, #2021161080	; 0x78787878
 80004ea:	603b      	str	r3, [r7, #0]

	// Configure RX pipe 0 to the unique address, and pipe 1 to our transmitter address
	spiWriteNByte(REG_RX_ADDR_P0, Rx_0_Addr, 4);
 80004ec:	463b      	mov	r3, r7
 80004ee:	2204      	movs	r2, #4
 80004f0:	4619      	mov	r1, r3
 80004f2:	200a      	movs	r0, #10
 80004f4:	f7ff ffaa 	bl	800044c <spiWriteNByte>
	spiWriteNByte(REG_RX_ADDR_P1, TxAddr, 4);
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	2204      	movs	r2, #4
 80004fc:	4619      	mov	r1, r3
 80004fe:	200b      	movs	r0, #11
 8000500:	f7ff ffa4 	bl	800044c <spiWriteNByte>

	// Use channel 1
	// Note: I'm note sure if we need to enable pipe 0 here, since transmission is over pipe 1. Enabling it to be safe.
	spiWriteByte(REG_EN_RXADDR, 0x03); // Enable pipes 0 and 1 [bit 0 and 1 = 1]
 8000504:	2103      	movs	r1, #3
 8000506:	2002      	movs	r0, #2
 8000508:	f7ff ff70 	bl	80003ec <spiWriteByte>
	spiWriteByte(REG_RX_PW_P1, 0x01); // 1 byte payload length on pipe 1
 800050c:	2101      	movs	r1, #1
 800050e:	2012      	movs	r0, #18
 8000510:	f7ff ff6c 	bl	80003ec <spiWriteByte>

	// no shockburst stuff
	spiWriteByte(REG_DYNPD, 0x00);
 8000514:	2100      	movs	r1, #0
 8000516:	201c      	movs	r0, #28
 8000518:	f7ff ff68 	bl	80003ec <spiWriteByte>
	spiWriteByte(REG_FEATURE, 0x00);
 800051c:	2100      	movs	r1, #0
 800051e:	201d      	movs	r0, #29
 8000520:	f7ff ff64 	bl	80003ec <spiWriteByte>

	// RX mode
	// Enable error correction [bit 3], power up [bit 1], PRIM_RX = 1 [PRX] [bit 0]
	spiWriteByte(REG_CONFIG, 0x0B);
 8000524:	210b      	movs	r1, #11
 8000526:	2000      	movs	r0, #0
 8000528:	f7ff ff60 	bl	80003ec <spiWriteByte>
}
 800052c:	bf00      	nop
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	33221100 	.word	0x33221100

08000538 <receiveByte>:
	HAL_SPI_Transmit(&hspi1, txData, 2, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_SET); // put CSN = 1
}

uint8_t receiveByte()
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af02      	add	r7, sp, #8
	uint8_t txData[2];
	uint8_t rxData[2];
	txData[0] = 0x61; // using the R_RX_PAYLOAD command
 800053e:	2361      	movs	r3, #97	; 0x61
 8000540:	713b      	strb	r3, [r7, #4]
	txData[1] = 0x00;
 8000542:	2300      	movs	r3, #0
 8000544:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_RESET); // put CSN = 0
 8000546:	2200      	movs	r2, #0
 8000548:	2110      	movs	r1, #16
 800054a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054e:	f000 fbef 	bl	8000d30 <HAL_GPIO_WritePin>
	// Send R_RX_PAYLOAD
	HAL_SPI_TransmitReceive(&hspi1, txData, rxData, 2*sizeof(uint8_t), HAL_MAX_DELAY);
 8000552:	463a      	mov	r2, r7
 8000554:	1d39      	adds	r1, r7, #4
 8000556:	f04f 33ff 	mov.w	r3, #4294967295
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	2302      	movs	r3, #2
 800055e:	4807      	ldr	r0, [pc, #28]	; (800057c <receiveByte+0x44>)
 8000560:	f001 fc73 	bl	8001e4a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_SET); // put CSN = 1
 8000564:	2201      	movs	r2, #1
 8000566:	2110      	movs	r1, #16
 8000568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056c:	f000 fbe0 	bl	8000d30 <HAL_GPIO_WritePin>
	return rxData[1];
 8000570:	787b      	ldrb	r3, [r7, #1]
}
 8000572:	4618      	mov	r0, r3
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000028 	.word	0x20000028

08000580 <flushRXFIFO>:
	HAL_SPI_Transmit(&hspi1, txData, 1, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_SET); // put CSN = 1
}

void flushRXFIFO(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
	uint8_t txData = 0xE2; // using the FLUSH_RX command (1110 0010)
 8000586:	23e2      	movs	r3, #226	; 0xe2
 8000588:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_RESET); // put CSN = 0
 800058a:	2200      	movs	r2, #0
 800058c:	2110      	movs	r1, #16
 800058e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000592:	f000 fbcd 	bl	8000d30 <HAL_GPIO_WritePin>
	// Send W_TX_Command
	HAL_SPI_Transmit(&hspi1, &txData, 1*sizeof(uint8_t), HAL_MAX_DELAY);
 8000596:	1df9      	adds	r1, r7, #7
 8000598:	f04f 33ff 	mov.w	r3, #4294967295
 800059c:	2201      	movs	r2, #1
 800059e:	4806      	ldr	r0, [pc, #24]	; (80005b8 <flushRXFIFO+0x38>)
 80005a0:	f001 fae5 	bl	8001b6e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_SET); // put CSN = 1
 80005a4:	2201      	movs	r2, #1
 80005a6:	2110      	movs	r1, #16
 80005a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ac:	f000 fbc0 	bl	8000d30 <HAL_GPIO_WritePin>
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000028 	.word	0x20000028

080005bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c0:	b672      	cpsid	i
}
 80005c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <Error_Handler+0x8>
	...

080005c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <HAL_MspInit+0x44>)
 80005d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005d2:	4a0e      	ldr	r2, [pc, #56]	; (800060c <HAL_MspInit+0x44>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6613      	str	r3, [r2, #96]	; 0x60
 80005da:	4b0c      	ldr	r3, [pc, #48]	; (800060c <HAL_MspInit+0x44>)
 80005dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <HAL_MspInit+0x44>)
 80005e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ea:	4a08      	ldr	r2, [pc, #32]	; (800060c <HAL_MspInit+0x44>)
 80005ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f0:	6593      	str	r3, [r2, #88]	; 0x58
 80005f2:	4b06      	ldr	r3, [pc, #24]	; (800060c <HAL_MspInit+0x44>)
 80005f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000

08000610 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	; 0x28
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a17      	ldr	r2, [pc, #92]	; (800068c <HAL_SPI_MspInit+0x7c>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d128      	bne.n	8000684 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000632:	4b17      	ldr	r3, [pc, #92]	; (8000690 <HAL_SPI_MspInit+0x80>)
 8000634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000636:	4a16      	ldr	r2, [pc, #88]	; (8000690 <HAL_SPI_MspInit+0x80>)
 8000638:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800063c:	6613      	str	r3, [r2, #96]	; 0x60
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <HAL_SPI_MspInit+0x80>)
 8000640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000642:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000646:	613b      	str	r3, [r7, #16]
 8000648:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <HAL_SPI_MspInit+0x80>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	4a10      	ldr	r2, [pc, #64]	; (8000690 <HAL_SPI_MspInit+0x80>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <HAL_SPI_MspInit+0x80>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000662:	23e0      	movs	r3, #224	; 0xe0
 8000664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000666:	2302      	movs	r3, #2
 8000668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800066e:	2303      	movs	r3, #3
 8000670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000672:	2305      	movs	r3, #5
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000680:	f000 f9ec 	bl	8000a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000684:	bf00      	nop
 8000686:	3728      	adds	r7, #40	; 0x28
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40013000 	.word	0x40013000
 8000690:	40021000 	.word	0x40021000

08000694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <NMI_Handler+0x4>

0800069a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069e:	e7fe      	b.n	800069e <HardFault_Handler+0x4>

080006a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <MemManage_Handler+0x4>

080006a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <BusFault_Handler+0x4>

080006ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <UsageFault_Handler+0x4>

080006b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e0:	f000 f892 	bl	8000808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <SystemInit+0x20>)
 80006ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006f2:	4a05      	ldr	r2, [pc, #20]	; (8000708 <SystemInit+0x20>)
 80006f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800070c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000744 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000710:	f7ff ffea 	bl	80006e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000714:	480c      	ldr	r0, [pc, #48]	; (8000748 <LoopForever+0x6>)
  ldr r1, =_edata
 8000716:	490d      	ldr	r1, [pc, #52]	; (800074c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000718:	4a0d      	ldr	r2, [pc, #52]	; (8000750 <LoopForever+0xe>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800071c:	e002      	b.n	8000724 <LoopCopyDataInit>

0800071e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000722:	3304      	adds	r3, #4

08000724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000728:	d3f9      	bcc.n	800071e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <LoopForever+0x12>)
  ldr r4, =_ebss
 800072c:	4c0a      	ldr	r4, [pc, #40]	; (8000758 <LoopForever+0x16>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000730:	e001      	b.n	8000736 <LoopFillZerobss>

08000732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000734:	3204      	adds	r2, #4

08000736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000738:	d3fb      	bcc.n	8000732 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800073a:	f001 fefd 	bl	8002538 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800073e:	f7ff fd45 	bl	80001cc <main>

08000742 <LoopForever>:

LoopForever:
    b LoopForever
 8000742:	e7fe      	b.n	8000742 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000744:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800074c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000750:	080025f0 	.word	0x080025f0
  ldr r2, =_sbss
 8000754:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000758:	200000a0 	.word	0x200000a0

0800075c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800075c:	e7fe      	b.n	800075c <ADC1_IRQHandler>

0800075e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b082      	sub	sp, #8
 8000762:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000764:	2300      	movs	r3, #0
 8000766:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000768:	2003      	movs	r0, #3
 800076a:	f000 f943 	bl	80009f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800076e:	200f      	movs	r0, #15
 8000770:	f000 f80e 	bl	8000790 <HAL_InitTick>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d002      	beq.n	8000780 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800077a:	2301      	movs	r3, #1
 800077c:	71fb      	strb	r3, [r7, #7]
 800077e:	e001      	b.n	8000784 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000780:	f7ff ff22 	bl	80005c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000784:	79fb      	ldrb	r3, [r7, #7]
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000798:	2300      	movs	r3, #0
 800079a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800079c:	4b17      	ldr	r3, [pc, #92]	; (80007fc <HAL_InitTick+0x6c>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d023      	beq.n	80007ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007a4:	4b16      	ldr	r3, [pc, #88]	; (8000800 <HAL_InitTick+0x70>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <HAL_InitTick+0x6c>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	4619      	mov	r1, r3
 80007ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 f941 	bl	8000a42 <HAL_SYSTICK_Config>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d10f      	bne.n	80007e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2b0f      	cmp	r3, #15
 80007ca:	d809      	bhi.n	80007e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007cc:	2200      	movs	r2, #0
 80007ce:	6879      	ldr	r1, [r7, #4]
 80007d0:	f04f 30ff 	mov.w	r0, #4294967295
 80007d4:	f000 f919 	bl	8000a0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007d8:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <HAL_InitTick+0x74>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	6013      	str	r3, [r2, #0]
 80007de:	e007      	b.n	80007f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007e0:	2301      	movs	r3, #1
 80007e2:	73fb      	strb	r3, [r7, #15]
 80007e4:	e004      	b.n	80007f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007e6:	2301      	movs	r3, #1
 80007e8:	73fb      	strb	r3, [r7, #15]
 80007ea:	e001      	b.n	80007f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007ec:	2301      	movs	r3, #1
 80007ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000008 	.word	0x20000008
 8000800:	20000000 	.word	0x20000000
 8000804:	20000004 	.word	0x20000004

08000808 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <HAL_IncTick+0x20>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_IncTick+0x24>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4413      	add	r3, r2
 8000818:	4a04      	ldr	r2, [pc, #16]	; (800082c <HAL_IncTick+0x24>)
 800081a:	6013      	str	r3, [r2, #0]
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	20000008 	.word	0x20000008
 800082c:	2000009c 	.word	0x2000009c

08000830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  return uwTick;
 8000834:	4b03      	ldr	r3, [pc, #12]	; (8000844 <HAL_GetTick+0x14>)
 8000836:	681b      	ldr	r3, [r3, #0]
}
 8000838:	4618      	mov	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	2000009c 	.word	0x2000009c

08000848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000850:	f7ff ffee 	bl	8000830 <HAL_GetTick>
 8000854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000860:	d005      	beq.n	800086e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000862:	4b0a      	ldr	r3, [pc, #40]	; (800088c <HAL_Delay+0x44>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	461a      	mov	r2, r3
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	4413      	add	r3, r2
 800086c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800086e:	bf00      	nop
 8000870:	f7ff ffde 	bl	8000830 <HAL_GetTick>
 8000874:	4602      	mov	r2, r0
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	429a      	cmp	r2, r3
 800087e:	d8f7      	bhi.n	8000870 <HAL_Delay+0x28>
  {
  }
}
 8000880:	bf00      	nop
 8000882:	bf00      	nop
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000008 	.word	0x20000008

08000890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <__NVIC_SetPriorityGrouping+0x44>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008a6:	68ba      	ldr	r2, [r7, #8]
 80008a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008ac:	4013      	ands	r3, r2
 80008ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008c2:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <__NVIC_SetPriorityGrouping+0x44>)
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	60d3      	str	r3, [r2, #12]
}
 80008c8:	bf00      	nop
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008dc:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <__NVIC_GetPriorityGrouping+0x18>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	0a1b      	lsrs	r3, r3, #8
 80008e2:	f003 0307 	and.w	r3, r3, #7
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	6039      	str	r1, [r7, #0]
 80008fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000904:	2b00      	cmp	r3, #0
 8000906:	db0a      	blt.n	800091e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	b2da      	uxtb	r2, r3
 800090c:	490c      	ldr	r1, [pc, #48]	; (8000940 <__NVIC_SetPriority+0x4c>)
 800090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000912:	0112      	lsls	r2, r2, #4
 8000914:	b2d2      	uxtb	r2, r2
 8000916:	440b      	add	r3, r1
 8000918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800091c:	e00a      	b.n	8000934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4908      	ldr	r1, [pc, #32]	; (8000944 <__NVIC_SetPriority+0x50>)
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	f003 030f 	and.w	r3, r3, #15
 800092a:	3b04      	subs	r3, #4
 800092c:	0112      	lsls	r2, r2, #4
 800092e:	b2d2      	uxtb	r2, r2
 8000930:	440b      	add	r3, r1
 8000932:	761a      	strb	r2, [r3, #24]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	e000e100 	.word	0xe000e100
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000948:	b480      	push	{r7}
 800094a:	b089      	sub	sp, #36	; 0x24
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	f1c3 0307 	rsb	r3, r3, #7
 8000962:	2b04      	cmp	r3, #4
 8000964:	bf28      	it	cs
 8000966:	2304      	movcs	r3, #4
 8000968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	3304      	adds	r3, #4
 800096e:	2b06      	cmp	r3, #6
 8000970:	d902      	bls.n	8000978 <NVIC_EncodePriority+0x30>
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	3b03      	subs	r3, #3
 8000976:	e000      	b.n	800097a <NVIC_EncodePriority+0x32>
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800097c:	f04f 32ff 	mov.w	r2, #4294967295
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	43da      	mvns	r2, r3
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	401a      	ands	r2, r3
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000990:	f04f 31ff 	mov.w	r1, #4294967295
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	fa01 f303 	lsl.w	r3, r1, r3
 800099a:	43d9      	mvns	r1, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a0:	4313      	orrs	r3, r2
         );
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3724      	adds	r7, #36	; 0x24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
	...

080009b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009c0:	d301      	bcc.n	80009c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009c2:	2301      	movs	r3, #1
 80009c4:	e00f      	b.n	80009e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <SysTick_Config+0x40>)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ce:	210f      	movs	r1, #15
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295
 80009d4:	f7ff ff8e 	bl	80008f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <SysTick_Config+0x40>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009de:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <SysTick_Config+0x40>)
 80009e0:	2207      	movs	r2, #7
 80009e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	e000e010 	.word	0xe000e010

080009f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff ff47 	bl	8000890 <__NVIC_SetPriorityGrouping>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b086      	sub	sp, #24
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	607a      	str	r2, [r7, #4]
 8000a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a1c:	f7ff ff5c 	bl	80008d8 <__NVIC_GetPriorityGrouping>
 8000a20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	68b9      	ldr	r1, [r7, #8]
 8000a26:	6978      	ldr	r0, [r7, #20]
 8000a28:	f7ff ff8e 	bl	8000948 <NVIC_EncodePriority>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a32:	4611      	mov	r1, r2
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff5d 	bl	80008f4 <__NVIC_SetPriority>
}
 8000a3a:	bf00      	nop
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff ffb0 	bl	80009b0 <SysTick_Config>
 8000a50:	4603      	mov	r3, r0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b087      	sub	sp, #28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a6a:	e148      	b.n	8000cfe <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	2101      	movs	r1, #1
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	fa01 f303 	lsl.w	r3, r1, r3
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f000 813a 	beq.w	8000cf8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f003 0303 	and.w	r3, r3, #3
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d005      	beq.n	8000a9c <HAL_GPIO_Init+0x40>
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f003 0303 	and.w	r3, r3, #3
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d130      	bne.n	8000afe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	43db      	mvns	r3, r3
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	68da      	ldr	r2, [r3, #12]
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	43db      	mvns	r3, r3
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	091b      	lsrs	r3, r3, #4
 8000ae8:	f003 0201 	and.w	r2, r3, #1
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f003 0303 	and.w	r3, r3, #3
 8000b06:	2b03      	cmp	r3, #3
 8000b08:	d017      	beq.n	8000b3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	2203      	movs	r2, #3
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	689a      	ldr	r2, [r3, #8]
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f003 0303 	and.w	r3, r3, #3
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d123      	bne.n	8000b8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	08da      	lsrs	r2, r3, #3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	3208      	adds	r2, #8
 8000b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	220f      	movs	r2, #15
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	43db      	mvns	r3, r3
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4013      	ands	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	691a      	ldr	r2, [r3, #16]
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	f003 0307 	and.w	r3, r3, #7
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	08da      	lsrs	r2, r3, #3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3208      	adds	r2, #8
 8000b88:	6939      	ldr	r1, [r7, #16]
 8000b8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	2203      	movs	r2, #3
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f003 0203 	and.w	r2, r3, #3
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f000 8094 	beq.w	8000cf8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd0:	4b52      	ldr	r3, [pc, #328]	; (8000d1c <HAL_GPIO_Init+0x2c0>)
 8000bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bd4:	4a51      	ldr	r2, [pc, #324]	; (8000d1c <HAL_GPIO_Init+0x2c0>)
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	6613      	str	r3, [r2, #96]	; 0x60
 8000bdc:	4b4f      	ldr	r3, [pc, #316]	; (8000d1c <HAL_GPIO_Init+0x2c0>)
 8000bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000be8:	4a4d      	ldr	r2, [pc, #308]	; (8000d20 <HAL_GPIO_Init+0x2c4>)
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	089b      	lsrs	r3, r3, #2
 8000bee:	3302      	adds	r3, #2
 8000bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	f003 0303 	and.w	r3, r3, #3
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	220f      	movs	r2, #15
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	43db      	mvns	r3, r3
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c12:	d00d      	beq.n	8000c30 <HAL_GPIO_Init+0x1d4>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a43      	ldr	r2, [pc, #268]	; (8000d24 <HAL_GPIO_Init+0x2c8>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d007      	beq.n	8000c2c <HAL_GPIO_Init+0x1d0>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a42      	ldr	r2, [pc, #264]	; (8000d28 <HAL_GPIO_Init+0x2cc>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d101      	bne.n	8000c28 <HAL_GPIO_Init+0x1cc>
 8000c24:	2302      	movs	r3, #2
 8000c26:	e004      	b.n	8000c32 <HAL_GPIO_Init+0x1d6>
 8000c28:	2307      	movs	r3, #7
 8000c2a:	e002      	b.n	8000c32 <HAL_GPIO_Init+0x1d6>
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	e000      	b.n	8000c32 <HAL_GPIO_Init+0x1d6>
 8000c30:	2300      	movs	r3, #0
 8000c32:	697a      	ldr	r2, [r7, #20]
 8000c34:	f002 0203 	and.w	r2, r2, #3
 8000c38:	0092      	lsls	r2, r2, #2
 8000c3a:	4093      	lsls	r3, r2
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c42:	4937      	ldr	r1, [pc, #220]	; (8000d20 <HAL_GPIO_Init+0x2c4>)
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	089b      	lsrs	r3, r3, #2
 8000c48:	3302      	adds	r3, #2
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c50:	4b36      	ldr	r3, [pc, #216]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d003      	beq.n	8000c74 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c74:	4a2d      	ldr	r2, [pc, #180]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c7a:	4b2c      	ldr	r3, [pc, #176]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	43db      	mvns	r3, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d003      	beq.n	8000c9e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c9e:	4a23      	ldr	r2, [pc, #140]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ca4:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	43db      	mvns	r3, r3
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d003      	beq.n	8000cc8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cc8:	4a18      	ldr	r2, [pc, #96]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d003      	beq.n	8000cf2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cf2:	4a0e      	ldr	r2, [pc, #56]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	fa22 f303 	lsr.w	r3, r2, r3
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	f47f aeaf 	bne.w	8000a6c <HAL_GPIO_Init+0x10>
  }
}
 8000d0e:	bf00      	nop
 8000d10:	bf00      	nop
 8000d12:	371c      	adds	r7, #28
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	40010000 	.word	0x40010000
 8000d24:	48000400 	.word	0x48000400
 8000d28:	48000800 	.word	0x48000800
 8000d2c:	40010400 	.word	0x40010400

08000d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	807b      	strh	r3, [r7, #2]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d40:	787b      	ldrb	r3, [r7, #1]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d003      	beq.n	8000d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d46:	887a      	ldrh	r2, [r7, #2]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d4c:	e002      	b.n	8000d54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d4e:	887a      	ldrh	r2, [r7, #2]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40007000 	.word	0x40007000

08000d7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d8a:	d130      	bne.n	8000dee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d8c:	4b23      	ldr	r3, [pc, #140]	; (8000e1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d98:	d038      	beq.n	8000e0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d9a:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000da2:	4a1e      	ldr	r2, [pc, #120]	; (8000e1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000da4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2232      	movs	r2, #50	; 0x32
 8000db0:	fb02 f303 	mul.w	r3, r2, r3
 8000db4:	4a1b      	ldr	r2, [pc, #108]	; (8000e24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000db6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dba:	0c9b      	lsrs	r3, r3, #18
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dc0:	e002      	b.n	8000dc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dca:	695b      	ldr	r3, [r3, #20]
 8000dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dd4:	d102      	bne.n	8000ddc <HAL_PWREx_ControlVoltageScaling+0x60>
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1f2      	bne.n	8000dc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000de8:	d110      	bne.n	8000e0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e00f      	b.n	8000e0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dfa:	d007      	beq.n	8000e0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e04:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40007000 	.word	0x40007000
 8000e20:	20000000 	.word	0x20000000
 8000e24:	431bde83 	.word	0x431bde83

08000e28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d102      	bne.n	8000e3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	f000 bc02 	b.w	8001640 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e3c:	4b96      	ldr	r3, [pc, #600]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	f003 030c 	and.w	r3, r3, #12
 8000e44:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e46:	4b94      	ldr	r3, [pc, #592]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
 8000e4e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 0310 	and.w	r3, r3, #16
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f000 80e4 	beq.w	8001026 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d007      	beq.n	8000e74 <HAL_RCC_OscConfig+0x4c>
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	2b0c      	cmp	r3, #12
 8000e68:	f040 808b 	bne.w	8000f82 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	f040 8087 	bne.w	8000f82 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e74:	4b88      	ldr	r3, [pc, #544]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d005      	beq.n	8000e8c <HAL_RCC_OscConfig+0x64>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d101      	bne.n	8000e8c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e3d9      	b.n	8001640 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6a1a      	ldr	r2, [r3, #32]
 8000e90:	4b81      	ldr	r3, [pc, #516]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 0308 	and.w	r3, r3, #8
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d004      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x7e>
 8000e9c:	4b7e      	ldr	r3, [pc, #504]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ea4:	e005      	b.n	8000eb2 <HAL_RCC_OscConfig+0x8a>
 8000ea6:	4b7c      	ldr	r3, [pc, #496]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000eac:	091b      	lsrs	r3, r3, #4
 8000eae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d223      	bcs.n	8000efe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6a1b      	ldr	r3, [r3, #32]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 fd54 	bl	8001968 <RCC_SetFlashLatencyFromMSIRange>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e3ba      	b.n	8001640 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000eca:	4b73      	ldr	r3, [pc, #460]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a72      	ldr	r2, [pc, #456]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000ed0:	f043 0308 	orr.w	r3, r3, #8
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	4b70      	ldr	r3, [pc, #448]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6a1b      	ldr	r3, [r3, #32]
 8000ee2:	496d      	ldr	r1, [pc, #436]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ee8:	4b6b      	ldr	r3, [pc, #428]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	69db      	ldr	r3, [r3, #28]
 8000ef4:	021b      	lsls	r3, r3, #8
 8000ef6:	4968      	ldr	r1, [pc, #416]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	604b      	str	r3, [r1, #4]
 8000efc:	e025      	b.n	8000f4a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000efe:	4b66      	ldr	r3, [pc, #408]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a65      	ldr	r2, [pc, #404]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000f04:	f043 0308 	orr.w	r3, r3, #8
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	4b63      	ldr	r3, [pc, #396]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a1b      	ldr	r3, [r3, #32]
 8000f16:	4960      	ldr	r1, [pc, #384]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f1c:	4b5e      	ldr	r3, [pc, #376]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	69db      	ldr	r3, [r3, #28]
 8000f28:	021b      	lsls	r3, r3, #8
 8000f2a:	495b      	ldr	r1, [pc, #364]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d109      	bne.n	8000f4a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a1b      	ldr	r3, [r3, #32]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 fd14 	bl	8001968 <RCC_SetFlashLatencyFromMSIRange>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e37a      	b.n	8001640 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f4a:	f000 fc81 	bl	8001850 <HAL_RCC_GetSysClockFreq>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	4b51      	ldr	r3, [pc, #324]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	091b      	lsrs	r3, r3, #4
 8000f56:	f003 030f 	and.w	r3, r3, #15
 8000f5a:	4950      	ldr	r1, [pc, #320]	; (800109c <HAL_RCC_OscConfig+0x274>)
 8000f5c:	5ccb      	ldrb	r3, [r1, r3]
 8000f5e:	f003 031f 	and.w	r3, r3, #31
 8000f62:	fa22 f303 	lsr.w	r3, r2, r3
 8000f66:	4a4e      	ldr	r2, [pc, #312]	; (80010a0 <HAL_RCC_OscConfig+0x278>)
 8000f68:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f6a:	4b4e      	ldr	r3, [pc, #312]	; (80010a4 <HAL_RCC_OscConfig+0x27c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fc0e 	bl	8000790 <HAL_InitTick>
 8000f74:	4603      	mov	r3, r0
 8000f76:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d052      	beq.n	8001024 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	e35e      	b.n	8001640 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d032      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f8a:	4b43      	ldr	r3, [pc, #268]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a42      	ldr	r2, [pc, #264]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f96:	f7ff fc4b 	bl	8000830 <HAL_GetTick>
 8000f9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f9c:	e008      	b.n	8000fb0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f9e:	f7ff fc47 	bl	8000830 <HAL_GetTick>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d901      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e347      	b.n	8001640 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fb0:	4b39      	ldr	r3, [pc, #228]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d0f0      	beq.n	8000f9e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fbc:	4b36      	ldr	r3, [pc, #216]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a35      	ldr	r2, [pc, #212]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000fc2:	f043 0308 	orr.w	r3, r3, #8
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	4b33      	ldr	r3, [pc, #204]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a1b      	ldr	r3, [r3, #32]
 8000fd4:	4930      	ldr	r1, [pc, #192]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fda:	4b2f      	ldr	r3, [pc, #188]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	492b      	ldr	r1, [pc, #172]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000fea:	4313      	orrs	r3, r2
 8000fec:	604b      	str	r3, [r1, #4]
 8000fee:	e01a      	b.n	8001026 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000ff0:	4b29      	ldr	r3, [pc, #164]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a28      	ldr	r2, [pc, #160]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000ff6:	f023 0301 	bic.w	r3, r3, #1
 8000ffa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fc18 	bl	8000830 <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001004:	f7ff fc14 	bl	8000830 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e314      	b.n	8001640 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001016:	4b20      	ldr	r3, [pc, #128]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f0      	bne.n	8001004 <HAL_RCC_OscConfig+0x1dc>
 8001022:	e000      	b.n	8001026 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001024:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	2b00      	cmp	r3, #0
 8001030:	d073      	beq.n	800111a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	2b08      	cmp	r3, #8
 8001036:	d005      	beq.n	8001044 <HAL_RCC_OscConfig+0x21c>
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	2b0c      	cmp	r3, #12
 800103c:	d10e      	bne.n	800105c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	2b03      	cmp	r3, #3
 8001042:	d10b      	bne.n	800105c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d063      	beq.n	8001118 <HAL_RCC_OscConfig+0x2f0>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d15f      	bne.n	8001118 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e2f1      	b.n	8001640 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001064:	d106      	bne.n	8001074 <HAL_RCC_OscConfig+0x24c>
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 800106c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	e025      	b.n	80010c0 <HAL_RCC_OscConfig+0x298>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800107c:	d114      	bne.n	80010a8 <HAL_RCC_OscConfig+0x280>
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a05      	ldr	r2, [pc, #20]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8001084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001088:	6013      	str	r3, [r2, #0]
 800108a:	4b03      	ldr	r3, [pc, #12]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a02      	ldr	r2, [pc, #8]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8001090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001094:	6013      	str	r3, [r2, #0]
 8001096:	e013      	b.n	80010c0 <HAL_RCC_OscConfig+0x298>
 8001098:	40021000 	.word	0x40021000
 800109c:	080025a8 	.word	0x080025a8
 80010a0:	20000000 	.word	0x20000000
 80010a4:	20000004 	.word	0x20000004
 80010a8:	4ba0      	ldr	r3, [pc, #640]	; (800132c <HAL_RCC_OscConfig+0x504>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a9f      	ldr	r2, [pc, #636]	; (800132c <HAL_RCC_OscConfig+0x504>)
 80010ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	4b9d      	ldr	r3, [pc, #628]	; (800132c <HAL_RCC_OscConfig+0x504>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a9c      	ldr	r2, [pc, #624]	; (800132c <HAL_RCC_OscConfig+0x504>)
 80010ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d013      	beq.n	80010f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c8:	f7ff fbb2 	bl	8000830 <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010d0:	f7ff fbae 	bl	8000830 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b64      	cmp	r3, #100	; 0x64
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e2ae      	b.n	8001640 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010e2:	4b92      	ldr	r3, [pc, #584]	; (800132c <HAL_RCC_OscConfig+0x504>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d0f0      	beq.n	80010d0 <HAL_RCC_OscConfig+0x2a8>
 80010ee:	e014      	b.n	800111a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f0:	f7ff fb9e 	bl	8000830 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f8:	f7ff fb9a 	bl	8000830 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b64      	cmp	r3, #100	; 0x64
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e29a      	b.n	8001640 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800110a:	4b88      	ldr	r3, [pc, #544]	; (800132c <HAL_RCC_OscConfig+0x504>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f0      	bne.n	80010f8 <HAL_RCC_OscConfig+0x2d0>
 8001116:	e000      	b.n	800111a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d060      	beq.n	80011e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	2b04      	cmp	r3, #4
 800112a:	d005      	beq.n	8001138 <HAL_RCC_OscConfig+0x310>
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	2b0c      	cmp	r3, #12
 8001130:	d119      	bne.n	8001166 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	2b02      	cmp	r3, #2
 8001136:	d116      	bne.n	8001166 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001138:	4b7c      	ldr	r3, [pc, #496]	; (800132c <HAL_RCC_OscConfig+0x504>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001140:	2b00      	cmp	r3, #0
 8001142:	d005      	beq.n	8001150 <HAL_RCC_OscConfig+0x328>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d101      	bne.n	8001150 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e277      	b.n	8001640 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001150:	4b76      	ldr	r3, [pc, #472]	; (800132c <HAL_RCC_OscConfig+0x504>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	061b      	lsls	r3, r3, #24
 800115e:	4973      	ldr	r1, [pc, #460]	; (800132c <HAL_RCC_OscConfig+0x504>)
 8001160:	4313      	orrs	r3, r2
 8001162:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001164:	e040      	b.n	80011e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d023      	beq.n	80011b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800116e:	4b6f      	ldr	r3, [pc, #444]	; (800132c <HAL_RCC_OscConfig+0x504>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a6e      	ldr	r2, [pc, #440]	; (800132c <HAL_RCC_OscConfig+0x504>)
 8001174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001178:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800117a:	f7ff fb59 	bl	8000830 <HAL_GetTick>
 800117e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001180:	e008      	b.n	8001194 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001182:	f7ff fb55 	bl	8000830 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e255      	b.n	8001640 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001194:	4b65      	ldr	r3, [pc, #404]	; (800132c <HAL_RCC_OscConfig+0x504>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0f0      	beq.n	8001182 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a0:	4b62      	ldr	r3, [pc, #392]	; (800132c <HAL_RCC_OscConfig+0x504>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	061b      	lsls	r3, r3, #24
 80011ae:	495f      	ldr	r1, [pc, #380]	; (800132c <HAL_RCC_OscConfig+0x504>)
 80011b0:	4313      	orrs	r3, r2
 80011b2:	604b      	str	r3, [r1, #4]
 80011b4:	e018      	b.n	80011e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011b6:	4b5d      	ldr	r3, [pc, #372]	; (800132c <HAL_RCC_OscConfig+0x504>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a5c      	ldr	r2, [pc, #368]	; (800132c <HAL_RCC_OscConfig+0x504>)
 80011bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c2:	f7ff fb35 	bl	8000830 <HAL_GetTick>
 80011c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011c8:	e008      	b.n	80011dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ca:	f7ff fb31 	bl	8000830 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e231      	b.n	8001640 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011dc:	4b53      	ldr	r3, [pc, #332]	; (800132c <HAL_RCC_OscConfig+0x504>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1f0      	bne.n	80011ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0308 	and.w	r3, r3, #8
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d03c      	beq.n	800126e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d01c      	beq.n	8001236 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011fc:	4b4b      	ldr	r3, [pc, #300]	; (800132c <HAL_RCC_OscConfig+0x504>)
 80011fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001202:	4a4a      	ldr	r2, [pc, #296]	; (800132c <HAL_RCC_OscConfig+0x504>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800120c:	f7ff fb10 	bl	8000830 <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001214:	f7ff fb0c 	bl	8000830 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e20c      	b.n	8001640 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001226:	4b41      	ldr	r3, [pc, #260]	; (800132c <HAL_RCC_OscConfig+0x504>)
 8001228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0ef      	beq.n	8001214 <HAL_RCC_OscConfig+0x3ec>
 8001234:	e01b      	b.n	800126e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001236:	4b3d      	ldr	r3, [pc, #244]	; (800132c <HAL_RCC_OscConfig+0x504>)
 8001238:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800123c:	4a3b      	ldr	r2, [pc, #236]	; (800132c <HAL_RCC_OscConfig+0x504>)
 800123e:	f023 0301 	bic.w	r3, r3, #1
 8001242:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001246:	f7ff faf3 	bl	8000830 <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800124e:	f7ff faef 	bl	8000830 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e1ef      	b.n	8001640 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001260:	4b32      	ldr	r3, [pc, #200]	; (800132c <HAL_RCC_OscConfig+0x504>)
 8001262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1ef      	bne.n	800124e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 80a6 	beq.w	80013c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800127c:	2300      	movs	r3, #0
 800127e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001280:	4b2a      	ldr	r3, [pc, #168]	; (800132c <HAL_RCC_OscConfig+0x504>)
 8001282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d10d      	bne.n	80012a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800128c:	4b27      	ldr	r3, [pc, #156]	; (800132c <HAL_RCC_OscConfig+0x504>)
 800128e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001290:	4a26      	ldr	r2, [pc, #152]	; (800132c <HAL_RCC_OscConfig+0x504>)
 8001292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001296:	6593      	str	r3, [r2, #88]	; 0x58
 8001298:	4b24      	ldr	r3, [pc, #144]	; (800132c <HAL_RCC_OscConfig+0x504>)
 800129a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012a4:	2301      	movs	r3, #1
 80012a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012a8:	4b21      	ldr	r3, [pc, #132]	; (8001330 <HAL_RCC_OscConfig+0x508>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d118      	bne.n	80012e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012b4:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <HAL_RCC_OscConfig+0x508>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a1d      	ldr	r2, [pc, #116]	; (8001330 <HAL_RCC_OscConfig+0x508>)
 80012ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012c0:	f7ff fab6 	bl	8000830 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012c8:	f7ff fab2 	bl	8000830 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e1b2      	b.n	8001640 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <HAL_RCC_OscConfig+0x508>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d108      	bne.n	8001300 <HAL_RCC_OscConfig+0x4d8>
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_RCC_OscConfig+0x504>)
 80012f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012f4:	4a0d      	ldr	r2, [pc, #52]	; (800132c <HAL_RCC_OscConfig+0x504>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012fe:	e029      	b.n	8001354 <HAL_RCC_OscConfig+0x52c>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	2b05      	cmp	r3, #5
 8001306:	d115      	bne.n	8001334 <HAL_RCC_OscConfig+0x50c>
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <HAL_RCC_OscConfig+0x504>)
 800130a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800130e:	4a07      	ldr	r2, [pc, #28]	; (800132c <HAL_RCC_OscConfig+0x504>)
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <HAL_RCC_OscConfig+0x504>)
 800131a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800131e:	4a03      	ldr	r2, [pc, #12]	; (800132c <HAL_RCC_OscConfig+0x504>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001328:	e014      	b.n	8001354 <HAL_RCC_OscConfig+0x52c>
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000
 8001330:	40007000 	.word	0x40007000
 8001334:	4b9a      	ldr	r3, [pc, #616]	; (80015a0 <HAL_RCC_OscConfig+0x778>)
 8001336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800133a:	4a99      	ldr	r2, [pc, #612]	; (80015a0 <HAL_RCC_OscConfig+0x778>)
 800133c:	f023 0301 	bic.w	r3, r3, #1
 8001340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001344:	4b96      	ldr	r3, [pc, #600]	; (80015a0 <HAL_RCC_OscConfig+0x778>)
 8001346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800134a:	4a95      	ldr	r2, [pc, #596]	; (80015a0 <HAL_RCC_OscConfig+0x778>)
 800134c:	f023 0304 	bic.w	r3, r3, #4
 8001350:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d016      	beq.n	800138a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800135c:	f7ff fa68 	bl	8000830 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001362:	e00a      	b.n	800137a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001364:	f7ff fa64 	bl	8000830 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001372:	4293      	cmp	r3, r2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e162      	b.n	8001640 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800137a:	4b89      	ldr	r3, [pc, #548]	; (80015a0 <HAL_RCC_OscConfig+0x778>)
 800137c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0ed      	beq.n	8001364 <HAL_RCC_OscConfig+0x53c>
 8001388:	e015      	b.n	80013b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138a:	f7ff fa51 	bl	8000830 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001390:	e00a      	b.n	80013a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001392:	f7ff fa4d 	bl	8000830 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e14b      	b.n	8001640 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013a8:	4b7d      	ldr	r3, [pc, #500]	; (80015a0 <HAL_RCC_OscConfig+0x778>)
 80013aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1ed      	bne.n	8001392 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013b6:	7ffb      	ldrb	r3, [r7, #31]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d105      	bne.n	80013c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013bc:	4b78      	ldr	r3, [pc, #480]	; (80015a0 <HAL_RCC_OscConfig+0x778>)
 80013be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c0:	4a77      	ldr	r2, [pc, #476]	; (80015a0 <HAL_RCC_OscConfig+0x778>)
 80013c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0320 	and.w	r3, r3, #32
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d03c      	beq.n	800144e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d01c      	beq.n	8001416 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80013dc:	4b70      	ldr	r3, [pc, #448]	; (80015a0 <HAL_RCC_OscConfig+0x778>)
 80013de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013e2:	4a6f      	ldr	r2, [pc, #444]	; (80015a0 <HAL_RCC_OscConfig+0x778>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ec:	f7ff fa20 	bl	8000830 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013f4:	f7ff fa1c 	bl	8000830 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e11c      	b.n	8001640 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001406:	4b66      	ldr	r3, [pc, #408]	; (80015a0 <HAL_RCC_OscConfig+0x778>)
 8001408:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0ef      	beq.n	80013f4 <HAL_RCC_OscConfig+0x5cc>
 8001414:	e01b      	b.n	800144e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001416:	4b62      	ldr	r3, [pc, #392]	; (80015a0 <HAL_RCC_OscConfig+0x778>)
 8001418:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800141c:	4a60      	ldr	r2, [pc, #384]	; (80015a0 <HAL_RCC_OscConfig+0x778>)
 800141e:	f023 0301 	bic.w	r3, r3, #1
 8001422:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001426:	f7ff fa03 	bl	8000830 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800142c:	e008      	b.n	8001440 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800142e:	f7ff f9ff 	bl	8000830 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e0ff      	b.n	8001640 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001440:	4b57      	ldr	r3, [pc, #348]	; (80015a0 <HAL_RCC_OscConfig+0x778>)
 8001442:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1ef      	bne.n	800142e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 80f3 	beq.w	800163e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145c:	2b02      	cmp	r3, #2
 800145e:	f040 80c9 	bne.w	80015f4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001462:	4b4f      	ldr	r3, [pc, #316]	; (80015a0 <HAL_RCC_OscConfig+0x778>)
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f003 0203 	and.w	r2, r3, #3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001472:	429a      	cmp	r2, r3
 8001474:	d12c      	bne.n	80014d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	3b01      	subs	r3, #1
 8001482:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001484:	429a      	cmp	r2, r3
 8001486:	d123      	bne.n	80014d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001492:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001494:	429a      	cmp	r2, r3
 8001496:	d11b      	bne.n	80014d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d113      	bne.n	80014d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014b2:	085b      	lsrs	r3, r3, #1
 80014b4:	3b01      	subs	r3, #1
 80014b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d109      	bne.n	80014d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	085b      	lsrs	r3, r3, #1
 80014c8:	3b01      	subs	r3, #1
 80014ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d06b      	beq.n	80015a8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	2b0c      	cmp	r3, #12
 80014d4:	d062      	beq.n	800159c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80014d6:	4b32      	ldr	r3, [pc, #200]	; (80015a0 <HAL_RCC_OscConfig+0x778>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e0ac      	b.n	8001640 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80014e6:	4b2e      	ldr	r3, [pc, #184]	; (80015a0 <HAL_RCC_OscConfig+0x778>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a2d      	ldr	r2, [pc, #180]	; (80015a0 <HAL_RCC_OscConfig+0x778>)
 80014ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014f0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014f2:	f7ff f99d 	bl	8000830 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014fa:	f7ff f999 	bl	8000830 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e099      	b.n	8001640 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800150c:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <HAL_RCC_OscConfig+0x778>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1f0      	bne.n	80014fa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001518:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <HAL_RCC_OscConfig+0x778>)
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <HAL_RCC_OscConfig+0x77c>)
 800151e:	4013      	ands	r3, r2
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001528:	3a01      	subs	r2, #1
 800152a:	0112      	lsls	r2, r2, #4
 800152c:	4311      	orrs	r1, r2
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001532:	0212      	lsls	r2, r2, #8
 8001534:	4311      	orrs	r1, r2
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800153a:	0852      	lsrs	r2, r2, #1
 800153c:	3a01      	subs	r2, #1
 800153e:	0552      	lsls	r2, r2, #21
 8001540:	4311      	orrs	r1, r2
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001546:	0852      	lsrs	r2, r2, #1
 8001548:	3a01      	subs	r2, #1
 800154a:	0652      	lsls	r2, r2, #25
 800154c:	4311      	orrs	r1, r2
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001552:	06d2      	lsls	r2, r2, #27
 8001554:	430a      	orrs	r2, r1
 8001556:	4912      	ldr	r1, [pc, #72]	; (80015a0 <HAL_RCC_OscConfig+0x778>)
 8001558:	4313      	orrs	r3, r2
 800155a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800155c:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <HAL_RCC_OscConfig+0x778>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0f      	ldr	r2, [pc, #60]	; (80015a0 <HAL_RCC_OscConfig+0x778>)
 8001562:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001566:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001568:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <HAL_RCC_OscConfig+0x778>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	4a0c      	ldr	r2, [pc, #48]	; (80015a0 <HAL_RCC_OscConfig+0x778>)
 800156e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001572:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001574:	f7ff f95c 	bl	8000830 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800157c:	f7ff f958 	bl	8000830 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e058      	b.n	8001640 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800158e:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <HAL_RCC_OscConfig+0x778>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f0      	beq.n	800157c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800159a:	e050      	b.n	800163e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e04f      	b.n	8001640 <HAL_RCC_OscConfig+0x818>
 80015a0:	40021000 	.word	0x40021000
 80015a4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015a8:	4b27      	ldr	r3, [pc, #156]	; (8001648 <HAL_RCC_OscConfig+0x820>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d144      	bne.n	800163e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80015b4:	4b24      	ldr	r3, [pc, #144]	; (8001648 <HAL_RCC_OscConfig+0x820>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a23      	ldr	r2, [pc, #140]	; (8001648 <HAL_RCC_OscConfig+0x820>)
 80015ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015c0:	4b21      	ldr	r3, [pc, #132]	; (8001648 <HAL_RCC_OscConfig+0x820>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	4a20      	ldr	r2, [pc, #128]	; (8001648 <HAL_RCC_OscConfig+0x820>)
 80015c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80015cc:	f7ff f930 	bl	8000830 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d4:	f7ff f92c 	bl	8000830 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e02c      	b.n	8001640 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015e6:	4b18      	ldr	r3, [pc, #96]	; (8001648 <HAL_RCC_OscConfig+0x820>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0x7ac>
 80015f2:	e024      	b.n	800163e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	2b0c      	cmp	r3, #12
 80015f8:	d01f      	beq.n	800163a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fa:	4b13      	ldr	r3, [pc, #76]	; (8001648 <HAL_RCC_OscConfig+0x820>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a12      	ldr	r2, [pc, #72]	; (8001648 <HAL_RCC_OscConfig+0x820>)
 8001600:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001606:	f7ff f913 	bl	8000830 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800160e:	f7ff f90f 	bl	8000830 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e00f      	b.n	8001640 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <HAL_RCC_OscConfig+0x820>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1f0      	bne.n	800160e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_RCC_OscConfig+0x820>)
 800162e:	68da      	ldr	r2, [r3, #12]
 8001630:	4905      	ldr	r1, [pc, #20]	; (8001648 <HAL_RCC_OscConfig+0x820>)
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_RCC_OscConfig+0x824>)
 8001634:	4013      	ands	r3, r2
 8001636:	60cb      	str	r3, [r1, #12]
 8001638:	e001      	b.n	800163e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3720      	adds	r7, #32
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40021000 	.word	0x40021000
 800164c:	feeefffc 	.word	0xfeeefffc

08001650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e0e7      	b.n	8001834 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001664:	4b75      	ldr	r3, [pc, #468]	; (800183c <HAL_RCC_ClockConfig+0x1ec>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d910      	bls.n	8001694 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001672:	4b72      	ldr	r3, [pc, #456]	; (800183c <HAL_RCC_ClockConfig+0x1ec>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f023 0207 	bic.w	r2, r3, #7
 800167a:	4970      	ldr	r1, [pc, #448]	; (800183c <HAL_RCC_ClockConfig+0x1ec>)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	4313      	orrs	r3, r2
 8001680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001682:	4b6e      	ldr	r3, [pc, #440]	; (800183c <HAL_RCC_ClockConfig+0x1ec>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d001      	beq.n	8001694 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e0cf      	b.n	8001834 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d010      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	4b66      	ldr	r3, [pc, #408]	; (8001840 <HAL_RCC_ClockConfig+0x1f0>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d908      	bls.n	80016c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b0:	4b63      	ldr	r3, [pc, #396]	; (8001840 <HAL_RCC_ClockConfig+0x1f0>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	4960      	ldr	r1, [pc, #384]	; (8001840 <HAL_RCC_ClockConfig+0x1f0>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d04c      	beq.n	8001768 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d107      	bne.n	80016e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016d6:	4b5a      	ldr	r3, [pc, #360]	; (8001840 <HAL_RCC_ClockConfig+0x1f0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d121      	bne.n	8001726 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e0a6      	b.n	8001834 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d107      	bne.n	80016fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ee:	4b54      	ldr	r3, [pc, #336]	; (8001840 <HAL_RCC_ClockConfig+0x1f0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d115      	bne.n	8001726 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e09a      	b.n	8001834 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d107      	bne.n	8001716 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001706:	4b4e      	ldr	r3, [pc, #312]	; (8001840 <HAL_RCC_ClockConfig+0x1f0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d109      	bne.n	8001726 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e08e      	b.n	8001834 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001716:	4b4a      	ldr	r3, [pc, #296]	; (8001840 <HAL_RCC_ClockConfig+0x1f0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e086      	b.n	8001834 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001726:	4b46      	ldr	r3, [pc, #280]	; (8001840 <HAL_RCC_ClockConfig+0x1f0>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f023 0203 	bic.w	r2, r3, #3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	4943      	ldr	r1, [pc, #268]	; (8001840 <HAL_RCC_ClockConfig+0x1f0>)
 8001734:	4313      	orrs	r3, r2
 8001736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001738:	f7ff f87a 	bl	8000830 <HAL_GetTick>
 800173c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173e:	e00a      	b.n	8001756 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001740:	f7ff f876 	bl	8000830 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	f241 3288 	movw	r2, #5000	; 0x1388
 800174e:	4293      	cmp	r3, r2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e06e      	b.n	8001834 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001756:	4b3a      	ldr	r3, [pc, #232]	; (8001840 <HAL_RCC_ClockConfig+0x1f0>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 020c 	and.w	r2, r3, #12
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	429a      	cmp	r2, r3
 8001766:	d1eb      	bne.n	8001740 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d010      	beq.n	8001796 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	4b31      	ldr	r3, [pc, #196]	; (8001840 <HAL_RCC_ClockConfig+0x1f0>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001780:	429a      	cmp	r2, r3
 8001782:	d208      	bcs.n	8001796 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001784:	4b2e      	ldr	r3, [pc, #184]	; (8001840 <HAL_RCC_ClockConfig+0x1f0>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	492b      	ldr	r1, [pc, #172]	; (8001840 <HAL_RCC_ClockConfig+0x1f0>)
 8001792:	4313      	orrs	r3, r2
 8001794:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001796:	4b29      	ldr	r3, [pc, #164]	; (800183c <HAL_RCC_ClockConfig+0x1ec>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d210      	bcs.n	80017c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a4:	4b25      	ldr	r3, [pc, #148]	; (800183c <HAL_RCC_ClockConfig+0x1ec>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f023 0207 	bic.w	r2, r3, #7
 80017ac:	4923      	ldr	r1, [pc, #140]	; (800183c <HAL_RCC_ClockConfig+0x1ec>)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b4:	4b21      	ldr	r3, [pc, #132]	; (800183c <HAL_RCC_ClockConfig+0x1ec>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d001      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e036      	b.n	8001834 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d008      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d2:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <HAL_RCC_ClockConfig+0x1f0>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	4918      	ldr	r1, [pc, #96]	; (8001840 <HAL_RCC_ClockConfig+0x1f0>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0308 	and.w	r3, r3, #8
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d009      	beq.n	8001804 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017f0:	4b13      	ldr	r3, [pc, #76]	; (8001840 <HAL_RCC_ClockConfig+0x1f0>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	4910      	ldr	r1, [pc, #64]	; (8001840 <HAL_RCC_ClockConfig+0x1f0>)
 8001800:	4313      	orrs	r3, r2
 8001802:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001804:	f000 f824 	bl	8001850 <HAL_RCC_GetSysClockFreq>
 8001808:	4602      	mov	r2, r0
 800180a:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <HAL_RCC_ClockConfig+0x1f0>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	091b      	lsrs	r3, r3, #4
 8001810:	f003 030f 	and.w	r3, r3, #15
 8001814:	490b      	ldr	r1, [pc, #44]	; (8001844 <HAL_RCC_ClockConfig+0x1f4>)
 8001816:	5ccb      	ldrb	r3, [r1, r3]
 8001818:	f003 031f 	and.w	r3, r3, #31
 800181c:	fa22 f303 	lsr.w	r3, r2, r3
 8001820:	4a09      	ldr	r2, [pc, #36]	; (8001848 <HAL_RCC_ClockConfig+0x1f8>)
 8001822:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001824:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_RCC_ClockConfig+0x1fc>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe ffb1 	bl	8000790 <HAL_InitTick>
 800182e:	4603      	mov	r3, r0
 8001830:	72fb      	strb	r3, [r7, #11]

  return status;
 8001832:	7afb      	ldrb	r3, [r7, #11]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40022000 	.word	0x40022000
 8001840:	40021000 	.word	0x40021000
 8001844:	080025a8 	.word	0x080025a8
 8001848:	20000000 	.word	0x20000000
 800184c:	20000004 	.word	0x20000004

08001850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800185e:	4b3e      	ldr	r3, [pc, #248]	; (8001958 <HAL_RCC_GetSysClockFreq+0x108>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 030c 	and.w	r3, r3, #12
 8001866:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001868:	4b3b      	ldr	r3, [pc, #236]	; (8001958 <HAL_RCC_GetSysClockFreq+0x108>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d005      	beq.n	8001884 <HAL_RCC_GetSysClockFreq+0x34>
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	2b0c      	cmp	r3, #12
 800187c:	d121      	bne.n	80018c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d11e      	bne.n	80018c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001884:	4b34      	ldr	r3, [pc, #208]	; (8001958 <HAL_RCC_GetSysClockFreq+0x108>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0308 	and.w	r3, r3, #8
 800188c:	2b00      	cmp	r3, #0
 800188e:	d107      	bne.n	80018a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001890:	4b31      	ldr	r3, [pc, #196]	; (8001958 <HAL_RCC_GetSysClockFreq+0x108>)
 8001892:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001896:	0a1b      	lsrs	r3, r3, #8
 8001898:	f003 030f 	and.w	r3, r3, #15
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	e005      	b.n	80018ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80018a0:	4b2d      	ldr	r3, [pc, #180]	; (8001958 <HAL_RCC_GetSysClockFreq+0x108>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	091b      	lsrs	r3, r3, #4
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80018ac:	4a2b      	ldr	r2, [pc, #172]	; (800195c <HAL_RCC_GetSysClockFreq+0x10c>)
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d10d      	bne.n	80018d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018c0:	e00a      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	2b04      	cmp	r3, #4
 80018c6:	d102      	bne.n	80018ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80018c8:	4b25      	ldr	r3, [pc, #148]	; (8001960 <HAL_RCC_GetSysClockFreq+0x110>)
 80018ca:	61bb      	str	r3, [r7, #24]
 80018cc:	e004      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	d101      	bne.n	80018d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018d4:	4b23      	ldr	r3, [pc, #140]	; (8001964 <HAL_RCC_GetSysClockFreq+0x114>)
 80018d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	2b0c      	cmp	r3, #12
 80018dc:	d134      	bne.n	8001948 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018de:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <HAL_RCC_GetSysClockFreq+0x108>)
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d003      	beq.n	80018f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	d003      	beq.n	80018fc <HAL_RCC_GetSysClockFreq+0xac>
 80018f4:	e005      	b.n	8001902 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80018f6:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <HAL_RCC_GetSysClockFreq+0x110>)
 80018f8:	617b      	str	r3, [r7, #20]
      break;
 80018fa:	e005      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80018fc:	4b19      	ldr	r3, [pc, #100]	; (8001964 <HAL_RCC_GetSysClockFreq+0x114>)
 80018fe:	617b      	str	r3, [r7, #20]
      break;
 8001900:	e002      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	617b      	str	r3, [r7, #20]
      break;
 8001906:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001908:	4b13      	ldr	r3, [pc, #76]	; (8001958 <HAL_RCC_GetSysClockFreq+0x108>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	091b      	lsrs	r3, r3, #4
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	3301      	adds	r3, #1
 8001914:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001916:	4b10      	ldr	r3, [pc, #64]	; (8001958 <HAL_RCC_GetSysClockFreq+0x108>)
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	0a1b      	lsrs	r3, r3, #8
 800191c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	fb03 f202 	mul.w	r2, r3, r2
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	fbb2 f3f3 	udiv	r3, r2, r3
 800192c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <HAL_RCC_GetSysClockFreq+0x108>)
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	0e5b      	lsrs	r3, r3, #25
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	3301      	adds	r3, #1
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	fbb2 f3f3 	udiv	r3, r2, r3
 8001946:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001948:	69bb      	ldr	r3, [r7, #24]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3724      	adds	r7, #36	; 0x24
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000
 800195c:	080025b8 	.word	0x080025b8
 8001960:	00f42400 	.word	0x00f42400
 8001964:	007a1200 	.word	0x007a1200

08001968 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001970:	2300      	movs	r3, #0
 8001972:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001974:	4b2a      	ldr	r3, [pc, #168]	; (8001a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001980:	f7ff f9ee 	bl	8000d60 <HAL_PWREx_GetVoltageRange>
 8001984:	6178      	str	r0, [r7, #20]
 8001986:	e014      	b.n	80019b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001988:	4b25      	ldr	r3, [pc, #148]	; (8001a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800198a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198c:	4a24      	ldr	r2, [pc, #144]	; (8001a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800198e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001992:	6593      	str	r3, [r2, #88]	; 0x58
 8001994:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80019a0:	f7ff f9de 	bl	8000d60 <HAL_PWREx_GetVoltageRange>
 80019a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80019a6:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019aa:	4a1d      	ldr	r2, [pc, #116]	; (8001a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019b8:	d10b      	bne.n	80019d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b80      	cmp	r3, #128	; 0x80
 80019be:	d919      	bls.n	80019f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2ba0      	cmp	r3, #160	; 0xa0
 80019c4:	d902      	bls.n	80019cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019c6:	2302      	movs	r3, #2
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	e013      	b.n	80019f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019cc:	2301      	movs	r3, #1
 80019ce:	613b      	str	r3, [r7, #16]
 80019d0:	e010      	b.n	80019f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b80      	cmp	r3, #128	; 0x80
 80019d6:	d902      	bls.n	80019de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80019d8:	2303      	movs	r3, #3
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	e00a      	b.n	80019f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b80      	cmp	r3, #128	; 0x80
 80019e2:	d102      	bne.n	80019ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019e4:	2302      	movs	r3, #2
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	e004      	b.n	80019f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b70      	cmp	r3, #112	; 0x70
 80019ee:	d101      	bne.n	80019f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019f0:	2301      	movs	r3, #1
 80019f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f023 0207 	bic.w	r2, r3, #7
 80019fc:	4909      	ldr	r1, [pc, #36]	; (8001a24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a04:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d001      	beq.n	8001a16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40022000 	.word	0x40022000

08001a28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e095      	b.n	8001b66 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d108      	bne.n	8001a54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a4a:	d009      	beq.n	8001a60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	61da      	str	r2, [r3, #28]
 8001a52:	e005      	b.n	8001a60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d106      	bne.n	8001a80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7fe fdc8 	bl	8000610 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2202      	movs	r2, #2
 8001a84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001aa0:	d902      	bls.n	8001aa8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	e002      	b.n	8001aae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001ab6:	d007      	beq.n	8001ac8 <HAL_SPI_Init+0xa0>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001ac0:	d002      	beq.n	8001ac8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	431a      	orrs	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b00:	431a      	orrs	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0a:	ea42 0103 	orr.w	r1, r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b12:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	0c1b      	lsrs	r3, r3, #16
 8001b24:	f003 0204 	and.w	r2, r3, #4
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	431a      	orrs	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001b44:	ea42 0103 	orr.w	r1, r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b088      	sub	sp, #32
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	603b      	str	r3, [r7, #0]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d101      	bne.n	8001b90 <HAL_SPI_Transmit+0x22>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	e158      	b.n	8001e42 <HAL_SPI_Transmit+0x2d4>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b98:	f7fe fe4a 	bl	8000830 <HAL_GetTick>
 8001b9c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d002      	beq.n	8001bb4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001bb2:	e13d      	b.n	8001e30 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d002      	beq.n	8001bc0 <HAL_SPI_Transmit+0x52>
 8001bba:	88fb      	ldrh	r3, [r7, #6]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d102      	bne.n	8001bc6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001bc4:	e134      	b.n	8001e30 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2203      	movs	r2, #3
 8001bca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	88fa      	ldrh	r2, [r7, #6]
 8001bde:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	88fa      	ldrh	r2, [r7, #6]
 8001be4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c10:	d10f      	bne.n	8001c32 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c3c:	2b40      	cmp	r3, #64	; 0x40
 8001c3e:	d007      	beq.n	8001c50 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001c58:	d94b      	bls.n	8001cf2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d002      	beq.n	8001c68 <HAL_SPI_Transmit+0xfa>
 8001c62:	8afb      	ldrh	r3, [r7, #22]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d13e      	bne.n	8001ce6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6c:	881a      	ldrh	r2, [r3, #0]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c78:	1c9a      	adds	r2, r3, #2
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	3b01      	subs	r3, #1
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c8c:	e02b      	b.n	8001ce6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d112      	bne.n	8001cc2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca0:	881a      	ldrh	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cac:	1c9a      	adds	r2, r3, #2
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001cc0:	e011      	b.n	8001ce6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cc2:	f7fe fdb5 	bl	8000830 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d803      	bhi.n	8001cda <HAL_SPI_Transmit+0x16c>
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd8:	d102      	bne.n	8001ce0 <HAL_SPI_Transmit+0x172>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d102      	bne.n	8001ce6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001ce4:	e0a4      	b.n	8001e30 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1ce      	bne.n	8001c8e <HAL_SPI_Transmit+0x120>
 8001cf0:	e07c      	b.n	8001dec <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <HAL_SPI_Transmit+0x192>
 8001cfa:	8afb      	ldrh	r3, [r7, #22]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d170      	bne.n	8001de2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d912      	bls.n	8001d30 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0e:	881a      	ldrh	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1a:	1c9a      	adds	r2, r3, #2
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	3b02      	subs	r3, #2
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d2e:	e058      	b.n	8001de2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	330c      	adds	r3, #12
 8001d3a:	7812      	ldrb	r2, [r2, #0]
 8001d3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d42:	1c5a      	adds	r2, r3, #1
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001d56:	e044      	b.n	8001de2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d12b      	bne.n	8001dbe <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d912      	bls.n	8001d96 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d74:	881a      	ldrh	r2, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d80:	1c9a      	adds	r2, r3, #2
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	3b02      	subs	r3, #2
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d94:	e025      	b.n	8001de2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	330c      	adds	r3, #12
 8001da0:	7812      	ldrb	r2, [r2, #0]
 8001da2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001dbc:	e011      	b.n	8001de2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dbe:	f7fe fd37 	bl	8000830 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d803      	bhi.n	8001dd6 <HAL_SPI_Transmit+0x268>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd4:	d102      	bne.n	8001ddc <HAL_SPI_Transmit+0x26e>
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d102      	bne.n	8001de2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001de0:	e026      	b.n	8001e30 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1b5      	bne.n	8001d58 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	6839      	ldr	r1, [r7, #0]
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 fb5b 	bl	80024ac <SPI_EndRxTxTransaction>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d002      	beq.n	8001e02 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10a      	bne.n	8001e20 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	77fb      	strb	r3, [r7, #31]
 8001e2c:	e000      	b.n	8001e30 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8001e2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001e40:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3720      	adds	r7, #32
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b08a      	sub	sp, #40	; 0x28
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	60f8      	str	r0, [r7, #12]
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <HAL_SPI_TransmitReceive+0x26>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e1fb      	b.n	8002268 <HAL_SPI_TransmitReceive+0x41e>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e78:	f7fe fcda 	bl	8000830 <HAL_GetTick>
 8001e7c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001e84:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001e8c:	887b      	ldrh	r3, [r7, #2]
 8001e8e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8001e90:	887b      	ldrh	r3, [r7, #2]
 8001e92:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001e94:	7efb      	ldrb	r3, [r7, #27]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d00e      	beq.n	8001eb8 <HAL_SPI_TransmitReceive+0x6e>
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ea0:	d106      	bne.n	8001eb0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d102      	bne.n	8001eb0 <HAL_SPI_TransmitReceive+0x66>
 8001eaa:	7efb      	ldrb	r3, [r7, #27]
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d003      	beq.n	8001eb8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001eb6:	e1cd      	b.n	8002254 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d005      	beq.n	8001eca <HAL_SPI_TransmitReceive+0x80>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <HAL_SPI_TransmitReceive+0x80>
 8001ec4:	887b      	ldrh	r3, [r7, #2]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d103      	bne.n	8001ed2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001ed0:	e1c0      	b.n	8002254 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d003      	beq.n	8001ee6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2205      	movs	r2, #5
 8001ee2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	887a      	ldrh	r2, [r7, #2]
 8001ef6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	887a      	ldrh	r2, [r7, #2]
 8001efe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	887a      	ldrh	r2, [r7, #2]
 8001f0c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	887a      	ldrh	r2, [r7, #2]
 8001f12:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f28:	d802      	bhi.n	8001f30 <HAL_SPI_TransmitReceive+0xe6>
 8001f2a:	8a3b      	ldrh	r3, [r7, #16]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d908      	bls.n	8001f42 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	e007      	b.n	8001f52 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f50:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5c:	2b40      	cmp	r3, #64	; 0x40
 8001f5e:	d007      	beq.n	8001f70 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f78:	d97c      	bls.n	8002074 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d002      	beq.n	8001f88 <HAL_SPI_TransmitReceive+0x13e>
 8001f82:	8a7b      	ldrh	r3, [r7, #18]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d169      	bne.n	800205c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8c:	881a      	ldrh	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f98:	1c9a      	adds	r2, r3, #2
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fac:	e056      	b.n	800205c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d11b      	bne.n	8001ff4 <HAL_SPI_TransmitReceive+0x1aa>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d016      	beq.n	8001ff4 <HAL_SPI_TransmitReceive+0x1aa>
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d113      	bne.n	8001ff4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd0:	881a      	ldrh	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fdc:	1c9a      	adds	r2, r3, #2
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d11c      	bne.n	800203c <HAL_SPI_TransmitReceive+0x1f2>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002008:	b29b      	uxth	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d016      	beq.n	800203c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	b292      	uxth	r2, r2
 800201a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	1c9a      	adds	r2, r3, #2
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800202c:	b29b      	uxth	r3, r3
 800202e:	3b01      	subs	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002038:	2301      	movs	r3, #1
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800203c:	f7fe fbf8 	bl	8000830 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002048:	429a      	cmp	r2, r3
 800204a:	d807      	bhi.n	800205c <HAL_SPI_TransmitReceive+0x212>
 800204c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800204e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002052:	d003      	beq.n	800205c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800205a:	e0fb      	b.n	8002254 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002060:	b29b      	uxth	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1a3      	bne.n	8001fae <HAL_SPI_TransmitReceive+0x164>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800206c:	b29b      	uxth	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d19d      	bne.n	8001fae <HAL_SPI_TransmitReceive+0x164>
 8002072:	e0df      	b.n	8002234 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_SPI_TransmitReceive+0x23a>
 800207c:	8a7b      	ldrh	r3, [r7, #18]
 800207e:	2b01      	cmp	r3, #1
 8002080:	f040 80cb 	bne.w	800221a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002088:	b29b      	uxth	r3, r3
 800208a:	2b01      	cmp	r3, #1
 800208c:	d912      	bls.n	80020b4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002092:	881a      	ldrh	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209e:	1c9a      	adds	r2, r3, #2
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	3b02      	subs	r3, #2
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80020b2:	e0b2      	b.n	800221a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	330c      	adds	r3, #12
 80020be:	7812      	ldrb	r2, [r2, #0]
 80020c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c6:	1c5a      	adds	r2, r3, #1
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	3b01      	subs	r3, #1
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020da:	e09e      	b.n	800221a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d134      	bne.n	8002154 <HAL_SPI_TransmitReceive+0x30a>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d02f      	beq.n	8002154 <HAL_SPI_TransmitReceive+0x30a>
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d12c      	bne.n	8002154 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020fe:	b29b      	uxth	r3, r3
 8002100:	2b01      	cmp	r3, #1
 8002102:	d912      	bls.n	800212a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002108:	881a      	ldrh	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002114:	1c9a      	adds	r2, r3, #2
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800211e:	b29b      	uxth	r3, r3
 8002120:	3b02      	subs	r3, #2
 8002122:	b29a      	uxth	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002128:	e012      	b.n	8002150 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	330c      	adds	r3, #12
 8002134:	7812      	ldrb	r2, [r2, #0]
 8002136:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213c:	1c5a      	adds	r2, r3, #1
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002146:	b29b      	uxth	r3, r3
 8002148:	3b01      	subs	r3, #1
 800214a:	b29a      	uxth	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b01      	cmp	r3, #1
 8002160:	d148      	bne.n	80021f4 <HAL_SPI_TransmitReceive+0x3aa>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002168:	b29b      	uxth	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d042      	beq.n	80021f4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002174:	b29b      	uxth	r3, r3
 8002176:	2b01      	cmp	r3, #1
 8002178:	d923      	bls.n	80021c2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	b292      	uxth	r2, r2
 8002186:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	1c9a      	adds	r2, r3, #2
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002198:	b29b      	uxth	r3, r3
 800219a:	3b02      	subs	r3, #2
 800219c:	b29a      	uxth	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d81f      	bhi.n	80021f0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	e016      	b.n	80021f0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f103 020c 	add.w	r2, r3, #12
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	7812      	ldrb	r2, [r2, #0]
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021f0:	2301      	movs	r3, #1
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80021f4:	f7fe fb1c 	bl	8000830 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002200:	429a      	cmp	r2, r3
 8002202:	d803      	bhi.n	800220c <HAL_SPI_TransmitReceive+0x3c2>
 8002204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220a:	d102      	bne.n	8002212 <HAL_SPI_TransmitReceive+0x3c8>
 800220c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220e:	2b00      	cmp	r3, #0
 8002210:	d103      	bne.n	800221a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002218:	e01c      	b.n	8002254 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800221e:	b29b      	uxth	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	f47f af5b 	bne.w	80020dc <HAL_SPI_TransmitReceive+0x292>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800222c:	b29b      	uxth	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	f47f af54 	bne.w	80020dc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002234:	69fa      	ldr	r2, [r7, #28]
 8002236:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f000 f937 	bl	80024ac <SPI_EndRxTxTransaction>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d006      	beq.n	8002252 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2220      	movs	r2, #32
 800224e:	661a      	str	r2, [r3, #96]	; 0x60
 8002250:	e000      	b.n	8002254 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002252:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002264:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002268:	4618      	mov	r0, r3
 800226a:	3728      	adds	r7, #40	; 0x28
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b088      	sub	sp, #32
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	4613      	mov	r3, r2
 800227e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002280:	f7fe fad6 	bl	8000830 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	4413      	add	r3, r2
 800228e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002290:	f7fe face 	bl	8000830 <HAL_GetTick>
 8002294:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002296:	4b39      	ldr	r3, [pc, #228]	; (800237c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	015b      	lsls	r3, r3, #5
 800229c:	0d1b      	lsrs	r3, r3, #20
 800229e:	69fa      	ldr	r2, [r7, #28]
 80022a0:	fb02 f303 	mul.w	r3, r2, r3
 80022a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022a6:	e054      	b.n	8002352 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ae:	d050      	beq.n	8002352 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80022b0:	f7fe fabe 	bl	8000830 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	69fa      	ldr	r2, [r7, #28]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d902      	bls.n	80022c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d13d      	bne.n	8002342 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80022d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022de:	d111      	bne.n	8002304 <SPI_WaitFlagStateUntilTimeout+0x94>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022e8:	d004      	beq.n	80022f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f2:	d107      	bne.n	8002304 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002302:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800230c:	d10f      	bne.n	800232e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800232c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e017      	b.n	8002372 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002348:	2300      	movs	r3, #0
 800234a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	3b01      	subs	r3, #1
 8002350:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	4013      	ands	r3, r2
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	429a      	cmp	r2, r3
 8002360:	bf0c      	ite	eq
 8002362:	2301      	moveq	r3, #1
 8002364:	2300      	movne	r3, #0
 8002366:	b2db      	uxtb	r3, r3
 8002368:	461a      	mov	r2, r3
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	429a      	cmp	r2, r3
 800236e:	d19b      	bne.n	80022a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3720      	adds	r7, #32
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000000 	.word	0x20000000

08002380 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08a      	sub	sp, #40	; 0x28
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002392:	f7fe fa4d 	bl	8000830 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239a:	1a9b      	subs	r3, r3, r2
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	4413      	add	r3, r2
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80023a2:	f7fe fa45 	bl	8000830 <HAL_GetTick>
 80023a6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	330c      	adds	r3, #12
 80023ae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80023b0:	4b3d      	ldr	r3, [pc, #244]	; (80024a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	00da      	lsls	r2, r3, #3
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	0d1b      	lsrs	r3, r3, #20
 80023c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c2:	fb02 f303 	mul.w	r3, r2, r3
 80023c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80023c8:	e060      	b.n	800248c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80023d0:	d107      	bne.n	80023e2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d104      	bne.n	80023e2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80023e0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e8:	d050      	beq.n	800248c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80023ea:	f7fe fa21 	bl	8000830 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d902      	bls.n	8002400 <SPI_WaitFifoStateUntilTimeout+0x80>
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d13d      	bne.n	800247c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800240e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002418:	d111      	bne.n	800243e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002422:	d004      	beq.n	800242e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800242c:	d107      	bne.n	800243e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800243c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002446:	d10f      	bne.n	8002468 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002466:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e010      	b.n	800249e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002482:	2300      	movs	r3, #0
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	3b01      	subs	r3, #1
 800248a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	4013      	ands	r3, r2
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	429a      	cmp	r2, r3
 800249a:	d196      	bne.n	80023ca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3728      	adds	r7, #40	; 0x28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000000 	.word	0x20000000

080024ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af02      	add	r7, sp, #8
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2200      	movs	r2, #0
 80024c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f7ff ff5b 	bl	8002380 <SPI_WaitFifoStateUntilTimeout>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d007      	beq.n	80024e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d4:	f043 0220 	orr.w	r2, r3, #32
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e027      	b.n	8002530 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2200      	movs	r2, #0
 80024e8:	2180      	movs	r1, #128	; 0x80
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f7ff fec0 	bl	8002270 <SPI_WaitFlagStateUntilTimeout>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d007      	beq.n	8002506 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024fa:	f043 0220 	orr.w	r2, r3, #32
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e014      	b.n	8002530 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2200      	movs	r2, #0
 800250e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f7ff ff34 	bl	8002380 <SPI_WaitFifoStateUntilTimeout>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d007      	beq.n	800252e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002522:	f043 0220 	orr.w	r2, r3, #32
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e000      	b.n	8002530 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <__libc_init_array>:
 8002538:	b570      	push	{r4, r5, r6, lr}
 800253a:	4d0d      	ldr	r5, [pc, #52]	; (8002570 <__libc_init_array+0x38>)
 800253c:	4c0d      	ldr	r4, [pc, #52]	; (8002574 <__libc_init_array+0x3c>)
 800253e:	1b64      	subs	r4, r4, r5
 8002540:	10a4      	asrs	r4, r4, #2
 8002542:	2600      	movs	r6, #0
 8002544:	42a6      	cmp	r6, r4
 8002546:	d109      	bne.n	800255c <__libc_init_array+0x24>
 8002548:	4d0b      	ldr	r5, [pc, #44]	; (8002578 <__libc_init_array+0x40>)
 800254a:	4c0c      	ldr	r4, [pc, #48]	; (800257c <__libc_init_array+0x44>)
 800254c:	f000 f820 	bl	8002590 <_init>
 8002550:	1b64      	subs	r4, r4, r5
 8002552:	10a4      	asrs	r4, r4, #2
 8002554:	2600      	movs	r6, #0
 8002556:	42a6      	cmp	r6, r4
 8002558:	d105      	bne.n	8002566 <__libc_init_array+0x2e>
 800255a:	bd70      	pop	{r4, r5, r6, pc}
 800255c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002560:	4798      	blx	r3
 8002562:	3601      	adds	r6, #1
 8002564:	e7ee      	b.n	8002544 <__libc_init_array+0xc>
 8002566:	f855 3b04 	ldr.w	r3, [r5], #4
 800256a:	4798      	blx	r3
 800256c:	3601      	adds	r6, #1
 800256e:	e7f2      	b.n	8002556 <__libc_init_array+0x1e>
 8002570:	080025e8 	.word	0x080025e8
 8002574:	080025e8 	.word	0x080025e8
 8002578:	080025e8 	.word	0x080025e8
 800257c:	080025ec 	.word	0x080025ec

08002580 <memset>:
 8002580:	4402      	add	r2, r0
 8002582:	4603      	mov	r3, r0
 8002584:	4293      	cmp	r3, r2
 8002586:	d100      	bne.n	800258a <memset+0xa>
 8002588:	4770      	bx	lr
 800258a:	f803 1b01 	strb.w	r1, [r3], #1
 800258e:	e7f9      	b.n	8002584 <memset+0x4>

08002590 <_init>:
 8002590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002592:	bf00      	nop
 8002594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002596:	bc08      	pop	{r3}
 8002598:	469e      	mov	lr, r3
 800259a:	4770      	bx	lr

0800259c <_fini>:
 800259c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800259e:	bf00      	nop
 80025a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025a2:	bc08      	pop	{r3}
 80025a4:	469e      	mov	lr, r3
 80025a6:	4770      	bx	lr
