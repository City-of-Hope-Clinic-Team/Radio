
Prototype3_RadioTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002780  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800290c  0800290c  0001290c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800294c  0800294c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800294c  0800294c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800294c  0800294c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800294c  0800294c  0001294c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002950  08002950  00012950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000010  08002964  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08002964  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000705c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001422  00000000  00000000  0002709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a0  00000000  00000000  000284c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f8  00000000  00000000  00028c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e8a6  00000000  00000000  00029358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007ad5  00000000  00000000  00047bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b86be  00000000  00000000  0004f6d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107d91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dcc  00000000  00000000  00107de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080028f4 	.word	0x080028f4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	080028f4 	.word	0x080028f4

080001cc <accSpiReadByte>:
uint8_t acctxbuffer[8];
uint8_t accrxbuffer[8];
uint32_t SPITIMEOUT = 100;

uint8_t accSpiReadByte(uint8_t address)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af02      	add	r7, sp, #8
 80001d2:	4603      	mov	r3, r0
 80001d4:	71fb      	strb	r3, [r7, #7]
	acctxbuffer[0] = address | 1 << 7; // set msb for reads
 80001d6:	79fb      	ldrb	r3, [r7, #7]
 80001d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80001dc:	b2da      	uxtb	r2, r3
 80001de:	4b11      	ldr	r3, [pc, #68]	; (8000224 <accSpiReadByte+0x58>)
 80001e0:	701a      	strb	r2, [r3, #0]
	acctxbuffer[1] = 0;
 80001e2:	4b10      	ldr	r3, [pc, #64]	; (8000224 <accSpiReadByte+0x58>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(GPIOA, ACC_CSN_Pin, GPIO_PIN_RESET); // Pull CS low
 80001e8:	2200      	movs	r2, #0
 80001ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001f2:	f000 ff4f 	bl	8001094 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, acctxbuffer, accrxbuffer, 2*sizeof(uint8_t), SPITIMEOUT);
 80001f6:	4b0c      	ldr	r3, [pc, #48]	; (8000228 <accSpiReadByte+0x5c>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	9300      	str	r3, [sp, #0]
 80001fc:	2302      	movs	r3, #2
 80001fe:	4a0b      	ldr	r2, [pc, #44]	; (800022c <accSpiReadByte+0x60>)
 8000200:	4908      	ldr	r1, [pc, #32]	; (8000224 <accSpiReadByte+0x58>)
 8000202:	480b      	ldr	r0, [pc, #44]	; (8000230 <accSpiReadByte+0x64>)
 8000204:	f001 ffd3 	bl	80021ae <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, ACC_CSN_Pin, GPIO_PIN_SET); // Release chip select
 8000208:	2201      	movs	r2, #1
 800020a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800020e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000212:	f000 ff3f 	bl	8001094 <HAL_GPIO_WritePin>
	return accrxbuffer[1];
 8000216:	4b05      	ldr	r3, [pc, #20]	; (800022c <accSpiReadByte+0x60>)
 8000218:	785b      	ldrb	r3, [r3, #1]
}
 800021a:	4618      	mov	r0, r3
 800021c:	3708      	adds	r7, #8
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	200000f4 	.word	0x200000f4
 8000228:	20000000 	.word	0x20000000
 800022c:	200000fc 	.word	0x200000fc
 8000230:	20000090 	.word	0x20000090

08000234 <accSpiWriteByte>:

void accSpiWriteByte(uint8_t address, uint8_t value)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	460a      	mov	r2, r1
 800023e:	71fb      	strb	r3, [r7, #7]
 8000240:	4613      	mov	r3, r2
 8000242:	71bb      	strb	r3, [r7, #6]
	acctxbuffer[0] = address;
 8000244:	4a0f      	ldr	r2, [pc, #60]	; (8000284 <accSpiWriteByte+0x50>)
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	7013      	strb	r3, [r2, #0]
	acctxbuffer[1] = value;
 800024a:	4a0e      	ldr	r2, [pc, #56]	; (8000284 <accSpiWriteByte+0x50>)
 800024c:	79bb      	ldrb	r3, [r7, #6]
 800024e:	7053      	strb	r3, [r2, #1]
	HAL_GPIO_WritePin(GPIOA, ACC_CSN_Pin, GPIO_PIN_RESET); // Pull CS low
 8000250:	2200      	movs	r2, #0
 8000252:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800025a:	f000 ff1b 	bl	8001094 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, acctxbuffer, 2, SPITIMEOUT);
 800025e:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <accSpiWriteByte+0x54>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	2202      	movs	r2, #2
 8000264:	4907      	ldr	r1, [pc, #28]	; (8000284 <accSpiWriteByte+0x50>)
 8000266:	4809      	ldr	r0, [pc, #36]	; (800028c <accSpiWriteByte+0x58>)
 8000268:	f001 fe33 	bl	8001ed2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, ACC_CSN_Pin, GPIO_PIN_SET); // Release chip select
 800026c:	2201      	movs	r2, #1
 800026e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000272:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000276:	f000 ff0d 	bl	8001094 <HAL_GPIO_WritePin>
}
 800027a:	bf00      	nop
 800027c:	3708      	adds	r7, #8
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	200000f4 	.word	0x200000f4
 8000288:	20000000 	.word	0x20000000
 800028c:	20000090 	.word	0x20000090

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b090      	sub	sp, #64	; 0x40
 8000294:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000296:	f000 fc14 	bl	8000ac2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029a:	f000 f8f3 	bl	8000484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029e:	f000 f9b3 	bl	8000608 <MX_GPIO_Init>
  MX_SPI1_Init();
 80002a2:	f000 f935 	bl	8000510 <MX_SPI1_Init>
  MX_SPI3_Init();
 80002a6:	f000 f971 	bl	800058c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  uint8_t checkStatus, checkFIFO_Status;
  //uint8_t receivedByte;
  setupTXsimple();
 80002aa:	f000 fa7d 	bl	80007a8 <setupTXsimple>
  //setupRXsimple(); // Configure as a receiver

  HAL_GPIO_WritePin(GPIOA, CE_Pin, GPIO_PIN_SET);
 80002ae:	2201      	movs	r2, #1
 80002b0:	2104      	movs	r1, #4
 80002b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b6:	f000 feed 	bl	8001094 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, ACC_CSN_Pin, GPIO_PIN_SET);
 80002ba:	2201      	movs	r2, #1
 80002bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c4:	f000 fee6 	bl	8001094 <HAL_GPIO_WritePin>

  // Setup the accelerometer
  // Read the WHO_AM_I Register (should be 0x31 = 51)
  uint8_t debug = accSpiReadByte(0x0F); // Should be 0x31 = 51
 80002c8:	200f      	movs	r0, #15
 80002ca:	f7ff ff7f 	bl	80001cc <accSpiReadByte>
 80002ce:	4603      	mov	r3, r0
 80002d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  debug = accSpiReadByte(0x0F);
 80002d4:	200f      	movs	r0, #15
 80002d6:	f7ff ff79 	bl	80001cc <accSpiReadByte>
 80002da:	4603      	mov	r3, r0
 80002dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  debug = accSpiReadByte(0x0F);
 80002e0:	200f      	movs	r0, #15
 80002e2:	f7ff ff73 	bl	80001cc <accSpiReadByte>
 80002e6:	4603      	mov	r3, r0
 80002e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  // Setup the LIS3DH for use
  // CTRL_REG1 (20h) = 01110111 (0x77) - 400 Hz conversion rate
  // CTRL_REG1 (20h) = 00100111 (0x27) - 10 Hz conversion rate
  accSpiWriteByte(0x20, 0x77); // highest conversion rate, all axis on
 80002ec:	2177      	movs	r1, #119	; 0x77
 80002ee:	2020      	movs	r0, #32
 80002f0:	f7ff ffa0 	bl	8000234 <accSpiWriteByte>

  // CTRL_REG4 (23h) = 10001000 (0x88), low res 10000000 (0x80)
  accSpiWriteByte(0x23, 0x88); // block update, and high resolution
 80002f4:	2188      	movs	r1, #136	; 0x88
 80002f6:	2023      	movs	r0, #35	; 0x23
 80002f8:	f7ff ff9c 	bl	8000234 <accSpiWriteByte>
  //uint8_t xlow, xhigh, ylow, yhigh, zlow, zhigh = 0; // Acceleration values
  uint8_t dataBuffer[8]; // xlow, xhigh, ylow, yhigh, zlow, zhigh, steplow, stephigh
  int16_t xval, yval, zval;
  uint32_t accMag;

  uint32_t stepThresh = 1250*1250; // About 12 m/s^2
 80002fc:	4b5f      	ldr	r3, [pc, #380]	; (800047c <main+0x1ec>)
 80002fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t resetThresh = 1100*1100; // Use a different reset threshold for hysteresis
 8000300:	4b5f      	ldr	r3, [pc, #380]	; (8000480 <main+0x1f0>)
 8000302:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t resetDelay = 100; // Count multiple steps within this time as one step
 8000304:	2364      	movs	r3, #100	; 0x64
 8000306:	623b      	str	r3, [r7, #32]
  uint32_t resetTimer = 0;
 8000308:	2300      	movs	r3, #0
 800030a:	63fb      	str	r3, [r7, #60]	; 0x3c
  int stepFlag = 0;
 800030c:	2300      	movs	r3, #0
 800030e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint16_t stepCount = 0; // IMPORTANT: Overflows at 65535 steps.
 8000310:	2300      	movs	r3, #0
 8000312:	86fb      	strh	r3, [r7, #54]	; 0x36
  int accSampleDelay = 1;
 8000314:	2301      	movs	r3, #1
 8000316:	61fb      	str	r3, [r7, #28]
  int transmitDelay = 250;
 8000318:	23fa      	movs	r3, #250	; 0xfa
 800031a:	61bb      	str	r3, [r7, #24]
  int transmitTimer = 0;
 800031c:	2300      	movs	r3, #0
 800031e:	633b      	str	r3, [r7, #48]	; 0x30
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(accSampleDelay);
 8000320:	69fb      	ldr	r3, [r7, #28]
 8000322:	4618      	mov	r0, r3
 8000324:	f000 fc42 	bl	8000bac <HAL_Delay>
	transmitTimer += accSampleDelay;
 8000328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800032a:	69fb      	ldr	r3, [r7, #28]
 800032c:	4413      	add	r3, r2
 800032e:	633b      	str	r3, [r7, #48]	; 0x30

	// 2 Hz continuous acceleration transmission
	// Read accelerometer
	dataBuffer[0] = accSpiReadByte(0x28); // xlow
 8000330:	2028      	movs	r0, #40	; 0x28
 8000332:	f7ff ff4b 	bl	80001cc <accSpiReadByte>
 8000336:	4603      	mov	r3, r0
 8000338:	703b      	strb	r3, [r7, #0]
	dataBuffer[1] = accSpiReadByte(0x29); // xhigh
 800033a:	2029      	movs	r0, #41	; 0x29
 800033c:	f7ff ff46 	bl	80001cc <accSpiReadByte>
 8000340:	4603      	mov	r3, r0
 8000342:	707b      	strb	r3, [r7, #1]
	dataBuffer[2] = accSpiReadByte(0x2A); // ylow
 8000344:	202a      	movs	r0, #42	; 0x2a
 8000346:	f7ff ff41 	bl	80001cc <accSpiReadByte>
 800034a:	4603      	mov	r3, r0
 800034c:	70bb      	strb	r3, [r7, #2]
	dataBuffer[3] = accSpiReadByte(0x2B); // yhigh
 800034e:	202b      	movs	r0, #43	; 0x2b
 8000350:	f7ff ff3c 	bl	80001cc <accSpiReadByte>
 8000354:	4603      	mov	r3, r0
 8000356:	70fb      	strb	r3, [r7, #3]
	dataBuffer[4] = accSpiReadByte(0x2C); // zlow
 8000358:	202c      	movs	r0, #44	; 0x2c
 800035a:	f7ff ff37 	bl	80001cc <accSpiReadByte>
 800035e:	4603      	mov	r3, r0
 8000360:	713b      	strb	r3, [r7, #4]
	dataBuffer[5] = accSpiReadByte(0x2D); // zhigh
 8000362:	202d      	movs	r0, #45	; 0x2d
 8000364:	f7ff ff32 	bl	80001cc <accSpiReadByte>
 8000368:	4603      	mov	r3, r0
 800036a:	717b      	strb	r3, [r7, #5]

	// Convert data to acceleration values
	xval = ((int16_t)(dataBuffer[1]<<8) | (dataBuffer[0]))/16;
 800036c:	787b      	ldrb	r3, [r7, #1]
 800036e:	021b      	lsls	r3, r3, #8
 8000370:	b21b      	sxth	r3, r3
 8000372:	461a      	mov	r2, r3
 8000374:	783b      	ldrb	r3, [r7, #0]
 8000376:	4313      	orrs	r3, r2
 8000378:	2b00      	cmp	r3, #0
 800037a:	da00      	bge.n	800037e <main+0xee>
 800037c:	330f      	adds	r3, #15
 800037e:	111b      	asrs	r3, r3, #4
 8000380:	82fb      	strh	r3, [r7, #22]
	yval = ((int16_t)(dataBuffer[3]<<8) | (dataBuffer[2]))/16;
 8000382:	78fb      	ldrb	r3, [r7, #3]
 8000384:	021b      	lsls	r3, r3, #8
 8000386:	b21b      	sxth	r3, r3
 8000388:	461a      	mov	r2, r3
 800038a:	78bb      	ldrb	r3, [r7, #2]
 800038c:	4313      	orrs	r3, r2
 800038e:	2b00      	cmp	r3, #0
 8000390:	da00      	bge.n	8000394 <main+0x104>
 8000392:	330f      	adds	r3, #15
 8000394:	111b      	asrs	r3, r3, #4
 8000396:	82bb      	strh	r3, [r7, #20]
	zval = ((int16_t)(dataBuffer[5]<<8) | (dataBuffer[4]))/16;
 8000398:	797b      	ldrb	r3, [r7, #5]
 800039a:	021b      	lsls	r3, r3, #8
 800039c:	b21b      	sxth	r3, r3
 800039e:	461a      	mov	r2, r3
 80003a0:	793b      	ldrb	r3, [r7, #4]
 80003a2:	4313      	orrs	r3, r2
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	da00      	bge.n	80003aa <main+0x11a>
 80003a8:	330f      	adds	r3, #15
 80003aa:	111b      	asrs	r3, r3, #4
 80003ac:	827b      	strh	r3, [r7, #18]

	// Step counter
	accMag = xval*xval + yval*yval + zval*zval;
 80003ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80003b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80003b6:	fb03 f202 	mul.w	r2, r3, r2
 80003ba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80003be:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 80003c2:	fb01 f303 	mul.w	r3, r1, r3
 80003c6:	441a      	add	r2, r3
 80003c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80003cc:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80003d0:	fb01 f303 	mul.w	r3, r1, r3
 80003d4:	4413      	add	r3, r2
 80003d6:	60fb      	str	r3, [r7, #12]
	if (!stepFlag)
 80003d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d10b      	bne.n	80003f6 <main+0x166>
	{
		if (accMag > stepThresh)
 80003de:	68fa      	ldr	r2, [r7, #12]
 80003e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003e2:	429a      	cmp	r2, r3
 80003e4:	d915      	bls.n	8000412 <main+0x182>
		{
			// Step registered
			stepFlag = 1;
 80003e6:	2301      	movs	r3, #1
 80003e8:	63bb      	str	r3, [r7, #56]	; 0x38
			resetTimer = 0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	63fb      	str	r3, [r7, #60]	; 0x3c
			stepCount++;
 80003ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80003f0:	3301      	adds	r3, #1
 80003f2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80003f4:	e00d      	b.n	8000412 <main+0x182>
		}
	}
	else
	{
		resetTimer += accSampleDelay;
 80003f6:	69fb      	ldr	r3, [r7, #28]
 80003f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80003fa:	4413      	add	r3, r2
 80003fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (resetTimer >= resetDelay && accMag < resetThresh)
 80003fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000400:	6a3b      	ldr	r3, [r7, #32]
 8000402:	429a      	cmp	r2, r3
 8000404:	d305      	bcc.n	8000412 <main+0x182>
 8000406:	68fa      	ldr	r2, [r7, #12]
 8000408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800040a:	429a      	cmp	r2, r3
 800040c:	d201      	bcs.n	8000412 <main+0x182>
		{
			// End of step
			stepFlag = 0;
 800040e:	2300      	movs	r3, #0
 8000410:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}

	// Transmit data every 2 Hz
	if (transmitTimer >= transmitDelay)
 8000412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000414:	69bb      	ldr	r3, [r7, #24]
 8000416:	429a      	cmp	r2, r3
 8000418:	db82      	blt.n	8000320 <main+0x90>
	{
		transmitTimer -= transmitDelay;
 800041a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800041c:	69bb      	ldr	r3, [r7, #24]
 800041e:	1ad3      	subs	r3, r2, r3
 8000420:	633b      	str	r3, [r7, #48]	; 0x30

		// Move current steps into data buffer
		dataBuffer[6] = stepCount & 0xFF; // Lower 8 bits of step count (steplow)
 8000422:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000424:	b2db      	uxtb	r3, r3
 8000426:	71bb      	strb	r3, [r7, #6]
		dataBuffer[7] = stepCount >> 8; // Upper 8 bits of step count (stephigh)
 8000428:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800042a:	0a1b      	lsrs	r3, r3, #8
 800042c:	b29b      	uxth	r3, r3
 800042e:	b2db      	uxtb	r3, r3
 8000430:	71fb      	strb	r3, [r7, #7]

		// Transmit data
		checkStatus = spiReadByte(REG_STATUS); // Expect x0E
 8000432:	2007      	movs	r0, #7
 8000434:	f000 f928 	bl	8000688 <spiReadByte>
 8000438:	4603      	mov	r3, r0
 800043a:	72fb      	strb	r3, [r7, #11]
		checkFIFO_Status = spiReadByte(REG_FIFO_STATUS); // x11 expected
 800043c:	2017      	movs	r0, #23
 800043e:	f000 f923 	bl	8000688 <spiReadByte>
 8000442:	4603      	mov	r3, r0
 8000444:	72bb      	strb	r3, [r7, #10]
		transmitBytes(dataBuffer, 8);
 8000446:	463b      	mov	r3, r7
 8000448:	2108      	movs	r1, #8
 800044a:	4618      	mov	r0, r3
 800044c:	f000 f9ec 	bl	8000828 <transmitBytes>
		checkStatus = spiReadByte(REG_STATUS); // Expect x2E
 8000450:	2007      	movs	r0, #7
 8000452:	f000 f919 	bl	8000688 <spiReadByte>
 8000456:	4603      	mov	r3, r0
 8000458:	72fb      	strb	r3, [r7, #11]
		spiWriteByte(REG_STATUS, 0x2E); // CLEARing datasend flag!
 800045a:	212e      	movs	r1, #46	; 0x2e
 800045c:	2007      	movs	r0, #7
 800045e:	f000 f93f 	bl	80006e0 <spiWriteByte>
		checkStatus = spiReadByte(REG_STATUS); // Expect x0E
 8000462:	2007      	movs	r0, #7
 8000464:	f000 f910 	bl	8000688 <spiReadByte>
 8000468:	4603      	mov	r3, r0
 800046a:	72fb      	strb	r3, [r7, #11]
		checkFIFO_Status = spiReadByte(REG_FIFO_STATUS);// x01 expected
 800046c:	2017      	movs	r0, #23
 800046e:	f000 f90b 	bl	8000688 <spiReadByte>
 8000472:	4603      	mov	r3, r0
 8000474:	72bb      	strb	r3, [r7, #10]
		flushTXFIFO();
 8000476:	f000 fa01 	bl	800087c <flushTXFIFO>
	HAL_Delay(accSampleDelay);
 800047a:	e751      	b.n	8000320 <main+0x90>
 800047c:	0017d784 	.word	0x0017d784
 8000480:	00127690 	.word	0x00127690

08000484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b096      	sub	sp, #88	; 0x58
 8000488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048a:	f107 0314 	add.w	r3, r7, #20
 800048e:	2244      	movs	r2, #68	; 0x44
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f002 fa26 	bl	80028e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000498:	463b      	mov	r3, r7
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]
 80004a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004aa:	f000 fe19 	bl	80010e0 <HAL_PWREx_ControlVoltageScaling>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80004b4:	f000 fa02 	bl	80008bc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004b8:	2310      	movs	r3, #16
 80004ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004bc:	2301      	movs	r3, #1
 80004be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80004c4:	2360      	movs	r3, #96	; 0x60
 80004c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004c8:	2300      	movs	r3, #0
 80004ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004cc:	f107 0314 	add.w	r3, r7, #20
 80004d0:	4618      	mov	r0, r3
 80004d2:	f000 fe5b 	bl	800118c <HAL_RCC_OscConfig>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80004dc:	f000 f9ee 	bl	80008bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e0:	230f      	movs	r3, #15
 80004e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80004e4:	2300      	movs	r3, #0
 80004e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004e8:	2300      	movs	r3, #0
 80004ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ec:	2300      	movs	r3, #0
 80004ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004f0:	2300      	movs	r3, #0
 80004f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004f4:	463b      	mov	r3, r7
 80004f6:	2100      	movs	r1, #0
 80004f8:	4618      	mov	r0, r3
 80004fa:	f001 fa5b 	bl	80019b4 <HAL_RCC_ClockConfig>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000504:	f000 f9da 	bl	80008bc <Error_Handler>
  }
}
 8000508:	bf00      	nop
 800050a:	3758      	adds	r7, #88	; 0x58
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000514:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <MX_SPI1_Init+0x74>)
 8000516:	4a1c      	ldr	r2, [pc, #112]	; (8000588 <MX_SPI1_Init+0x78>)
 8000518:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800051a:	4b1a      	ldr	r3, [pc, #104]	; (8000584 <MX_SPI1_Init+0x74>)
 800051c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000520:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000522:	4b18      	ldr	r3, [pc, #96]	; (8000584 <MX_SPI1_Init+0x74>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000528:	4b16      	ldr	r3, [pc, #88]	; (8000584 <MX_SPI1_Init+0x74>)
 800052a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800052e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000530:	4b14      	ldr	r3, [pc, #80]	; (8000584 <MX_SPI1_Init+0x74>)
 8000532:	2200      	movs	r2, #0
 8000534:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000536:	4b13      	ldr	r3, [pc, #76]	; (8000584 <MX_SPI1_Init+0x74>)
 8000538:	2200      	movs	r2, #0
 800053a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800053c:	4b11      	ldr	r3, [pc, #68]	; (8000584 <MX_SPI1_Init+0x74>)
 800053e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000542:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <MX_SPI1_Init+0x74>)
 8000546:	2220      	movs	r2, #32
 8000548:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <MX_SPI1_Init+0x74>)
 800054c:	2200      	movs	r2, #0
 800054e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <MX_SPI1_Init+0x74>)
 8000552:	2200      	movs	r2, #0
 8000554:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000556:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <MX_SPI1_Init+0x74>)
 8000558:	2200      	movs	r2, #0
 800055a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800055c:	4b09      	ldr	r3, [pc, #36]	; (8000584 <MX_SPI1_Init+0x74>)
 800055e:	2207      	movs	r2, #7
 8000560:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <MX_SPI1_Init+0x74>)
 8000564:	2200      	movs	r2, #0
 8000566:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <MX_SPI1_Init+0x74>)
 800056a:	2208      	movs	r2, #8
 800056c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800056e:	4805      	ldr	r0, [pc, #20]	; (8000584 <MX_SPI1_Init+0x74>)
 8000570:	f001 fc0c 	bl	8001d8c <HAL_SPI_Init>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800057a:	f000 f99f 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	2000002c 	.word	0x2000002c
 8000588:	40013000 	.word	0x40013000

0800058c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000590:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <MX_SPI3_Init+0x74>)
 8000592:	4a1c      	ldr	r2, [pc, #112]	; (8000604 <MX_SPI3_Init+0x78>)
 8000594:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000596:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <MX_SPI3_Init+0x74>)
 8000598:	f44f 7282 	mov.w	r2, #260	; 0x104
 800059c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800059e:	4b18      	ldr	r3, [pc, #96]	; (8000600 <MX_SPI3_Init+0x74>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80005a4:	4b16      	ldr	r3, [pc, #88]	; (8000600 <MX_SPI3_Init+0x74>)
 80005a6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80005aa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80005ac:	4b14      	ldr	r3, [pc, #80]	; (8000600 <MX_SPI3_Init+0x74>)
 80005ae:	2202      	movs	r2, #2
 80005b0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <MX_SPI3_Init+0x74>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80005b8:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_SPI3_Init+0x74>)
 80005ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005be:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <MX_SPI3_Init+0x74>)
 80005c2:	2218      	movs	r2, #24
 80005c4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_SPI3_Init+0x74>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_SPI3_Init+0x74>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <MX_SPI3_Init+0x74>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_SPI3_Init+0x74>)
 80005da:	2207      	movs	r2, #7
 80005dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <MX_SPI3_Init+0x74>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_SPI3_Init+0x74>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_SPI3_Init+0x74>)
 80005ec:	f001 fbce 	bl	8001d8c <HAL_SPI_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80005f6:	f000 f961 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000090 	.word	0x20000090
 8000604:	40003c00 	.word	0x40003c00

08000608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	4b19      	ldr	r3, [pc, #100]	; (8000684 <MX_GPIO_Init+0x7c>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	4a18      	ldr	r2, [pc, #96]	; (8000684 <MX_GPIO_Init+0x7c>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <MX_GPIO_Init+0x7c>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_GPIO_Init+0x7c>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	4a12      	ldr	r2, [pc, #72]	; (8000684 <MX_GPIO_Init+0x7c>)
 800063c:	f043 0302 	orr.w	r3, r3, #2
 8000640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <MX_GPIO_Init+0x7c>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	f003 0302 	and.w	r3, r3, #2
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_Pin|CSN_Pin|ACC_CSN_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f248 0114 	movw	r1, #32788	; 0x8014
 8000654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000658:	f000 fd1c 	bl	8001094 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CE_Pin CSN_Pin ACC_CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin|ACC_CSN_Pin;
 800065c:	f248 0314 	movw	r3, #32788	; 0x8014
 8000660:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000662:	2301      	movs	r3, #1
 8000664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	4619      	mov	r1, r3
 8000674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000678:	f000 fba2 	bl	8000dc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800067c:	bf00      	nop
 800067e:	3720      	adds	r7, #32
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40021000 	.word	0x40021000

08000688 <spiReadByte>:

/* USER CODE BEGIN 4 */
uint8_t spitxbuffer[8];
uint8_t spirxbuffer[8];
uint8_t spiReadByte(uint8_t address)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af02      	add	r7, sp, #8
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
	spitxbuffer[0] = address;
 8000692:	4a10      	ldr	r2, [pc, #64]	; (80006d4 <spiReadByte+0x4c>)
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	7013      	strb	r3, [r2, #0]
	spitxbuffer[1] = 0;
 8000698:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <spiReadByte+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_RESET); // put CSN = 0
 800069e:	2200      	movs	r2, #0
 80006a0:	2110      	movs	r1, #16
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a6:	f000 fcf5 	bl	8001094 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, spitxbuffer, spirxbuffer, 2*sizeof(uint8_t), HAL_MAX_DELAY);
 80006aa:	f04f 33ff 	mov.w	r3, #4294967295
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	2302      	movs	r3, #2
 80006b2:	4a09      	ldr	r2, [pc, #36]	; (80006d8 <spiReadByte+0x50>)
 80006b4:	4907      	ldr	r1, [pc, #28]	; (80006d4 <spiReadByte+0x4c>)
 80006b6:	4809      	ldr	r0, [pc, #36]	; (80006dc <spiReadByte+0x54>)
 80006b8:	f001 fd79 	bl	80021ae <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_SET); // put CSN = 0
 80006bc:	2201      	movs	r2, #1
 80006be:	2110      	movs	r1, #16
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c4:	f000 fce6 	bl	8001094 <HAL_GPIO_WritePin>
	return spirxbuffer[1];
 80006c8:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <spiReadByte+0x50>)
 80006ca:	785b      	ldrb	r3, [r3, #1]

}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000104 	.word	0x20000104
 80006d8:	2000010c 	.word	0x2000010c
 80006dc:	2000002c 	.word	0x2000002c

080006e0 <spiWriteByte>:

void spiWriteByte(uint8_t address, uint8_t value)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af02      	add	r7, sp, #8
 80006e6:	4603      	mov	r3, r0
 80006e8:	460a      	mov	r2, r1
 80006ea:	71fb      	strb	r3, [r7, #7]
 80006ec:	4613      	mov	r3, r2
 80006ee:	71bb      	strb	r3, [r7, #6]
	spitxbuffer[0] = address | 1<<5; // need to set 3 msb to 1 for writes
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	f043 0320 	orr.w	r3, r3, #32
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <spiWriteByte+0x54>)
 80006fa:	701a      	strb	r2, [r3, #0]
	spitxbuffer[1] = value;
 80006fc:	4a0d      	ldr	r2, [pc, #52]	; (8000734 <spiWriteByte+0x54>)
 80006fe:	79bb      	ldrb	r3, [r7, #6]
 8000700:	7053      	strb	r3, [r2, #1]

	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_RESET); // put CSN = 0
 8000702:	2200      	movs	r2, #0
 8000704:	2110      	movs	r1, #16
 8000706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070a:	f000 fcc3 	bl	8001094 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, spitxbuffer, spirxbuffer, 2, HAL_MAX_DELAY);
 800070e:	f04f 33ff 	mov.w	r3, #4294967295
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	2302      	movs	r3, #2
 8000716:	4a08      	ldr	r2, [pc, #32]	; (8000738 <spiWriteByte+0x58>)
 8000718:	4906      	ldr	r1, [pc, #24]	; (8000734 <spiWriteByte+0x54>)
 800071a:	4808      	ldr	r0, [pc, #32]	; (800073c <spiWriteByte+0x5c>)
 800071c:	f001 fd47 	bl	80021ae <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_SET); // put CSN = 0
 8000720:	2201      	movs	r2, #1
 8000722:	2110      	movs	r1, #16
 8000724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000728:	f000 fcb4 	bl	8001094 <HAL_GPIO_WritePin>


}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000104 	.word	0x20000104
 8000738:	2000010c 	.word	0x2000010c
 800073c:	2000002c 	.word	0x2000002c

08000740 <spiWriteNByte>:

void spiWriteNByte(uint8_t address, const uint8_t *buf, uint8_t len)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	6039      	str	r1, [r7, #0]
 800074a:	71fb      	strb	r3, [r7, #7]
 800074c:	4613      	mov	r3, r2
 800074e:	71bb      	strb	r3, [r7, #6]
	spitxbuffer[0] = address | 1 <<5;
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	f043 0320 	orr.w	r3, r3, #32
 8000756:	b2da      	uxtb	r2, r3
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <spiWriteNByte+0x60>)
 800075a:	701a      	strb	r2, [r3, #0]
	spitxbuffer[1] = 0;
 800075c:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <spiWriteNByte+0x60>)
 800075e:	2200      	movs	r2, #0
 8000760:	705a      	strb	r2, [r3, #1]
	//Put CSN low
	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_RESET); // put CSN = 0
 8000762:	2200      	movs	r2, #0
 8000764:	2110      	movs	r1, #16
 8000766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076a:	f000 fc93 	bl	8001094 <HAL_GPIO_WritePin>
	//Transmit register address
	HAL_SPI_Transmit(&hspi1, spitxbuffer, 1, HAL_MAX_DELAY);	//Receive data
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
 8000772:	2201      	movs	r2, #1
 8000774:	490a      	ldr	r1, [pc, #40]	; (80007a0 <spiWriteNByte+0x60>)
 8000776:	480b      	ldr	r0, [pc, #44]	; (80007a4 <spiWriteNByte+0x64>)
 8000778:	f001 fbab 	bl	8001ed2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)buf, len, HAL_MAX_DELAY);
 800077c:	79bb      	ldrb	r3, [r7, #6]
 800077e:	b29a      	uxth	r2, r3
 8000780:	f04f 33ff 	mov.w	r3, #4294967295
 8000784:	6839      	ldr	r1, [r7, #0]
 8000786:	4807      	ldr	r0, [pc, #28]	; (80007a4 <spiWriteNByte+0x64>)
 8000788:	f001 fba3 	bl	8001ed2 <HAL_SPI_Transmit>
	//Bring CSN high
	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_SET); // put CSN = 1
 800078c:	2201      	movs	r2, #1
 800078e:	2110      	movs	r1, #16
 8000790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000794:	f000 fc7e 	bl	8001094 <HAL_GPIO_WritePin>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000104 	.word	0x20000104
 80007a4:	2000002c 	.word	0x2000002c

080007a8 <setupTXsimple>:

void setupTXsimple(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
	spiWriteByte(REG_SETUP_RETR, 0x00); // no retransmission / acknowledgment
 80007ae:	2100      	movs	r1, #0
 80007b0:	2004      	movs	r0, #4
 80007b2:	f7ff ff95 	bl	80006e0 <spiWriteByte>
	spiWriteByte(REG_EN_AA, 0x00); //no auto acknowledge
 80007b6:	2100      	movs	r1, #0
 80007b8:	2001      	movs	r0, #1
 80007ba:	f7ff ff91 	bl	80006e0 <spiWriteByte>
	spiWriteByte(REG_SETUP_AW, 0x02); // makes address width 4 bytes
 80007be:	2102      	movs	r1, #2
 80007c0:	2003      	movs	r0, #3
 80007c2:	f7ff ff8d 	bl	80006e0 <spiWriteByte>
	spiWriteByte(REG_RF_CH, 0x02);// make frequency 2.402 Ghz
 80007c6:	2102      	movs	r1, #2
 80007c8:	2005      	movs	r0, #5
 80007ca:	f7ff ff89 	bl	80006e0 <spiWriteByte>
	spiWriteByte(REG_RF_SETUP, 0x26); // lowest data rate + highest output pwr
 80007ce:	2126      	movs	r1, #38	; 0x26
 80007d0:	2006      	movs	r0, #6
 80007d2:	f7ff ff85 	bl	80006e0 <spiWriteByte>

	// What is our TX_ADDRESS
	uint8_t TxAddr[4] = {0x00, 0x11, 0x22, 0x33};
 80007d6:	4b13      	ldr	r3, [pc, #76]	; (8000824 <setupTXsimple+0x7c>)
 80007d8:	607b      	str	r3, [r7, #4]
	spiWriteNByte(REG_TX_ADDR, TxAddr, 4);
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2204      	movs	r2, #4
 80007de:	4619      	mov	r1, r3
 80007e0:	2010      	movs	r0, #16
 80007e2:	f7ff ffad 	bl	8000740 <spiWriteNByte>
	// RX address is the same as TX address
	spiWriteNByte(REG_RX_ADDR_P0, TxAddr, 4);
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	2204      	movs	r2, #4
 80007ea:	4619      	mov	r1, r3
 80007ec:	200a      	movs	r0, #10
 80007ee:	f7ff ffa7 	bl	8000740 <spiWriteNByte>

	// Receive Pipes not used
	spiWriteByte(REG_EN_RXADDR, 0x01); // Only enable pipe 0 [bit 0 = 1]
 80007f2:	2101      	movs	r1, #1
 80007f4:	2002      	movs	r0, #2
 80007f6:	f7ff ff73 	bl	80006e0 <spiWriteByte>
	spiWriteByte(REG_RX_PW_P0, 0x01); // 1 byte payload length on pipe 0
 80007fa:	2101      	movs	r1, #1
 80007fc:	2011      	movs	r0, #17
 80007fe:	f7ff ff6f 	bl	80006e0 <spiWriteByte>

	// no shockburst stuff
	spiWriteByte(REG_DYNPD, 0x00);
 8000802:	2100      	movs	r1, #0
 8000804:	201c      	movs	r0, #28
 8000806:	f7ff ff6b 	bl	80006e0 <spiWriteByte>
	spiWriteByte(REG_FEATURE, 0x00);
 800080a:	2100      	movs	r1, #0
 800080c:	201d      	movs	r0, #29
 800080e:	f7ff ff67 	bl	80006e0 <spiWriteByte>

	// TX mode
	// Enable error correction, power up, PRIM_RX = 0 [PTX]
	spiWriteByte(REG_CONFIG, 0x0A);
 8000812:	210a      	movs	r1, #10
 8000814:	2000      	movs	r0, #0
 8000816:	f7ff ff63 	bl	80006e0 <spiWriteByte>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	33221100 	.word	0x33221100

08000828 <transmitBytes>:
	HAL_SPI_Transmit(&hspi1, txData, 2, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_SET); // put CSN = 1
}

void transmitBytes(uint8_t* txdata, uint8_t len)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	460b      	mov	r3, r1
 8000832:	70fb      	strb	r3, [r7, #3]
	uint8_t txPayload = 0xB0;
 8000834:	23b0      	movs	r3, #176	; 0xb0
 8000836:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	2110      	movs	r1, #16
 800083c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000840:	f000 fc28 	bl	8001094 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &txPayload, 1, HAL_MAX_DELAY);
 8000844:	f107 010f 	add.w	r1, r7, #15
 8000848:	f04f 33ff 	mov.w	r3, #4294967295
 800084c:	2201      	movs	r2, #1
 800084e:	480a      	ldr	r0, [pc, #40]	; (8000878 <transmitBytes+0x50>)
 8000850:	f001 fb3f 	bl	8001ed2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, txdata, len, HAL_MAX_DELAY);
 8000854:	78fb      	ldrb	r3, [r7, #3]
 8000856:	b29a      	uxth	r2, r3
 8000858:	f04f 33ff 	mov.w	r3, #4294967295
 800085c:	6879      	ldr	r1, [r7, #4]
 800085e:	4806      	ldr	r0, [pc, #24]	; (8000878 <transmitBytes+0x50>)
 8000860:	f001 fb37 	bl	8001ed2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	2110      	movs	r1, #16
 8000868:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086c:	f000 fc12 	bl	8001094 <HAL_GPIO_WritePin>
}
 8000870:	bf00      	nop
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	2000002c 	.word	0x2000002c

0800087c <flushTXFIFO>:
	HAL_SPI_TransmitReceive(&hspi1, txzeros, rxdata, len, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_SET); // put CSN = 1
}

void flushTXFIFO(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
	uint8_t txData[2];
	txData[0] = 0xE1; // using the FLUSH_TX cmd
 8000882:	23e1      	movs	r3, #225	; 0xe1
 8000884:	713b      	strb	r3, [r7, #4]
	txData[1] = 0x00;
 8000886:	2300      	movs	r3, #0
 8000888:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_RESET); // put CSN = 0
 800088a:	2200      	movs	r2, #0
 800088c:	2110      	movs	r1, #16
 800088e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000892:	f000 fbff 	bl	8001094 <HAL_GPIO_WritePin>
	// Send W_TX_Command
	HAL_SPI_Transmit(&hspi1, txData, 1, HAL_MAX_DELAY);
 8000896:	1d39      	adds	r1, r7, #4
 8000898:	f04f 33ff 	mov.w	r3, #4294967295
 800089c:	2201      	movs	r2, #1
 800089e:	4806      	ldr	r0, [pc, #24]	; (80008b8 <flushTXFIFO+0x3c>)
 80008a0:	f001 fb17 	bl	8001ed2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_SET); // put CSN = 1
 80008a4:	2201      	movs	r2, #1
 80008a6:	2110      	movs	r1, #16
 80008a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ac:	f000 fbf2 	bl	8001094 <HAL_GPIO_WritePin>
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	2000002c 	.word	0x2000002c

080008bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c0:	b672      	cpsid	i
}
 80008c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <Error_Handler+0x8>
	...

080008c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <HAL_MspInit+0x44>)
 80008d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d2:	4a0e      	ldr	r2, [pc, #56]	; (800090c <HAL_MspInit+0x44>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6613      	str	r3, [r2, #96]	; 0x60
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <HAL_MspInit+0x44>)
 80008dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <HAL_MspInit+0x44>)
 80008e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ea:	4a08      	ldr	r2, [pc, #32]	; (800090c <HAL_MspInit+0x44>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f0:	6593      	str	r3, [r2, #88]	; 0x58
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_MspInit+0x44>)
 80008f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	40021000 	.word	0x40021000

08000910 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08c      	sub	sp, #48	; 0x30
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a2e      	ldr	r2, [pc, #184]	; (80009e8 <HAL_SPI_MspInit+0xd8>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d129      	bne.n	8000986 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000932:	4b2e      	ldr	r3, [pc, #184]	; (80009ec <HAL_SPI_MspInit+0xdc>)
 8000934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000936:	4a2d      	ldr	r2, [pc, #180]	; (80009ec <HAL_SPI_MspInit+0xdc>)
 8000938:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800093c:	6613      	str	r3, [r2, #96]	; 0x60
 800093e:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <HAL_SPI_MspInit+0xdc>)
 8000940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000942:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000946:	61bb      	str	r3, [r7, #24]
 8000948:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b28      	ldr	r3, [pc, #160]	; (80009ec <HAL_SPI_MspInit+0xdc>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	4a27      	ldr	r2, [pc, #156]	; (80009ec <HAL_SPI_MspInit+0xdc>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <HAL_SPI_MspInit+0xdc>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000962:	23e0      	movs	r3, #224	; 0xe0
 8000964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096e:	2303      	movs	r3, #3
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000972:	2305      	movs	r3, #5
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000980:	f000 fa1e 	bl	8000dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000984:	e02c      	b.n	80009e0 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI3)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a19      	ldr	r2, [pc, #100]	; (80009f0 <HAL_SPI_MspInit+0xe0>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d127      	bne.n	80009e0 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <HAL_SPI_MspInit+0xdc>)
 8000992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000994:	4a15      	ldr	r2, [pc, #84]	; (80009ec <HAL_SPI_MspInit+0xdc>)
 8000996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800099a:	6593      	str	r3, [r2, #88]	; 0x58
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <HAL_SPI_MspInit+0xdc>)
 800099e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a8:	4b10      	ldr	r3, [pc, #64]	; (80009ec <HAL_SPI_MspInit+0xdc>)
 80009aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ac:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <HAL_SPI_MspInit+0xdc>)
 80009ae:	f043 0302 	orr.w	r3, r3, #2
 80009b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b4:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <HAL_SPI_MspInit+0xdc>)
 80009b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b8:	f003 0302 	and.w	r3, r3, #2
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80009c0:	2338      	movs	r3, #56	; 0x38
 80009c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009cc:	2303      	movs	r3, #3
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009d0:	2306      	movs	r3, #6
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	4806      	ldr	r0, [pc, #24]	; (80009f4 <HAL_SPI_MspInit+0xe4>)
 80009dc:	f000 f9f0 	bl	8000dc0 <HAL_GPIO_Init>
}
 80009e0:	bf00      	nop
 80009e2:	3730      	adds	r7, #48	; 0x30
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40013000 	.word	0x40013000
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40003c00 	.word	0x40003c00
 80009f4:	48000400 	.word	0x48000400

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <NMI_Handler+0x4>

080009fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <HardFault_Handler+0x4>

08000a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <MemManage_Handler+0x4>

08000a0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <BusFault_Handler+0x4>

08000a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <UsageFault_Handler+0x4>

08000a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a44:	f000 f892 	bl	8000b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <SystemInit+0x20>)
 8000a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a56:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <SystemInit+0x20>)
 8000a58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a74:	f7ff ffea 	bl	8000a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a78:	480c      	ldr	r0, [pc, #48]	; (8000aac <LoopForever+0x6>)
  ldr r1, =_edata
 8000a7a:	490d      	ldr	r1, [pc, #52]	; (8000ab0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	; (8000ab4 <LoopForever+0xe>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a80:	e002      	b.n	8000a88 <LoopCopyDataInit>

08000a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a86:	3304      	adds	r3, #4

08000a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a8c:	d3f9      	bcc.n	8000a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a90:	4c0a      	ldr	r4, [pc, #40]	; (8000abc <LoopForever+0x16>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a94:	e001      	b.n	8000a9a <LoopFillZerobss>

08000a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a98:	3204      	adds	r2, #4

08000a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a9c:	d3fb      	bcc.n	8000a96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a9e:	f001 fefd 	bl	800289c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aa2:	f7ff fbf5 	bl	8000290 <main>

08000aa6 <LoopForever>:

LoopForever:
    b LoopForever
 8000aa6:	e7fe      	b.n	8000aa6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000aa8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ab4:	08002954 	.word	0x08002954
  ldr r2, =_sbss
 8000ab8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000abc:	20000118 	.word	0x20000118

08000ac0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ac0:	e7fe      	b.n	8000ac0 <ADC1_IRQHandler>

08000ac2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000acc:	2003      	movs	r0, #3
 8000ace:	f000 f943 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ad2:	200f      	movs	r0, #15
 8000ad4:	f000 f80e 	bl	8000af4 <HAL_InitTick>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d002      	beq.n	8000ae4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	71fb      	strb	r3, [r7, #7]
 8000ae2:	e001      	b.n	8000ae8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ae4:	f7ff fef0 	bl	80008c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000afc:	2300      	movs	r3, #0
 8000afe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b00:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <HAL_InitTick+0x6c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d023      	beq.n	8000b50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <HAL_InitTick+0x70>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <HAL_InitTick+0x6c>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4619      	mov	r1, r3
 8000b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 f941 	bl	8000da6 <HAL_SYSTICK_Config>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d10f      	bne.n	8000b4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d809      	bhi.n	8000b44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b30:	2200      	movs	r2, #0
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	f000 f919 	bl	8000d6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b3c:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <HAL_InitTick+0x74>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6013      	str	r3, [r2, #0]
 8000b42:	e007      	b.n	8000b54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	73fb      	strb	r3, [r7, #15]
 8000b48:	e004      	b.n	8000b54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	73fb      	strb	r3, [r7, #15]
 8000b4e:	e001      	b.n	8000b54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	2000000c 	.word	0x2000000c
 8000b64:	20000004 	.word	0x20000004
 8000b68:	20000008 	.word	0x20000008

08000b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_IncTick+0x20>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_IncTick+0x24>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <HAL_IncTick+0x24>)
 8000b7e:	6013      	str	r3, [r2, #0]
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	2000000c 	.word	0x2000000c
 8000b90:	20000114 	.word	0x20000114

08000b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return uwTick;
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <HAL_GetTick+0x14>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20000114 	.word	0x20000114

08000bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb4:	f7ff ffee 	bl	8000b94 <HAL_GetTick>
 8000bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc4:	d005      	beq.n	8000bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <HAL_Delay+0x44>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4413      	add	r3, r2
 8000bd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bd2:	bf00      	nop
 8000bd4:	f7ff ffde 	bl	8000b94 <HAL_GetTick>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d8f7      	bhi.n	8000bd4 <HAL_Delay+0x28>
  {
  }
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	2000000c 	.word	0x2000000c

08000bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c10:	4013      	ands	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c26:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	60d3      	str	r3, [r2, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <__NVIC_GetPriorityGrouping+0x18>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	f003 0307 	and.w	r3, r3, #7
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	; (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	; (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
         );
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	; 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d24:	d301      	bcc.n	8000d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00f      	b.n	8000d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <SysTick_Config+0x40>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d32:	210f      	movs	r1, #15
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f7ff ff8e 	bl	8000c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <SysTick_Config+0x40>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <SysTick_Config+0x40>)
 8000d44:	2207      	movs	r2, #7
 8000d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	e000e010 	.word	0xe000e010

08000d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ff47 	bl	8000bf4 <__NVIC_SetPriorityGrouping>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d80:	f7ff ff5c 	bl	8000c3c <__NVIC_GetPriorityGrouping>
 8000d84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	6978      	ldr	r0, [r7, #20]
 8000d8c:	f7ff ff8e 	bl	8000cac <NVIC_EncodePriority>
 8000d90:	4602      	mov	r2, r0
 8000d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff5d 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff ffb0 	bl	8000d14 <SysTick_Config>
 8000db4:	4603      	mov	r3, r0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dce:	e148      	b.n	8001062 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f000 813a 	beq.w	800105c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 0303 	and.w	r3, r3, #3
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d005      	beq.n	8000e00 <HAL_GPIO_Init+0x40>
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d130      	bne.n	8000e62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	68da      	ldr	r2, [r3, #12]
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e36:	2201      	movs	r2, #1
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	091b      	lsrs	r3, r3, #4
 8000e4c:	f003 0201 	and.w	r2, r3, #1
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 0303 	and.w	r3, r3, #3
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d017      	beq.n	8000e9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	2203      	movs	r2, #3
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	689a      	ldr	r2, [r3, #8]
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d123      	bne.n	8000ef2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	08da      	lsrs	r2, r3, #3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3208      	adds	r2, #8
 8000eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	220f      	movs	r2, #15
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	691a      	ldr	r2, [r3, #16]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	f003 0307 	and.w	r3, r3, #7
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	08da      	lsrs	r2, r3, #3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3208      	adds	r2, #8
 8000eec:	6939      	ldr	r1, [r7, #16]
 8000eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	2203      	movs	r2, #3
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 0203 	and.w	r2, r3, #3
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f000 8094 	beq.w	800105c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f34:	4b52      	ldr	r3, [pc, #328]	; (8001080 <HAL_GPIO_Init+0x2c0>)
 8000f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f38:	4a51      	ldr	r2, [pc, #324]	; (8001080 <HAL_GPIO_Init+0x2c0>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	6613      	str	r3, [r2, #96]	; 0x60
 8000f40:	4b4f      	ldr	r3, [pc, #316]	; (8001080 <HAL_GPIO_Init+0x2c0>)
 8000f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f4c:	4a4d      	ldr	r2, [pc, #308]	; (8001084 <HAL_GPIO_Init+0x2c4>)
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	089b      	lsrs	r3, r3, #2
 8000f52:	3302      	adds	r3, #2
 8000f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	220f      	movs	r2, #15
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f76:	d00d      	beq.n	8000f94 <HAL_GPIO_Init+0x1d4>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a43      	ldr	r2, [pc, #268]	; (8001088 <HAL_GPIO_Init+0x2c8>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d007      	beq.n	8000f90 <HAL_GPIO_Init+0x1d0>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a42      	ldr	r2, [pc, #264]	; (800108c <HAL_GPIO_Init+0x2cc>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d101      	bne.n	8000f8c <HAL_GPIO_Init+0x1cc>
 8000f88:	2302      	movs	r3, #2
 8000f8a:	e004      	b.n	8000f96 <HAL_GPIO_Init+0x1d6>
 8000f8c:	2307      	movs	r3, #7
 8000f8e:	e002      	b.n	8000f96 <HAL_GPIO_Init+0x1d6>
 8000f90:	2301      	movs	r3, #1
 8000f92:	e000      	b.n	8000f96 <HAL_GPIO_Init+0x1d6>
 8000f94:	2300      	movs	r3, #0
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	f002 0203 	and.w	r2, r2, #3
 8000f9c:	0092      	lsls	r2, r2, #2
 8000f9e:	4093      	lsls	r3, r2
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fa6:	4937      	ldr	r1, [pc, #220]	; (8001084 <HAL_GPIO_Init+0x2c4>)
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	089b      	lsrs	r3, r3, #2
 8000fac:	3302      	adds	r3, #2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fb4:	4b36      	ldr	r3, [pc, #216]	; (8001090 <HAL_GPIO_Init+0x2d0>)
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fd8:	4a2d      	ldr	r2, [pc, #180]	; (8001090 <HAL_GPIO_Init+0x2d0>)
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fde:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <HAL_GPIO_Init+0x2d0>)
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001002:	4a23      	ldr	r2, [pc, #140]	; (8001090 <HAL_GPIO_Init+0x2d0>)
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001008:	4b21      	ldr	r3, [pc, #132]	; (8001090 <HAL_GPIO_Init+0x2d0>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	43db      	mvns	r3, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800102c:	4a18      	ldr	r2, [pc, #96]	; (8001090 <HAL_GPIO_Init+0x2d0>)
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <HAL_GPIO_Init+0x2d0>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	43db      	mvns	r3, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4313      	orrs	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001056:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <HAL_GPIO_Init+0x2d0>)
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	3301      	adds	r3, #1
 8001060:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	fa22 f303 	lsr.w	r3, r2, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	f47f aeaf 	bne.w	8000dd0 <HAL_GPIO_Init+0x10>
  }
}
 8001072:	bf00      	nop
 8001074:	bf00      	nop
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	40021000 	.word	0x40021000
 8001084:	40010000 	.word	0x40010000
 8001088:	48000400 	.word	0x48000400
 800108c:	48000800 	.word	0x48000800
 8001090:	40010400 	.word	0x40010400

08001094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	807b      	strh	r3, [r7, #2]
 80010a0:	4613      	mov	r3, r2
 80010a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010a4:	787b      	ldrb	r3, [r7, #1]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010aa:	887a      	ldrh	r2, [r7, #2]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010b0:	e002      	b.n	80010b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010b2:	887a      	ldrh	r2, [r7, #2]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <HAL_PWREx_GetVoltageRange+0x18>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40007000 	.word	0x40007000

080010e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010ee:	d130      	bne.n	8001152 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010f0:	4b23      	ldr	r3, [pc, #140]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010fc:	d038      	beq.n	8001170 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010fe:	4b20      	ldr	r3, [pc, #128]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001106:	4a1e      	ldr	r2, [pc, #120]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001108:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800110c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800110e:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2232      	movs	r2, #50	; 0x32
 8001114:	fb02 f303 	mul.w	r3, r2, r3
 8001118:	4a1b      	ldr	r2, [pc, #108]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800111a:	fba2 2303 	umull	r2, r3, r2, r3
 800111e:	0c9b      	lsrs	r3, r3, #18
 8001120:	3301      	adds	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001124:	e002      	b.n	800112c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3b01      	subs	r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001138:	d102      	bne.n	8001140 <HAL_PWREx_ControlVoltageScaling+0x60>
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1f2      	bne.n	8001126 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800114c:	d110      	bne.n	8001170 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e00f      	b.n	8001172 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800115a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800115e:	d007      	beq.n	8001170 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001168:	4a05      	ldr	r2, [pc, #20]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800116a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800116e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40007000 	.word	0x40007000
 8001184:	20000004 	.word	0x20000004
 8001188:	431bde83 	.word	0x431bde83

0800118c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d102      	bne.n	80011a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	f000 bc02 	b.w	80019a4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011a0:	4b96      	ldr	r3, [pc, #600]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f003 030c 	and.w	r3, r3, #12
 80011a8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011aa:	4b94      	ldr	r3, [pc, #592]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0310 	and.w	r3, r3, #16
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 80e4 	beq.w	800138a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d007      	beq.n	80011d8 <HAL_RCC_OscConfig+0x4c>
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	2b0c      	cmp	r3, #12
 80011cc:	f040 808b 	bne.w	80012e6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	f040 8087 	bne.w	80012e6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011d8:	4b88      	ldr	r3, [pc, #544]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <HAL_RCC_OscConfig+0x64>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e3d9      	b.n	80019a4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a1a      	ldr	r2, [r3, #32]
 80011f4:	4b81      	ldr	r3, [pc, #516]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0308 	and.w	r3, r3, #8
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d004      	beq.n	800120a <HAL_RCC_OscConfig+0x7e>
 8001200:	4b7e      	ldr	r3, [pc, #504]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001208:	e005      	b.n	8001216 <HAL_RCC_OscConfig+0x8a>
 800120a:	4b7c      	ldr	r3, [pc, #496]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 800120c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001210:	091b      	lsrs	r3, r3, #4
 8001212:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001216:	4293      	cmp	r3, r2
 8001218:	d223      	bcs.n	8001262 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a1b      	ldr	r3, [r3, #32]
 800121e:	4618      	mov	r0, r3
 8001220:	f000 fd54 	bl	8001ccc <RCC_SetFlashLatencyFromMSIRange>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e3ba      	b.n	80019a4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800122e:	4b73      	ldr	r3, [pc, #460]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a72      	ldr	r2, [pc, #456]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 8001234:	f043 0308 	orr.w	r3, r3, #8
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	4b70      	ldr	r3, [pc, #448]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	496d      	ldr	r1, [pc, #436]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 8001248:	4313      	orrs	r3, r2
 800124a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800124c:	4b6b      	ldr	r3, [pc, #428]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69db      	ldr	r3, [r3, #28]
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	4968      	ldr	r1, [pc, #416]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 800125c:	4313      	orrs	r3, r2
 800125e:	604b      	str	r3, [r1, #4]
 8001260:	e025      	b.n	80012ae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001262:	4b66      	ldr	r3, [pc, #408]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a65      	ldr	r2, [pc, #404]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 8001268:	f043 0308 	orr.w	r3, r3, #8
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	4b63      	ldr	r3, [pc, #396]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	4960      	ldr	r1, [pc, #384]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 800127c:	4313      	orrs	r3, r2
 800127e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001280:	4b5e      	ldr	r3, [pc, #376]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	69db      	ldr	r3, [r3, #28]
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	495b      	ldr	r1, [pc, #364]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 8001290:	4313      	orrs	r3, r2
 8001292:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d109      	bne.n	80012ae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a1b      	ldr	r3, [r3, #32]
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 fd14 	bl	8001ccc <RCC_SetFlashLatencyFromMSIRange>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e37a      	b.n	80019a4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012ae:	f000 fc81 	bl	8001bb4 <HAL_RCC_GetSysClockFreq>
 80012b2:	4602      	mov	r2, r0
 80012b4:	4b51      	ldr	r3, [pc, #324]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	091b      	lsrs	r3, r3, #4
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	4950      	ldr	r1, [pc, #320]	; (8001400 <HAL_RCC_OscConfig+0x274>)
 80012c0:	5ccb      	ldrb	r3, [r1, r3]
 80012c2:	f003 031f 	and.w	r3, r3, #31
 80012c6:	fa22 f303 	lsr.w	r3, r2, r3
 80012ca:	4a4e      	ldr	r2, [pc, #312]	; (8001404 <HAL_RCC_OscConfig+0x278>)
 80012cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012ce:	4b4e      	ldr	r3, [pc, #312]	; (8001408 <HAL_RCC_OscConfig+0x27c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fc0e 	bl	8000af4 <HAL_InitTick>
 80012d8:	4603      	mov	r3, r0
 80012da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d052      	beq.n	8001388 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	e35e      	b.n	80019a4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d032      	beq.n	8001354 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012ee:	4b43      	ldr	r3, [pc, #268]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a42      	ldr	r2, [pc, #264]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012fa:	f7ff fc4b 	bl	8000b94 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001302:	f7ff fc47 	bl	8000b94 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e347      	b.n	80019a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001314:	4b39      	ldr	r3, [pc, #228]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0f0      	beq.n	8001302 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001320:	4b36      	ldr	r3, [pc, #216]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a35      	ldr	r2, [pc, #212]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 8001326:	f043 0308 	orr.w	r3, r3, #8
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b33      	ldr	r3, [pc, #204]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a1b      	ldr	r3, [r3, #32]
 8001338:	4930      	ldr	r1, [pc, #192]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 800133a:	4313      	orrs	r3, r2
 800133c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800133e:	4b2f      	ldr	r3, [pc, #188]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	021b      	lsls	r3, r3, #8
 800134c:	492b      	ldr	r1, [pc, #172]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 800134e:	4313      	orrs	r3, r2
 8001350:	604b      	str	r3, [r1, #4]
 8001352:	e01a      	b.n	800138a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001354:	4b29      	ldr	r3, [pc, #164]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a28      	ldr	r2, [pc, #160]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 800135a:	f023 0301 	bic.w	r3, r3, #1
 800135e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001360:	f7ff fc18 	bl	8000b94 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001368:	f7ff fc14 	bl	8000b94 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e314      	b.n	80019a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800137a:	4b20      	ldr	r3, [pc, #128]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f0      	bne.n	8001368 <HAL_RCC_OscConfig+0x1dc>
 8001386:	e000      	b.n	800138a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001388:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	2b00      	cmp	r3, #0
 8001394:	d073      	beq.n	800147e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	2b08      	cmp	r3, #8
 800139a:	d005      	beq.n	80013a8 <HAL_RCC_OscConfig+0x21c>
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	2b0c      	cmp	r3, #12
 80013a0:	d10e      	bne.n	80013c0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d10b      	bne.n	80013c0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a8:	4b14      	ldr	r3, [pc, #80]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d063      	beq.n	800147c <HAL_RCC_OscConfig+0x2f0>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d15f      	bne.n	800147c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e2f1      	b.n	80019a4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c8:	d106      	bne.n	80013d8 <HAL_RCC_OscConfig+0x24c>
 80013ca:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a0b      	ldr	r2, [pc, #44]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 80013d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	e025      	b.n	8001424 <HAL_RCC_OscConfig+0x298>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e0:	d114      	bne.n	800140c <HAL_RCC_OscConfig+0x280>
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 80013e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	4b03      	ldr	r3, [pc, #12]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a02      	ldr	r2, [pc, #8]	; (80013fc <HAL_RCC_OscConfig+0x270>)
 80013f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	e013      	b.n	8001424 <HAL_RCC_OscConfig+0x298>
 80013fc:	40021000 	.word	0x40021000
 8001400:	0800290c 	.word	0x0800290c
 8001404:	20000004 	.word	0x20000004
 8001408:	20000008 	.word	0x20000008
 800140c:	4ba0      	ldr	r3, [pc, #640]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a9f      	ldr	r2, [pc, #636]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 8001412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	4b9d      	ldr	r3, [pc, #628]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a9c      	ldr	r2, [pc, #624]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 800141e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d013      	beq.n	8001454 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142c:	f7ff fbb2 	bl	8000b94 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001434:	f7ff fbae 	bl	8000b94 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b64      	cmp	r3, #100	; 0x64
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e2ae      	b.n	80019a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001446:	4b92      	ldr	r3, [pc, #584]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0x2a8>
 8001452:	e014      	b.n	800147e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001454:	f7ff fb9e 	bl	8000b94 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800145c:	f7ff fb9a 	bl	8000b94 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b64      	cmp	r3, #100	; 0x64
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e29a      	b.n	80019a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800146e:	4b88      	ldr	r3, [pc, #544]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0x2d0>
 800147a:	e000      	b.n	800147e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d060      	beq.n	800154c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	2b04      	cmp	r3, #4
 800148e:	d005      	beq.n	800149c <HAL_RCC_OscConfig+0x310>
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	2b0c      	cmp	r3, #12
 8001494:	d119      	bne.n	80014ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	2b02      	cmp	r3, #2
 800149a:	d116      	bne.n	80014ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800149c:	4b7c      	ldr	r3, [pc, #496]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d005      	beq.n	80014b4 <HAL_RCC_OscConfig+0x328>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e277      	b.n	80019a4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b4:	4b76      	ldr	r3, [pc, #472]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	061b      	lsls	r3, r3, #24
 80014c2:	4973      	ldr	r1, [pc, #460]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014c8:	e040      	b.n	800154c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d023      	beq.n	800151a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014d2:	4b6f      	ldr	r3, [pc, #444]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a6e      	ldr	r2, [pc, #440]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 80014d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014de:	f7ff fb59 	bl	8000b94 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e6:	f7ff fb55 	bl	8000b94 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e255      	b.n	80019a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014f8:	4b65      	ldr	r3, [pc, #404]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001504:	4b62      	ldr	r3, [pc, #392]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	061b      	lsls	r3, r3, #24
 8001512:	495f      	ldr	r1, [pc, #380]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 8001514:	4313      	orrs	r3, r2
 8001516:	604b      	str	r3, [r1, #4]
 8001518:	e018      	b.n	800154c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800151a:	4b5d      	ldr	r3, [pc, #372]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a5c      	ldr	r2, [pc, #368]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 8001520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001526:	f7ff fb35 	bl	8000b94 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800152e:	f7ff fb31 	bl	8000b94 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e231      	b.n	80019a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001540:	4b53      	ldr	r3, [pc, #332]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1f0      	bne.n	800152e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0308 	and.w	r3, r3, #8
 8001554:	2b00      	cmp	r3, #0
 8001556:	d03c      	beq.n	80015d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d01c      	beq.n	800159a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001560:	4b4b      	ldr	r3, [pc, #300]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 8001562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001566:	4a4a      	ldr	r2, [pc, #296]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001570:	f7ff fb10 	bl	8000b94 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001578:	f7ff fb0c 	bl	8000b94 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e20c      	b.n	80019a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800158a:	4b41      	ldr	r3, [pc, #260]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 800158c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0ef      	beq.n	8001578 <HAL_RCC_OscConfig+0x3ec>
 8001598:	e01b      	b.n	80015d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800159a:	4b3d      	ldr	r3, [pc, #244]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 800159c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015a0:	4a3b      	ldr	r2, [pc, #236]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 80015a2:	f023 0301 	bic.w	r3, r3, #1
 80015a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015aa:	f7ff faf3 	bl	8000b94 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b2:	f7ff faef 	bl	8000b94 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e1ef      	b.n	80019a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015c4:	4b32      	ldr	r3, [pc, #200]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 80015c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1ef      	bne.n	80015b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 80a6 	beq.w	800172c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e0:	2300      	movs	r3, #0
 80015e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015e4:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 80015e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d10d      	bne.n	800160c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f0:	4b27      	ldr	r3, [pc, #156]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 80015f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f4:	4a26      	ldr	r2, [pc, #152]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 80015f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fa:	6593      	str	r3, [r2, #88]	; 0x58
 80015fc:	4b24      	ldr	r3, [pc, #144]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 80015fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001608:	2301      	movs	r3, #1
 800160a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800160c:	4b21      	ldr	r3, [pc, #132]	; (8001694 <HAL_RCC_OscConfig+0x508>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001614:	2b00      	cmp	r3, #0
 8001616:	d118      	bne.n	800164a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001618:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <HAL_RCC_OscConfig+0x508>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a1d      	ldr	r2, [pc, #116]	; (8001694 <HAL_RCC_OscConfig+0x508>)
 800161e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001622:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001624:	f7ff fab6 	bl	8000b94 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800162c:	f7ff fab2 	bl	8000b94 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e1b2      	b.n	80019a4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <HAL_RCC_OscConfig+0x508>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f0      	beq.n	800162c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d108      	bne.n	8001664 <HAL_RCC_OscConfig+0x4d8>
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 8001654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001658:	4a0d      	ldr	r2, [pc, #52]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001662:	e029      	b.n	80016b8 <HAL_RCC_OscConfig+0x52c>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b05      	cmp	r3, #5
 800166a:	d115      	bne.n	8001698 <HAL_RCC_OscConfig+0x50c>
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 800166e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001672:	4a07      	ldr	r2, [pc, #28]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 8001674:	f043 0304 	orr.w	r3, r3, #4
 8001678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 800167e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001682:	4a03      	ldr	r2, [pc, #12]	; (8001690 <HAL_RCC_OscConfig+0x504>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800168c:	e014      	b.n	80016b8 <HAL_RCC_OscConfig+0x52c>
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000
 8001694:	40007000 	.word	0x40007000
 8001698:	4b9a      	ldr	r3, [pc, #616]	; (8001904 <HAL_RCC_OscConfig+0x778>)
 800169a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800169e:	4a99      	ldr	r2, [pc, #612]	; (8001904 <HAL_RCC_OscConfig+0x778>)
 80016a0:	f023 0301 	bic.w	r3, r3, #1
 80016a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016a8:	4b96      	ldr	r3, [pc, #600]	; (8001904 <HAL_RCC_OscConfig+0x778>)
 80016aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ae:	4a95      	ldr	r2, [pc, #596]	; (8001904 <HAL_RCC_OscConfig+0x778>)
 80016b0:	f023 0304 	bic.w	r3, r3, #4
 80016b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d016      	beq.n	80016ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c0:	f7ff fa68 	bl	8000b94 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016c6:	e00a      	b.n	80016de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c8:	f7ff fa64 	bl	8000b94 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e162      	b.n	80019a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016de:	4b89      	ldr	r3, [pc, #548]	; (8001904 <HAL_RCC_OscConfig+0x778>)
 80016e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0ed      	beq.n	80016c8 <HAL_RCC_OscConfig+0x53c>
 80016ec:	e015      	b.n	800171a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ee:	f7ff fa51 	bl	8000b94 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016f4:	e00a      	b.n	800170c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f6:	f7ff fa4d 	bl	8000b94 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	f241 3288 	movw	r2, #5000	; 0x1388
 8001704:	4293      	cmp	r3, r2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e14b      	b.n	80019a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800170c:	4b7d      	ldr	r3, [pc, #500]	; (8001904 <HAL_RCC_OscConfig+0x778>)
 800170e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1ed      	bne.n	80016f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800171a:	7ffb      	ldrb	r3, [r7, #31]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d105      	bne.n	800172c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001720:	4b78      	ldr	r3, [pc, #480]	; (8001904 <HAL_RCC_OscConfig+0x778>)
 8001722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001724:	4a77      	ldr	r2, [pc, #476]	; (8001904 <HAL_RCC_OscConfig+0x778>)
 8001726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800172a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0320 	and.w	r3, r3, #32
 8001734:	2b00      	cmp	r3, #0
 8001736:	d03c      	beq.n	80017b2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	2b00      	cmp	r3, #0
 800173e:	d01c      	beq.n	800177a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001740:	4b70      	ldr	r3, [pc, #448]	; (8001904 <HAL_RCC_OscConfig+0x778>)
 8001742:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001746:	4a6f      	ldr	r2, [pc, #444]	; (8001904 <HAL_RCC_OscConfig+0x778>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001750:	f7ff fa20 	bl	8000b94 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001758:	f7ff fa1c 	bl	8000b94 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e11c      	b.n	80019a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800176a:	4b66      	ldr	r3, [pc, #408]	; (8001904 <HAL_RCC_OscConfig+0x778>)
 800176c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0ef      	beq.n	8001758 <HAL_RCC_OscConfig+0x5cc>
 8001778:	e01b      	b.n	80017b2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800177a:	4b62      	ldr	r3, [pc, #392]	; (8001904 <HAL_RCC_OscConfig+0x778>)
 800177c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001780:	4a60      	ldr	r2, [pc, #384]	; (8001904 <HAL_RCC_OscConfig+0x778>)
 8001782:	f023 0301 	bic.w	r3, r3, #1
 8001786:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178a:	f7ff fa03 	bl	8000b94 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001792:	f7ff f9ff 	bl	8000b94 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e0ff      	b.n	80019a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017a4:	4b57      	ldr	r3, [pc, #348]	; (8001904 <HAL_RCC_OscConfig+0x778>)
 80017a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1ef      	bne.n	8001792 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 80f3 	beq.w	80019a2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	f040 80c9 	bne.w	8001958 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017c6:	4b4f      	ldr	r3, [pc, #316]	; (8001904 <HAL_RCC_OscConfig+0x778>)
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	f003 0203 	and.w	r2, r3, #3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d12c      	bne.n	8001834 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e4:	3b01      	subs	r3, #1
 80017e6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d123      	bne.n	8001834 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d11b      	bne.n	8001834 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001806:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001808:	429a      	cmp	r2, r3
 800180a:	d113      	bne.n	8001834 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001816:	085b      	lsrs	r3, r3, #1
 8001818:	3b01      	subs	r3, #1
 800181a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800181c:	429a      	cmp	r2, r3
 800181e:	d109      	bne.n	8001834 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	085b      	lsrs	r3, r3, #1
 800182c:	3b01      	subs	r3, #1
 800182e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001830:	429a      	cmp	r2, r3
 8001832:	d06b      	beq.n	800190c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	2b0c      	cmp	r3, #12
 8001838:	d062      	beq.n	8001900 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800183a:	4b32      	ldr	r3, [pc, #200]	; (8001904 <HAL_RCC_OscConfig+0x778>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e0ac      	b.n	80019a4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800184a:	4b2e      	ldr	r3, [pc, #184]	; (8001904 <HAL_RCC_OscConfig+0x778>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a2d      	ldr	r2, [pc, #180]	; (8001904 <HAL_RCC_OscConfig+0x778>)
 8001850:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001854:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001856:	f7ff f99d 	bl	8000b94 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185e:	f7ff f999 	bl	8000b94 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e099      	b.n	80019a4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001870:	4b24      	ldr	r3, [pc, #144]	; (8001904 <HAL_RCC_OscConfig+0x778>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f0      	bne.n	800185e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800187c:	4b21      	ldr	r3, [pc, #132]	; (8001904 <HAL_RCC_OscConfig+0x778>)
 800187e:	68da      	ldr	r2, [r3, #12]
 8001880:	4b21      	ldr	r3, [pc, #132]	; (8001908 <HAL_RCC_OscConfig+0x77c>)
 8001882:	4013      	ands	r3, r2
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800188c:	3a01      	subs	r2, #1
 800188e:	0112      	lsls	r2, r2, #4
 8001890:	4311      	orrs	r1, r2
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001896:	0212      	lsls	r2, r2, #8
 8001898:	4311      	orrs	r1, r2
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800189e:	0852      	lsrs	r2, r2, #1
 80018a0:	3a01      	subs	r2, #1
 80018a2:	0552      	lsls	r2, r2, #21
 80018a4:	4311      	orrs	r1, r2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018aa:	0852      	lsrs	r2, r2, #1
 80018ac:	3a01      	subs	r2, #1
 80018ae:	0652      	lsls	r2, r2, #25
 80018b0:	4311      	orrs	r1, r2
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018b6:	06d2      	lsls	r2, r2, #27
 80018b8:	430a      	orrs	r2, r1
 80018ba:	4912      	ldr	r1, [pc, #72]	; (8001904 <HAL_RCC_OscConfig+0x778>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018c0:	4b10      	ldr	r3, [pc, #64]	; (8001904 <HAL_RCC_OscConfig+0x778>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0f      	ldr	r2, [pc, #60]	; (8001904 <HAL_RCC_OscConfig+0x778>)
 80018c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018cc:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <HAL_RCC_OscConfig+0x778>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	4a0c      	ldr	r2, [pc, #48]	; (8001904 <HAL_RCC_OscConfig+0x778>)
 80018d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018d8:	f7ff f95c 	bl	8000b94 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e0:	f7ff f958 	bl	8000b94 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e058      	b.n	80019a4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018f2:	4b04      	ldr	r3, [pc, #16]	; (8001904 <HAL_RCC_OscConfig+0x778>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018fe:	e050      	b.n	80019a2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e04f      	b.n	80019a4 <HAL_RCC_OscConfig+0x818>
 8001904:	40021000 	.word	0x40021000
 8001908:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800190c:	4b27      	ldr	r3, [pc, #156]	; (80019ac <HAL_RCC_OscConfig+0x820>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d144      	bne.n	80019a2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001918:	4b24      	ldr	r3, [pc, #144]	; (80019ac <HAL_RCC_OscConfig+0x820>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a23      	ldr	r2, [pc, #140]	; (80019ac <HAL_RCC_OscConfig+0x820>)
 800191e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001922:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001924:	4b21      	ldr	r3, [pc, #132]	; (80019ac <HAL_RCC_OscConfig+0x820>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	4a20      	ldr	r2, [pc, #128]	; (80019ac <HAL_RCC_OscConfig+0x820>)
 800192a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800192e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001930:	f7ff f930 	bl	8000b94 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001938:	f7ff f92c 	bl	8000b94 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e02c      	b.n	80019a4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800194a:	4b18      	ldr	r3, [pc, #96]	; (80019ac <HAL_RCC_OscConfig+0x820>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0x7ac>
 8001956:	e024      	b.n	80019a2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2b0c      	cmp	r3, #12
 800195c:	d01f      	beq.n	800199e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195e:	4b13      	ldr	r3, [pc, #76]	; (80019ac <HAL_RCC_OscConfig+0x820>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a12      	ldr	r2, [pc, #72]	; (80019ac <HAL_RCC_OscConfig+0x820>)
 8001964:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196a:	f7ff f913 	bl	8000b94 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001972:	f7ff f90f 	bl	8000b94 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e00f      	b.n	80019a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001984:	4b09      	ldr	r3, [pc, #36]	; (80019ac <HAL_RCC_OscConfig+0x820>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1f0      	bne.n	8001972 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_RCC_OscConfig+0x820>)
 8001992:	68da      	ldr	r2, [r3, #12]
 8001994:	4905      	ldr	r1, [pc, #20]	; (80019ac <HAL_RCC_OscConfig+0x820>)
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_RCC_OscConfig+0x824>)
 8001998:	4013      	ands	r3, r2
 800199a:	60cb      	str	r3, [r1, #12]
 800199c:	e001      	b.n	80019a2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e000      	b.n	80019a4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3720      	adds	r7, #32
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40021000 	.word	0x40021000
 80019b0:	feeefffc 	.word	0xfeeefffc

080019b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e0e7      	b.n	8001b98 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019c8:	4b75      	ldr	r3, [pc, #468]	; (8001ba0 <HAL_RCC_ClockConfig+0x1ec>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d910      	bls.n	80019f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d6:	4b72      	ldr	r3, [pc, #456]	; (8001ba0 <HAL_RCC_ClockConfig+0x1ec>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f023 0207 	bic.w	r2, r3, #7
 80019de:	4970      	ldr	r1, [pc, #448]	; (8001ba0 <HAL_RCC_ClockConfig+0x1ec>)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e6:	4b6e      	ldr	r3, [pc, #440]	; (8001ba0 <HAL_RCC_ClockConfig+0x1ec>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0cf      	b.n	8001b98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d010      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	4b66      	ldr	r3, [pc, #408]	; (8001ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d908      	bls.n	8001a26 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a14:	4b63      	ldr	r3, [pc, #396]	; (8001ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	4960      	ldr	r1, [pc, #384]	; (8001ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d04c      	beq.n	8001acc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	d107      	bne.n	8001a4a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a3a:	4b5a      	ldr	r3, [pc, #360]	; (8001ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d121      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e0a6      	b.n	8001b98 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d107      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a52:	4b54      	ldr	r3, [pc, #336]	; (8001ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d115      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e09a      	b.n	8001b98 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d107      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a6a:	4b4e      	ldr	r3, [pc, #312]	; (8001ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d109      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e08e      	b.n	8001b98 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a7a:	4b4a      	ldr	r3, [pc, #296]	; (8001ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e086      	b.n	8001b98 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a8a:	4b46      	ldr	r3, [pc, #280]	; (8001ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f023 0203 	bic.w	r2, r3, #3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	4943      	ldr	r1, [pc, #268]	; (8001ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a9c:	f7ff f87a 	bl	8000b94 <HAL_GetTick>
 8001aa0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa2:	e00a      	b.n	8001aba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa4:	f7ff f876 	bl	8000b94 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e06e      	b.n	8001b98 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aba:	4b3a      	ldr	r3, [pc, #232]	; (8001ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 020c 	and.w	r2, r3, #12
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d1eb      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d010      	beq.n	8001afa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d208      	bcs.n	8001afa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae8:	4b2e      	ldr	r3, [pc, #184]	; (8001ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	492b      	ldr	r1, [pc, #172]	; (8001ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001afa:	4b29      	ldr	r3, [pc, #164]	; (8001ba0 <HAL_RCC_ClockConfig+0x1ec>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d210      	bcs.n	8001b2a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b08:	4b25      	ldr	r3, [pc, #148]	; (8001ba0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f023 0207 	bic.w	r2, r3, #7
 8001b10:	4923      	ldr	r1, [pc, #140]	; (8001ba0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b18:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d001      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e036      	b.n	8001b98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d008      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b36:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	4918      	ldr	r1, [pc, #96]	; (8001ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0308 	and.w	r3, r3, #8
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d009      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b54:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4910      	ldr	r1, [pc, #64]	; (8001ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b68:	f000 f824 	bl	8001bb4 <HAL_RCC_GetSysClockFreq>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	091b      	lsrs	r3, r3, #4
 8001b74:	f003 030f 	and.w	r3, r3, #15
 8001b78:	490b      	ldr	r1, [pc, #44]	; (8001ba8 <HAL_RCC_ClockConfig+0x1f4>)
 8001b7a:	5ccb      	ldrb	r3, [r1, r3]
 8001b7c:	f003 031f 	and.w	r3, r3, #31
 8001b80:	fa22 f303 	lsr.w	r3, r2, r3
 8001b84:	4a09      	ldr	r2, [pc, #36]	; (8001bac <HAL_RCC_ClockConfig+0x1f8>)
 8001b86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_RCC_ClockConfig+0x1fc>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe ffb1 	bl	8000af4 <HAL_InitTick>
 8001b92:	4603      	mov	r3, r0
 8001b94:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b96:	7afb      	ldrb	r3, [r7, #11]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40022000 	.word	0x40022000
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	0800290c 	.word	0x0800290c
 8001bac:	20000004 	.word	0x20000004
 8001bb0:	20000008 	.word	0x20000008

08001bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b089      	sub	sp, #36	; 0x24
 8001bb8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bc2:	4b3e      	ldr	r3, [pc, #248]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
 8001bca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bcc:	4b3b      	ldr	r3, [pc, #236]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d005      	beq.n	8001be8 <HAL_RCC_GetSysClockFreq+0x34>
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	2b0c      	cmp	r3, #12
 8001be0:	d121      	bne.n	8001c26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d11e      	bne.n	8001c26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001be8:	4b34      	ldr	r3, [pc, #208]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d107      	bne.n	8001c04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bf4:	4b31      	ldr	r3, [pc, #196]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bfa:	0a1b      	lsrs	r3, r3, #8
 8001bfc:	f003 030f 	and.w	r3, r3, #15
 8001c00:	61fb      	str	r3, [r7, #28]
 8001c02:	e005      	b.n	8001c10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c04:	4b2d      	ldr	r3, [pc, #180]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	091b      	lsrs	r3, r3, #4
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c10:	4a2b      	ldr	r2, [pc, #172]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10d      	bne.n	8001c3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c24:	e00a      	b.n	8001c3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d102      	bne.n	8001c32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c2c:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c2e:	61bb      	str	r3, [r7, #24]
 8001c30:	e004      	b.n	8001c3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	d101      	bne.n	8001c3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c38:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	2b0c      	cmp	r3, #12
 8001c40:	d134      	bne.n	8001cac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c42:	4b1e      	ldr	r3, [pc, #120]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d003      	beq.n	8001c5a <HAL_RCC_GetSysClockFreq+0xa6>
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d003      	beq.n	8001c60 <HAL_RCC_GetSysClockFreq+0xac>
 8001c58:	e005      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c5c:	617b      	str	r3, [r7, #20]
      break;
 8001c5e:	e005      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c60:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c62:	617b      	str	r3, [r7, #20]
      break;
 8001c64:	e002      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	617b      	str	r3, [r7, #20]
      break;
 8001c6a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c6c:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	3301      	adds	r3, #1
 8001c78:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	0a1b      	lsrs	r3, r3, #8
 8001c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	fb03 f202 	mul.w	r2, r3, r2
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c90:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	0e5b      	lsrs	r3, r3, #25
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001caa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cac:	69bb      	ldr	r3, [r7, #24]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3724      	adds	r7, #36	; 0x24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	0800291c 	.word	0x0800291c
 8001cc4:	00f42400 	.word	0x00f42400
 8001cc8:	007a1200 	.word	0x007a1200

08001ccc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cd8:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ce4:	f7ff f9ee 	bl	80010c4 <HAL_PWREx_GetVoltageRange>
 8001ce8:	6178      	str	r0, [r7, #20]
 8001cea:	e014      	b.n	8001d16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cec:	4b25      	ldr	r3, [pc, #148]	; (8001d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf0:	4a24      	ldr	r2, [pc, #144]	; (8001d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	6593      	str	r3, [r2, #88]	; 0x58
 8001cf8:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d04:	f7ff f9de 	bl	80010c4 <HAL_PWREx_GetVoltageRange>
 8001d08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d0a:	4b1e      	ldr	r3, [pc, #120]	; (8001d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0e:	4a1d      	ldr	r2, [pc, #116]	; (8001d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d14:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d1c:	d10b      	bne.n	8001d36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b80      	cmp	r3, #128	; 0x80
 8001d22:	d919      	bls.n	8001d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2ba0      	cmp	r3, #160	; 0xa0
 8001d28:	d902      	bls.n	8001d30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	e013      	b.n	8001d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d30:	2301      	movs	r3, #1
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	e010      	b.n	8001d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b80      	cmp	r3, #128	; 0x80
 8001d3a:	d902      	bls.n	8001d42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	e00a      	b.n	8001d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b80      	cmp	r3, #128	; 0x80
 8001d46:	d102      	bne.n	8001d4e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d48:	2302      	movs	r3, #2
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	e004      	b.n	8001d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b70      	cmp	r3, #112	; 0x70
 8001d52:	d101      	bne.n	8001d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d54:	2301      	movs	r3, #1
 8001d56:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f023 0207 	bic.w	r2, r3, #7
 8001d60:	4909      	ldr	r1, [pc, #36]	; (8001d88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d68:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d001      	beq.n	8001d7a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40022000 	.word	0x40022000

08001d8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e095      	b.n	8001eca <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d108      	bne.n	8001db8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dae:	d009      	beq.n	8001dc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	61da      	str	r2, [r3, #28]
 8001db6:	e005      	b.n	8001dc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d106      	bne.n	8001de4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7fe fd96 	bl	8000910 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2202      	movs	r2, #2
 8001de8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dfa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001e04:	d902      	bls.n	8001e0c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	e002      	b.n	8001e12 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e10:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001e1a:	d007      	beq.n	8001e2c <HAL_SPI_Init+0xa0>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001e24:	d002      	beq.n	8001e2c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	431a      	orrs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	431a      	orrs	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e6e:	ea42 0103 	orr.w	r1, r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e76:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	0c1b      	lsrs	r3, r3, #16
 8001e88:	f003 0204 	and.w	r2, r3, #4
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	f003 0310 	and.w	r3, r3, #16
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001ea8:	ea42 0103 	orr.w	r1, r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b088      	sub	sp, #32
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	603b      	str	r3, [r7, #0]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d101      	bne.n	8001ef4 <HAL_SPI_Transmit+0x22>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e158      	b.n	80021a6 <HAL_SPI_Transmit+0x2d4>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001efc:	f7fe fe4a 	bl	8000b94 <HAL_GetTick>
 8001f00:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001f02:	88fb      	ldrh	r3, [r7, #6]
 8001f04:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d002      	beq.n	8001f18 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001f12:	2302      	movs	r3, #2
 8001f14:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f16:	e13d      	b.n	8002194 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <HAL_SPI_Transmit+0x52>
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d102      	bne.n	8001f2a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f28:	e134      	b.n	8002194 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	88fa      	ldrh	r2, [r7, #6]
 8001f42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	88fa      	ldrh	r2, [r7, #6]
 8001f48:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f74:	d10f      	bne.n	8001f96 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa0:	2b40      	cmp	r3, #64	; 0x40
 8001fa2:	d007      	beq.n	8001fb4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001fbc:	d94b      	bls.n	8002056 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d002      	beq.n	8001fcc <HAL_SPI_Transmit+0xfa>
 8001fc6:	8afb      	ldrh	r3, [r7, #22]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d13e      	bne.n	800204a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd0:	881a      	ldrh	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fdc:	1c9a      	adds	r2, r3, #2
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001ff0:	e02b      	b.n	800204a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d112      	bne.n	8002026 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002004:	881a      	ldrh	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002010:	1c9a      	adds	r2, r3, #2
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800201a:	b29b      	uxth	r3, r3
 800201c:	3b01      	subs	r3, #1
 800201e:	b29a      	uxth	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002024:	e011      	b.n	800204a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002026:	f7fe fdb5 	bl	8000b94 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d803      	bhi.n	800203e <HAL_SPI_Transmit+0x16c>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203c:	d102      	bne.n	8002044 <HAL_SPI_Transmit+0x172>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d102      	bne.n	800204a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002048:	e0a4      	b.n	8002194 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800204e:	b29b      	uxth	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1ce      	bne.n	8001ff2 <HAL_SPI_Transmit+0x120>
 8002054:	e07c      	b.n	8002150 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d002      	beq.n	8002064 <HAL_SPI_Transmit+0x192>
 800205e:	8afb      	ldrh	r3, [r7, #22]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d170      	bne.n	8002146 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002068:	b29b      	uxth	r3, r3
 800206a:	2b01      	cmp	r3, #1
 800206c:	d912      	bls.n	8002094 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002072:	881a      	ldrh	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207e:	1c9a      	adds	r2, r3, #2
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002088:	b29b      	uxth	r3, r3
 800208a:	3b02      	subs	r3, #2
 800208c:	b29a      	uxth	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002092:	e058      	b.n	8002146 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	330c      	adds	r3, #12
 800209e:	7812      	ldrb	r2, [r2, #0]
 80020a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	3b01      	subs	r3, #1
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80020ba:	e044      	b.n	8002146 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d12b      	bne.n	8002122 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d912      	bls.n	80020fa <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d8:	881a      	ldrh	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e4:	1c9a      	adds	r2, r3, #2
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	3b02      	subs	r3, #2
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80020f8:	e025      	b.n	8002146 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	330c      	adds	r3, #12
 8002104:	7812      	ldrb	r2, [r2, #0]
 8002106:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210c:	1c5a      	adds	r2, r3, #1
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002116:	b29b      	uxth	r3, r3
 8002118:	3b01      	subs	r3, #1
 800211a:	b29a      	uxth	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002120:	e011      	b.n	8002146 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002122:	f7fe fd37 	bl	8000b94 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d803      	bhi.n	800213a <HAL_SPI_Transmit+0x268>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002138:	d102      	bne.n	8002140 <HAL_SPI_Transmit+0x26e>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d102      	bne.n	8002146 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002144:	e026      	b.n	8002194 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800214a:	b29b      	uxth	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1b5      	bne.n	80020bc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	6839      	ldr	r1, [r7, #0]
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 fb5b 	bl	8002810 <SPI_EndRxTxTransaction>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2220      	movs	r2, #32
 8002164:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10a      	bne.n	8002184 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002188:	2b00      	cmp	r3, #0
 800218a:	d002      	beq.n	8002192 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	77fb      	strb	r3, [r7, #31]
 8002190:	e000      	b.n	8002194 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002192:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80021a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3720      	adds	r7, #32
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b08a      	sub	sp, #40	; 0x28
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	60f8      	str	r0, [r7, #12]
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	607a      	str	r2, [r7, #4]
 80021ba:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80021bc:	2301      	movs	r3, #1
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <HAL_SPI_TransmitReceive+0x26>
 80021d0:	2302      	movs	r3, #2
 80021d2:	e1fb      	b.n	80025cc <HAL_SPI_TransmitReceive+0x41e>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021dc:	f7fe fcda 	bl	8000b94 <HAL_GetTick>
 80021e0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80021e8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80021f0:	887b      	ldrh	r3, [r7, #2]
 80021f2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80021f4:	887b      	ldrh	r3, [r7, #2]
 80021f6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80021f8:	7efb      	ldrb	r3, [r7, #27]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d00e      	beq.n	800221c <HAL_SPI_TransmitReceive+0x6e>
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002204:	d106      	bne.n	8002214 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d102      	bne.n	8002214 <HAL_SPI_TransmitReceive+0x66>
 800220e:	7efb      	ldrb	r3, [r7, #27]
 8002210:	2b04      	cmp	r3, #4
 8002212:	d003      	beq.n	800221c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002214:	2302      	movs	r3, #2
 8002216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800221a:	e1cd      	b.n	80025b8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d005      	beq.n	800222e <HAL_SPI_TransmitReceive+0x80>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d002      	beq.n	800222e <HAL_SPI_TransmitReceive+0x80>
 8002228:	887b      	ldrh	r3, [r7, #2]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d103      	bne.n	8002236 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002234:	e1c0      	b.n	80025b8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b04      	cmp	r3, #4
 8002240:	d003      	beq.n	800224a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2205      	movs	r2, #5
 8002246:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	887a      	ldrh	r2, [r7, #2]
 800225a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	887a      	ldrh	r2, [r7, #2]
 8002262:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	887a      	ldrh	r2, [r7, #2]
 8002270:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	887a      	ldrh	r2, [r7, #2]
 8002276:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800228c:	d802      	bhi.n	8002294 <HAL_SPI_TransmitReceive+0xe6>
 800228e:	8a3b      	ldrh	r3, [r7, #16]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d908      	bls.n	80022a6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022a2:	605a      	str	r2, [r3, #4]
 80022a4:	e007      	b.n	80022b6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80022b4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c0:	2b40      	cmp	r3, #64	; 0x40
 80022c2:	d007      	beq.n	80022d4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80022dc:	d97c      	bls.n	80023d8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <HAL_SPI_TransmitReceive+0x13e>
 80022e6:	8a7b      	ldrh	r3, [r7, #18]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d169      	bne.n	80023c0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f0:	881a      	ldrh	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fc:	1c9a      	adds	r2, r3, #2
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002310:	e056      	b.n	80023c0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b02      	cmp	r3, #2
 800231e:	d11b      	bne.n	8002358 <HAL_SPI_TransmitReceive+0x1aa>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002324:	b29b      	uxth	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d016      	beq.n	8002358 <HAL_SPI_TransmitReceive+0x1aa>
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	2b01      	cmp	r3, #1
 800232e:	d113      	bne.n	8002358 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002334:	881a      	ldrh	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002340:	1c9a      	adds	r2, r3, #2
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800234a:	b29b      	uxth	r3, r3
 800234c:	3b01      	subs	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b01      	cmp	r3, #1
 8002364:	d11c      	bne.n	80023a0 <HAL_SPI_TransmitReceive+0x1f2>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800236c:	b29b      	uxth	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d016      	beq.n	80023a0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	b292      	uxth	r2, r2
 800237e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	1c9a      	adds	r2, r3, #2
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002390:	b29b      	uxth	r3, r3
 8002392:	3b01      	subs	r3, #1
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800239c:	2301      	movs	r3, #1
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80023a0:	f7fe fbf8 	bl	8000b94 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d807      	bhi.n	80023c0 <HAL_SPI_TransmitReceive+0x212>
 80023b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b6:	d003      	beq.n	80023c0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80023be:	e0fb      	b.n	80025b8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1a3      	bne.n	8002312 <HAL_SPI_TransmitReceive+0x164>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d19d      	bne.n	8002312 <HAL_SPI_TransmitReceive+0x164>
 80023d6:	e0df      	b.n	8002598 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_SPI_TransmitReceive+0x23a>
 80023e0:	8a7b      	ldrh	r3, [r7, #18]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	f040 80cb 	bne.w	800257e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d912      	bls.n	8002418 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f6:	881a      	ldrh	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002402:	1c9a      	adds	r2, r3, #2
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800240c:	b29b      	uxth	r3, r3
 800240e:	3b02      	subs	r3, #2
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002416:	e0b2      	b.n	800257e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	330c      	adds	r3, #12
 8002422:	7812      	ldrb	r2, [r2, #0]
 8002424:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242a:	1c5a      	adds	r2, r3, #1
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002434:	b29b      	uxth	r3, r3
 8002436:	3b01      	subs	r3, #1
 8002438:	b29a      	uxth	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800243e:	e09e      	b.n	800257e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b02      	cmp	r3, #2
 800244c:	d134      	bne.n	80024b8 <HAL_SPI_TransmitReceive+0x30a>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002452:	b29b      	uxth	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	d02f      	beq.n	80024b8 <HAL_SPI_TransmitReceive+0x30a>
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	2b01      	cmp	r3, #1
 800245c:	d12c      	bne.n	80024b8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002462:	b29b      	uxth	r3, r3
 8002464:	2b01      	cmp	r3, #1
 8002466:	d912      	bls.n	800248e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246c:	881a      	ldrh	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002478:	1c9a      	adds	r2, r3, #2
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002482:	b29b      	uxth	r3, r3
 8002484:	3b02      	subs	r3, #2
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800248c:	e012      	b.n	80024b4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	330c      	adds	r3, #12
 8002498:	7812      	ldrb	r2, [r2, #0]
 800249a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a0:	1c5a      	adds	r2, r3, #1
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d148      	bne.n	8002558 <HAL_SPI_TransmitReceive+0x3aa>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d042      	beq.n	8002558 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80024d8:	b29b      	uxth	r3, r3
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d923      	bls.n	8002526 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	b292      	uxth	r2, r2
 80024ea:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	1c9a      	adds	r2, r3, #2
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	3b02      	subs	r3, #2
 8002500:	b29a      	uxth	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800250e:	b29b      	uxth	r3, r3
 8002510:	2b01      	cmp	r3, #1
 8002512:	d81f      	bhi.n	8002554 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002522:	605a      	str	r2, [r3, #4]
 8002524:	e016      	b.n	8002554 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f103 020c 	add.w	r2, r3, #12
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	7812      	ldrb	r2, [r2, #0]
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002548:	b29b      	uxth	r3, r3
 800254a:	3b01      	subs	r3, #1
 800254c:	b29a      	uxth	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002554:	2301      	movs	r3, #1
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002558:	f7fe fb1c 	bl	8000b94 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002564:	429a      	cmp	r2, r3
 8002566:	d803      	bhi.n	8002570 <HAL_SPI_TransmitReceive+0x3c2>
 8002568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256e:	d102      	bne.n	8002576 <HAL_SPI_TransmitReceive+0x3c8>
 8002570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002572:	2b00      	cmp	r3, #0
 8002574:	d103      	bne.n	800257e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800257c:	e01c      	b.n	80025b8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002582:	b29b      	uxth	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	f47f af5b 	bne.w	8002440 <HAL_SPI_TransmitReceive+0x292>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	f47f af54 	bne.w	8002440 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002598:	69fa      	ldr	r2, [r7, #28]
 800259a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 f937 	bl	8002810 <SPI_EndRxTxTransaction>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d006      	beq.n	80025b6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2220      	movs	r2, #32
 80025b2:	661a      	str	r2, [r3, #96]	; 0x60
 80025b4:	e000      	b.n	80025b8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80025b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80025c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3728      	adds	r7, #40	; 0x28
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	603b      	str	r3, [r7, #0]
 80025e0:	4613      	mov	r3, r2
 80025e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80025e4:	f7fe fad6 	bl	8000b94 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	4413      	add	r3, r2
 80025f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80025f4:	f7fe face 	bl	8000b94 <HAL_GetTick>
 80025f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80025fa:	4b39      	ldr	r3, [pc, #228]	; (80026e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	015b      	lsls	r3, r3, #5
 8002600:	0d1b      	lsrs	r3, r3, #20
 8002602:	69fa      	ldr	r2, [r7, #28]
 8002604:	fb02 f303 	mul.w	r3, r2, r3
 8002608:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800260a:	e054      	b.n	80026b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002612:	d050      	beq.n	80026b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002614:	f7fe fabe 	bl	8000b94 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	69fa      	ldr	r2, [r7, #28]
 8002620:	429a      	cmp	r2, r3
 8002622:	d902      	bls.n	800262a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d13d      	bne.n	80026a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002638:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002642:	d111      	bne.n	8002668 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800264c:	d004      	beq.n	8002658 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002656:	d107      	bne.n	8002668 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002666:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002670:	d10f      	bne.n	8002692 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002690:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e017      	b.n	80026d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	4013      	ands	r3, r2
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	bf0c      	ite	eq
 80026c6:	2301      	moveq	r3, #1
 80026c8:	2300      	movne	r3, #0
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	461a      	mov	r2, r3
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d19b      	bne.n	800260c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3720      	adds	r7, #32
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20000004 	.word	0x20000004

080026e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08a      	sub	sp, #40	; 0x28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
 80026f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80026f2:	2300      	movs	r3, #0
 80026f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80026f6:	f7fe fa4d 	bl	8000b94 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fe:	1a9b      	subs	r3, r3, r2
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	4413      	add	r3, r2
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002706:	f7fe fa45 	bl	8000b94 <HAL_GetTick>
 800270a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	330c      	adds	r3, #12
 8002712:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002714:	4b3d      	ldr	r3, [pc, #244]	; (800280c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	00da      	lsls	r2, r3, #3
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	0d1b      	lsrs	r3, r3, #20
 8002724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002726:	fb02 f303 	mul.w	r3, r2, r3
 800272a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800272c:	e060      	b.n	80027f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002734:	d107      	bne.n	8002746 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d104      	bne.n	8002746 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002744:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274c:	d050      	beq.n	80027f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800274e:	f7fe fa21 	bl	8000b94 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800275a:	429a      	cmp	r2, r3
 800275c:	d902      	bls.n	8002764 <SPI_WaitFifoStateUntilTimeout+0x80>
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	2b00      	cmp	r3, #0
 8002762:	d13d      	bne.n	80027e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002772:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800277c:	d111      	bne.n	80027a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002786:	d004      	beq.n	8002792 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002790:	d107      	bne.n	80027a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027aa:	d10f      	bne.n	80027cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e010      	b.n	8002802 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	3b01      	subs	r3, #1
 80027ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	4013      	ands	r3, r2
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d196      	bne.n	800272e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3728      	adds	r7, #40	; 0x28
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000004 	.word	0x20000004

08002810 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af02      	add	r7, sp, #8
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2200      	movs	r2, #0
 8002824:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f7ff ff5b 	bl	80026e4 <SPI_WaitFifoStateUntilTimeout>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d007      	beq.n	8002844 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002838:	f043 0220 	orr.w	r2, r3, #32
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e027      	b.n	8002894 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2200      	movs	r2, #0
 800284c:	2180      	movs	r1, #128	; 0x80
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f7ff fec0 	bl	80025d4 <SPI_WaitFlagStateUntilTimeout>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d007      	beq.n	800286a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800285e:	f043 0220 	orr.w	r2, r3, #32
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e014      	b.n	8002894 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2200      	movs	r2, #0
 8002872:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f7ff ff34 	bl	80026e4 <SPI_WaitFifoStateUntilTimeout>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d007      	beq.n	8002892 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002886:	f043 0220 	orr.w	r2, r3, #32
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e000      	b.n	8002894 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <__libc_init_array>:
 800289c:	b570      	push	{r4, r5, r6, lr}
 800289e:	4d0d      	ldr	r5, [pc, #52]	; (80028d4 <__libc_init_array+0x38>)
 80028a0:	4c0d      	ldr	r4, [pc, #52]	; (80028d8 <__libc_init_array+0x3c>)
 80028a2:	1b64      	subs	r4, r4, r5
 80028a4:	10a4      	asrs	r4, r4, #2
 80028a6:	2600      	movs	r6, #0
 80028a8:	42a6      	cmp	r6, r4
 80028aa:	d109      	bne.n	80028c0 <__libc_init_array+0x24>
 80028ac:	4d0b      	ldr	r5, [pc, #44]	; (80028dc <__libc_init_array+0x40>)
 80028ae:	4c0c      	ldr	r4, [pc, #48]	; (80028e0 <__libc_init_array+0x44>)
 80028b0:	f000 f820 	bl	80028f4 <_init>
 80028b4:	1b64      	subs	r4, r4, r5
 80028b6:	10a4      	asrs	r4, r4, #2
 80028b8:	2600      	movs	r6, #0
 80028ba:	42a6      	cmp	r6, r4
 80028bc:	d105      	bne.n	80028ca <__libc_init_array+0x2e>
 80028be:	bd70      	pop	{r4, r5, r6, pc}
 80028c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80028c4:	4798      	blx	r3
 80028c6:	3601      	adds	r6, #1
 80028c8:	e7ee      	b.n	80028a8 <__libc_init_array+0xc>
 80028ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80028ce:	4798      	blx	r3
 80028d0:	3601      	adds	r6, #1
 80028d2:	e7f2      	b.n	80028ba <__libc_init_array+0x1e>
 80028d4:	0800294c 	.word	0x0800294c
 80028d8:	0800294c 	.word	0x0800294c
 80028dc:	0800294c 	.word	0x0800294c
 80028e0:	08002950 	.word	0x08002950

080028e4 <memset>:
 80028e4:	4402      	add	r2, r0
 80028e6:	4603      	mov	r3, r0
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d100      	bne.n	80028ee <memset+0xa>
 80028ec:	4770      	bx	lr
 80028ee:	f803 1b01 	strb.w	r1, [r3], #1
 80028f2:	e7f9      	b.n	80028e8 <memset+0x4>

080028f4 <_init>:
 80028f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f6:	bf00      	nop
 80028f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028fa:	bc08      	pop	{r3}
 80028fc:	469e      	mov	lr, r3
 80028fe:	4770      	bx	lr

08002900 <_fini>:
 8002900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002902:	bf00      	nop
 8002904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002906:	bc08      	pop	{r3}
 8002908:	469e      	mov	lr, r3
 800290a:	4770      	bx	lr
