
radio_mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000517c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  0800530c  0800530c  0001530c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058cc  080058cc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080058cc  080058cc  000158cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058d4  080058d4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058d4  080058d4  000158d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058d8  080058d8  000158d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080058dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000070  0800594c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  0800594c  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db25  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d32  00000000  00000000  0002dbc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  0002f8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  00030540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000206a9  00000000  00000000  000310d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd36  00000000  00000000  00051779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3048  00000000  00000000  0005f4af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001224f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003610  00000000  00000000  00122548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080052f4 	.word	0x080052f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080052f4 	.word	0x080052f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <NRF24_csn>:
	while(uSecVar--);
}

//1. Chip Select function
void NRF24_csn(int state)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d008      	beq.n	80005a4 <NRF24_csn+0x20>
 8000592:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <NRF24_csn+0x38>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <NRF24_csn+0x3c>)
 8000598:	8811      	ldrh	r1, [r2, #0]
 800059a:	2201      	movs	r2, #1
 800059c:	4618      	mov	r0, r3
 800059e:	f001 fc9f 	bl	8001ee0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80005a2:	e007      	b.n	80005b4 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <NRF24_csn+0x38>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a05      	ldr	r2, [pc, #20]	; (80005c0 <NRF24_csn+0x3c>)
 80005aa:	8811      	ldrh	r1, [r2, #0]
 80005ac:	2200      	movs	r2, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 fc96 	bl	8001ee0 <HAL_GPIO_WritePin>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000090 	.word	0x20000090
 80005c0:	20000094 	.word	0x20000094

080005c4 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d008      	beq.n	80005e4 <NRF24_ce+0x20>
 80005d2:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <NRF24_ce+0x38>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a0a      	ldr	r2, [pc, #40]	; (8000600 <NRF24_ce+0x3c>)
 80005d8:	8811      	ldrh	r1, [r2, #0]
 80005da:	2201      	movs	r2, #1
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 fc7f 	bl	8001ee0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80005e2:	e007      	b.n	80005f4 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80005e4:	4b05      	ldr	r3, [pc, #20]	; (80005fc <NRF24_ce+0x38>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a05      	ldr	r2, [pc, #20]	; (8000600 <NRF24_ce+0x3c>)
 80005ea:	8811      	ldrh	r1, [r2, #0]
 80005ec:	2200      	movs	r2, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 fc76 	bl	8001ee0 <HAL_GPIO_WritePin>
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000090 	.word	0x20000090
 8000600:	20000096 	.word	0x20000096

08000604 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800060e:	2000      	movs	r0, #0
 8000610:	f7ff ffb8 	bl	8000584 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	f003 031f 	and.w	r3, r3, #31
 800061a:	b2db      	uxtb	r3, r3
 800061c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800061e:	f107 010c 	add.w	r1, r7, #12
 8000622:	2364      	movs	r3, #100	; 0x64
 8000624:	2201      	movs	r2, #1
 8000626:	480a      	ldr	r0, [pc, #40]	; (8000650 <NRF24_read_register+0x4c>)
 8000628:	f002 fe99 	bl	800335e <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	1c59      	adds	r1, r3, #1
 8000632:	2364      	movs	r3, #100	; 0x64
 8000634:	2201      	movs	r2, #1
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <NRF24_read_register+0x4c>)
 8000638:	f002 ffff 	bl	800363a <HAL_SPI_Receive>
	retData = spiBuf[1];
 800063c:	7b7b      	ldrb	r3, [r7, #13]
 800063e:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000640:	2001      	movs	r0, #1
 8000642:	f7ff ff9f 	bl	8000584 <NRF24_csn>
	return retData;
 8000646:	7bfb      	ldrb	r3, [r7, #15]
}
 8000648:	4618      	mov	r0, r3
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000098 	.word	0x20000098

08000654 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	6039      	str	r1, [r7, #0]
 800065e:	71fb      	strb	r3, [r7, #7]
 8000660:	4613      	mov	r3, r2
 8000662:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000664:	2000      	movs	r0, #0
 8000666:	f7ff ff8d 	bl	8000584 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	f003 031f 	and.w	r3, r3, #31
 8000670:	b2db      	uxtb	r3, r3
 8000672:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000674:	f107 010c 	add.w	r1, r7, #12
 8000678:	2364      	movs	r3, #100	; 0x64
 800067a:	2201      	movs	r2, #1
 800067c:	4808      	ldr	r0, [pc, #32]	; (80006a0 <NRF24_read_registerN+0x4c>)
 800067e:	f002 fe6e 	bl	800335e <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000682:	79bb      	ldrb	r3, [r7, #6]
 8000684:	b29a      	uxth	r2, r3
 8000686:	2364      	movs	r3, #100	; 0x64
 8000688:	6839      	ldr	r1, [r7, #0]
 800068a:	4805      	ldr	r0, [pc, #20]	; (80006a0 <NRF24_read_registerN+0x4c>)
 800068c:	f002 ffd5 	bl	800363a <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000690:	2001      	movs	r0, #1
 8000692:	f7ff ff77 	bl	8000584 <NRF24_csn>
}
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000098 	.word	0x20000098

080006a4 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	460a      	mov	r2, r1
 80006ae:	71fb      	strb	r3, [r7, #7]
 80006b0:	4613      	mov	r3, r2
 80006b2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80006b4:	2000      	movs	r0, #0
 80006b6:	f7ff ff65 	bl	8000584 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	f043 0320 	orr.w	r3, r3, #32
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80006c4:	79bb      	ldrb	r3, [r7, #6]
 80006c6:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80006c8:	f107 010c 	add.w	r1, r7, #12
 80006cc:	2364      	movs	r3, #100	; 0x64
 80006ce:	2202      	movs	r2, #2
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <NRF24_write_register+0x40>)
 80006d2:	f002 fe44 	bl	800335e <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80006d6:	2001      	movs	r0, #1
 80006d8:	f7ff ff54 	bl	8000584 <NRF24_csn>
}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000098 	.word	0x20000098

080006e8 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	6039      	str	r1, [r7, #0]
 80006f2:	71fb      	strb	r3, [r7, #7]
 80006f4:	4613      	mov	r3, r2
 80006f6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80006f8:	2000      	movs	r0, #0
 80006fa:	f7ff ff43 	bl	8000584 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	f043 0320 	orr.w	r3, r3, #32
 8000704:	b2db      	uxtb	r3, r3
 8000706:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000708:	f107 010c 	add.w	r1, r7, #12
 800070c:	2364      	movs	r3, #100	; 0x64
 800070e:	2201      	movs	r2, #1
 8000710:	4808      	ldr	r0, [pc, #32]	; (8000734 <NRF24_write_registerN+0x4c>)
 8000712:	f002 fe24 	bl	800335e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000716:	79bb      	ldrb	r3, [r7, #6]
 8000718:	b29a      	uxth	r2, r3
 800071a:	2364      	movs	r3, #100	; 0x64
 800071c:	6839      	ldr	r1, [r7, #0]
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <NRF24_write_registerN+0x4c>)
 8000720:	f002 fe1d 	bl	800335e <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000724:	2001      	movs	r0, #1
 8000726:	f7ff ff2d 	bl	8000584 <NRF24_csn>
}
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000098 	.word	0x20000098

08000738 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 800073c:	21ff      	movs	r1, #255	; 0xff
 800073e:	20e1      	movs	r0, #225	; 0xe1
 8000740:	f7ff ffb0 	bl	80006a4 <NRF24_write_register>
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 800074c:	21ff      	movs	r1, #255	; 0xff
 800074e:	20e2      	movs	r0, #226	; 0xe2
 8000750:	f7ff ffa8 	bl	80006a4 <NRF24_write_register>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <NRF24_begin>:
	return statReg;
}

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000758:	b082      	sub	sp, #8
 800075a:	b580      	push	{r7, lr}
 800075c:	b084      	sub	sp, #16
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
 8000762:	61fb      	str	r3, [r7, #28]
 8000764:	460b      	mov	r3, r1
 8000766:	807b      	strh	r3, [r7, #2]
 8000768:	4613      	mov	r3, r2
 800076a:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 800076c:	4b66      	ldr	r3, [pc, #408]	; (8000908 <NRF24_begin+0x1b0>)
 800076e:	4618      	mov	r0, r3
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	2264      	movs	r2, #100	; 0x64
 8000776:	4619      	mov	r1, r3
 8000778:	f004 f946 	bl	8004a08 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 800077c:	4a63      	ldr	r2, [pc, #396]	; (800090c <NRF24_begin+0x1b4>)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000782:	4a63      	ldr	r2, [pc, #396]	; (8000910 <NRF24_begin+0x1b8>)
 8000784:	887b      	ldrh	r3, [r7, #2]
 8000786:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000788:	4a62      	ldr	r2, [pc, #392]	; (8000914 <NRF24_begin+0x1bc>)
 800078a:	883b      	ldrh	r3, [r7, #0]
 800078c:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 800078e:	2001      	movs	r0, #1
 8000790:	f7ff fef8 	bl	8000584 <NRF24_csn>
	NRF24_ce(0);
 8000794:	2000      	movs	r0, #0
 8000796:	f7ff ff15 	bl	80005c4 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800079a:	2005      	movs	r0, #5
 800079c:	f001 f92c 	bl	80019f8 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 80007a0:	2108      	movs	r1, #8
 80007a2:	2000      	movs	r0, #0
 80007a4:	f7ff ff7e 	bl	80006a4 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80007a8:	213f      	movs	r1, #63	; 0x3f
 80007aa:	2001      	movs	r0, #1
 80007ac:	f7ff ff7a 	bl	80006a4 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 80007b0:	2103      	movs	r1, #3
 80007b2:	2002      	movs	r0, #2
 80007b4:	f7ff ff76 	bl	80006a4 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80007b8:	2103      	movs	r1, #3
 80007ba:	2003      	movs	r0, #3
 80007bc:	f7ff ff72 	bl	80006a4 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80007c0:	2103      	movs	r1, #3
 80007c2:	2004      	movs	r0, #4
 80007c4:	f7ff ff6e 	bl	80006a4 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80007c8:	2102      	movs	r1, #2
 80007ca:	2005      	movs	r0, #5
 80007cc:	f7ff ff6a 	bl	80006a4 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80007d0:	210f      	movs	r1, #15
 80007d2:	2006      	movs	r0, #6
 80007d4:	f7ff ff66 	bl	80006a4 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80007d8:	210e      	movs	r1, #14
 80007da:	2007      	movs	r0, #7
 80007dc:	f7ff ff62 	bl	80006a4 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80007e0:	2100      	movs	r1, #0
 80007e2:	2008      	movs	r0, #8
 80007e4:	f7ff ff5e 	bl	80006a4 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80007e8:	2100      	movs	r1, #0
 80007ea:	2009      	movs	r0, #9
 80007ec:	f7ff ff5a 	bl	80006a4 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80007f0:	23e7      	movs	r3, #231	; 0xe7
 80007f2:	733b      	strb	r3, [r7, #12]
 80007f4:	23e7      	movs	r3, #231	; 0xe7
 80007f6:	72fb      	strb	r3, [r7, #11]
 80007f8:	23e7      	movs	r3, #231	; 0xe7
 80007fa:	72bb      	strb	r3, [r7, #10]
 80007fc:	23e7      	movs	r3, #231	; 0xe7
 80007fe:	727b      	strb	r3, [r7, #9]
 8000800:	23e7      	movs	r3, #231	; 0xe7
 8000802:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	2205      	movs	r2, #5
 800080a:	4619      	mov	r1, r3
 800080c:	200a      	movs	r0, #10
 800080e:	f7ff ff6b 	bl	80006e8 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8000812:	23c2      	movs	r3, #194	; 0xc2
 8000814:	733b      	strb	r3, [r7, #12]
 8000816:	23c2      	movs	r3, #194	; 0xc2
 8000818:	72fb      	strb	r3, [r7, #11]
 800081a:	23c2      	movs	r3, #194	; 0xc2
 800081c:	72bb      	strb	r3, [r7, #10]
 800081e:	23c2      	movs	r3, #194	; 0xc2
 8000820:	727b      	strb	r3, [r7, #9]
 8000822:	23c2      	movs	r3, #194	; 0xc2
 8000824:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000826:	f107 0308 	add.w	r3, r7, #8
 800082a:	2205      	movs	r2, #5
 800082c:	4619      	mov	r1, r3
 800082e:	200b      	movs	r0, #11
 8000830:	f7ff ff5a 	bl	80006e8 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000834:	21c3      	movs	r1, #195	; 0xc3
 8000836:	200c      	movs	r0, #12
 8000838:	f7ff ff34 	bl	80006a4 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 800083c:	21c4      	movs	r1, #196	; 0xc4
 800083e:	200d      	movs	r0, #13
 8000840:	f7ff ff30 	bl	80006a4 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000844:	21c5      	movs	r1, #197	; 0xc5
 8000846:	200e      	movs	r0, #14
 8000848:	f7ff ff2c 	bl	80006a4 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 800084c:	21c6      	movs	r1, #198	; 0xc6
 800084e:	200f      	movs	r0, #15
 8000850:	f7ff ff28 	bl	80006a4 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000854:	23e7      	movs	r3, #231	; 0xe7
 8000856:	733b      	strb	r3, [r7, #12]
 8000858:	23e7      	movs	r3, #231	; 0xe7
 800085a:	72fb      	strb	r3, [r7, #11]
 800085c:	23e7      	movs	r3, #231	; 0xe7
 800085e:	72bb      	strb	r3, [r7, #10]
 8000860:	23e7      	movs	r3, #231	; 0xe7
 8000862:	727b      	strb	r3, [r7, #9]
 8000864:	23e7      	movs	r3, #231	; 0xe7
 8000866:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	2205      	movs	r2, #5
 800086e:	4619      	mov	r1, r3
 8000870:	2010      	movs	r0, #16
 8000872:	f7ff ff39 	bl	80006e8 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000876:	2100      	movs	r1, #0
 8000878:	2011      	movs	r0, #17
 800087a:	f7ff ff13 	bl	80006a4 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800087e:	2100      	movs	r1, #0
 8000880:	2012      	movs	r0, #18
 8000882:	f7ff ff0f 	bl	80006a4 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000886:	2100      	movs	r1, #0
 8000888:	2013      	movs	r0, #19
 800088a:	f7ff ff0b 	bl	80006a4 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 800088e:	2100      	movs	r1, #0
 8000890:	2014      	movs	r0, #20
 8000892:	f7ff ff07 	bl	80006a4 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000896:	2100      	movs	r1, #0
 8000898:	2015      	movs	r0, #21
 800089a:	f7ff ff03 	bl	80006a4 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 800089e:	2100      	movs	r1, #0
 80008a0:	2016      	movs	r0, #22
 80008a2:	f7ff feff 	bl	80006a4 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 80008a6:	f000 f957 	bl	8000b58 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80008aa:	2100      	movs	r1, #0
 80008ac:	201c      	movs	r0, #28
 80008ae:	f7ff fef9 	bl	80006a4 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80008b2:	2100      	movs	r1, #0
 80008b4:	201d      	movs	r0, #29
 80008b6:	f7ff fef5 	bl	80006a4 <NRF24_write_register>
	printRadioSettings();
 80008ba:	f000 f967 	bl	8000b8c <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80008be:	210f      	movs	r1, #15
 80008c0:	200f      	movs	r0, #15
 80008c2:	f000 f829 	bl	8000918 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 80008c6:	2003      	movs	r0, #3
 80008c8:	f000 f886 	bl	80009d8 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80008cc:	2001      	movs	r0, #1
 80008ce:	f000 f8bd 	bl	8000a4c <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80008d2:	2002      	movs	r0, #2
 80008d4:	f000 f900 	bl	8000ad8 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80008d8:	f000 f866 	bl	80009a8 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80008dc:	2020      	movs	r0, #32
 80008de:	f000 f84b 	bl	8000978 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 80008e2:	f000 f930 	bl	8000b46 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80008e6:	204c      	movs	r0, #76	; 0x4c
 80008e8:	f000 f831 	bl	800094e <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80008ec:	f7ff ff24 	bl	8000738 <NRF24_flush_tx>
	NRF24_flush_rx();
 80008f0:	f7ff ff2a 	bl	8000748 <NRF24_flush_rx>

	NRF24_powerDown();
 80008f4:	f000 f918 	bl	8000b28 <NRF24_powerDown>

}
 80008f8:	bf00      	nop
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000902:	b002      	add	sp, #8
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	20000098 	.word	0x20000098
 800090c:	20000090 	.word	0x20000090
 8000910:	20000094 	.word	0x20000094
 8000914:	20000096 	.word	0x20000096

08000918 <NRF24_setRetries>:
	}

}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	460a      	mov	r2, r1
 8000922:	71fb      	strb	r3, [r7, #7]
 8000924:	4613      	mov	r3, r2
 8000926:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	011b      	lsls	r3, r3, #4
 800092c:	b25a      	sxtb	r2, r3
 800092e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000932:	f003 030f 	and.w	r3, r3, #15
 8000936:	b25b      	sxtb	r3, r3
 8000938:	4313      	orrs	r3, r2
 800093a:	b25b      	sxtb	r3, r3
 800093c:	b2db      	uxtb	r3, r3
 800093e:	4619      	mov	r1, r3
 8000940:	2004      	movs	r0, #4
 8000942:	f7ff feaf 	bl	80006a4 <NRF24_write_register>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b084      	sub	sp, #16
 8000952:	af00      	add	r7, sp, #0
 8000954:	4603      	mov	r3, r0
 8000956:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000958:	237f      	movs	r3, #127	; 0x7f
 800095a:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 800095c:	7bfa      	ldrb	r2, [r7, #15]
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	4293      	cmp	r3, r2
 8000962:	bf28      	it	cs
 8000964:	4613      	movcs	r3, r2
 8000966:	b2db      	uxtb	r3, r3
 8000968:	4619      	mov	r1, r3
 800096a:	2005      	movs	r0, #5
 800096c:	f7ff fe9a 	bl	80006a4 <NRF24_write_register>
}
 8000970:	bf00      	nop
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000982:	2320      	movs	r3, #32
 8000984:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000986:	7bfa      	ldrb	r2, [r7, #15]
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	4293      	cmp	r3, r2
 800098c:	bf28      	it	cs
 800098e:	4613      	movcs	r3, r2
 8000990:	b2da      	uxtb	r2, r3
 8000992:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <NRF24_setPayloadSize+0x2c>)
 8000994:	701a      	strb	r2, [r3, #0]
}
 8000996:	bf00      	nop
 8000998:	3714      	adds	r7, #20
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	2000008c 	.word	0x2000008c

080009a8 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 80009ac:	201d      	movs	r0, #29
 80009ae:	f7ff fe29 	bl	8000604 <NRF24_read_register>
 80009b2:	4603      	mov	r3, r0
 80009b4:	f023 0304 	bic.w	r3, r3, #4
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	4619      	mov	r1, r3
 80009bc:	201d      	movs	r0, #29
 80009be:	f7ff fe71 	bl	80006a4 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 80009c2:	2100      	movs	r1, #0
 80009c4:	201c      	movs	r0, #28
 80009c6:	f7ff fe6d 	bl	80006a4 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 80009ca:	4b02      	ldr	r3, [pc, #8]	; (80009d4 <NRF24_disableDynamicPayloads+0x2c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	701a      	strb	r2, [r3, #0]
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	2000008d 	.word	0x2000008d

080009d8 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80009e2:	2006      	movs	r0, #6
 80009e4:	f7ff fe0e 	bl	8000604 <NRF24_read_register>
 80009e8:	4603      	mov	r3, r0
 80009ea:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
 80009ee:	f023 0306 	bic.w	r3, r3, #6
 80009f2:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	2b03      	cmp	r3, #3
 80009f8:	d104      	bne.n	8000a04 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	f043 0306 	orr.w	r3, r3, #6
 8000a00:	73fb      	strb	r3, [r7, #15]
 8000a02:	e019      	b.n	8000a38 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d104      	bne.n	8000a14 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000a0a:	7bfb      	ldrb	r3, [r7, #15]
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	73fb      	strb	r3, [r7, #15]
 8000a12:	e011      	b.n	8000a38 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d104      	bne.n	8000a24 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000a1a:	7bfb      	ldrb	r3, [r7, #15]
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	73fb      	strb	r3, [r7, #15]
 8000a22:	e009      	b.n	8000a38 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d006      	beq.n	8000a38 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b04      	cmp	r3, #4
 8000a2e:	d103      	bne.n	8000a38 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	f043 0306 	orr.w	r3, r3, #6
 8000a36:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	2006      	movs	r0, #6
 8000a3e:	f7ff fe31 	bl	80006a4 <NRF24_write_register>
}
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000a56:	2300      	movs	r3, #0
 8000a58:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000a5a:	2006      	movs	r0, #6
 8000a5c:	f7ff fdd2 	bl	8000604 <NRF24_read_register>
 8000a60:	4603      	mov	r3, r0
 8000a62:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000a64:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <NRF24_setDataRate+0x88>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000a6a:	7bbb      	ldrb	r3, [r7, #14]
 8000a6c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000a70:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	2b02      	cmp	r3, #2
 8000a76:	d107      	bne.n	8000a88 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000a78:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <NRF24_setDataRate+0x88>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000a7e:	7bbb      	ldrb	r3, [r7, #14]
 8000a80:	f043 0320 	orr.w	r3, r3, #32
 8000a84:	73bb      	strb	r3, [r7, #14]
 8000a86:	e00d      	b.n	8000aa4 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d107      	bne.n	8000a9e <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <NRF24_setDataRate+0x88>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000a94:	7bbb      	ldrb	r3, [r7, #14]
 8000a96:	f043 0308 	orr.w	r3, r3, #8
 8000a9a:	73bb      	strb	r3, [r7, #14]
 8000a9c:	e002      	b.n	8000aa4 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <NRF24_setDataRate+0x88>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000aa4:	7bbb      	ldrb	r3, [r7, #14]
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	2006      	movs	r0, #6
 8000aaa:	f7ff fdfb 	bl	80006a4 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000aae:	2006      	movs	r0, #6
 8000ab0:	f7ff fda8 	bl	8000604 <NRF24_read_register>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	7bbb      	ldrb	r3, [r7, #14]
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d102      	bne.n	8000ac4 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	73fb      	strb	r3, [r7, #15]
 8000ac2:	e002      	b.n	8000aca <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000ac4:	4b03      	ldr	r3, [pc, #12]	; (8000ad4 <NRF24_setDataRate+0x88>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	2000008e 	.word	0x2000008e

08000ad8 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f7ff fd8e 	bl	8000604 <NRF24_read_register>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	f023 030c 	bic.w	r3, r3, #12
 8000aee:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d00f      	beq.n	8000b16 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d104      	bne.n	8000b06 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	f043 0308 	orr.w	r3, r3, #8
 8000b02:	73fb      	strb	r3, [r7, #15]
 8000b04:	e007      	b.n	8000b16 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	f043 0308 	orr.w	r3, r3, #8
 8000b0c:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f7ff fdc2 	bl	80006a4 <NRF24_write_register>
}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f7ff fd69 	bl	8000604 <NRF24_read_register>
 8000b32:	4603      	mov	r3, r0
 8000b34:	f023 0302 	bic.w	r3, r3, #2
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f7ff fdb1 	bl	80006a4 <NRF24_write_register>
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000b4a:	2170      	movs	r1, #112	; 0x70
 8000b4c:	2007      	movs	r0, #7
 8000b4e:	f7ff fda9 	bl	80006a4 <NRF24_write_register>
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f7ff fd10 	bl	8000584 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000b64:	2350      	movs	r3, #80	; 0x50
 8000b66:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000b68:	2373      	movs	r3, #115	; 0x73
 8000b6a:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000b6c:	1d39      	adds	r1, r7, #4
 8000b6e:	2364      	movs	r3, #100	; 0x64
 8000b70:	2202      	movs	r2, #2
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <NRF24_ACTIVATE_cmd+0x30>)
 8000b74:	f002 fbf3 	bl	800335e <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f7ff fd03 	bl	8000584 <NRF24_csn>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000098 	.word	0x20000098

08000b8c <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b8e:	b0a1      	sub	sp, #132	; 0x84
 8000b90:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	49c3      	ldr	r1, [pc, #780]	; (8000ea4 <printRadioSettings+0x318>)
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f003 ff4b 	bl	8004a34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000b9e:	f107 0308 	add.w	r3, r7, #8
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fb14 	bl	80001d0 <strlen>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	f107 0108 	add.w	r1, r7, #8
 8000bb0:	230a      	movs	r3, #10
 8000bb2:	48bd      	ldr	r0, [pc, #756]	; (8000ea8 <printRadioSettings+0x31c>)
 8000bb4:	f003 fa8e 	bl	80040d4 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f7ff fd23 	bl	8000604 <NRF24_read_register>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000bc4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000bc8:	f003 0308 	and.w	r3, r3, #8
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d013      	beq.n	8000bf8 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000bd0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000bd4:	f003 0304 	and.w	r3, r3, #4
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d006      	beq.n	8000bea <printRadioSettings+0x5e>
 8000bdc:	f107 0308 	add.w	r3, r7, #8
 8000be0:	49b2      	ldr	r1, [pc, #712]	; (8000eac <printRadioSettings+0x320>)
 8000be2:	4618      	mov	r0, r3
 8000be4:	f003 ff26 	bl	8004a34 <siprintf>
 8000be8:	e00c      	b.n	8000c04 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8000bea:	f107 0308 	add.w	r3, r7, #8
 8000bee:	49b0      	ldr	r1, [pc, #704]	; (8000eb0 <printRadioSettings+0x324>)
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f003 ff1f 	bl	8004a34 <siprintf>
 8000bf6:	e005      	b.n	8000c04 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000bf8:	f107 0308 	add.w	r3, r7, #8
 8000bfc:	49ad      	ldr	r1, [pc, #692]	; (8000eb4 <printRadioSettings+0x328>)
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f003 ff18 	bl	8004a34 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000c04:	f107 0308 	add.w	r3, r7, #8
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fae1 	bl	80001d0 <strlen>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	f107 0108 	add.w	r1, r7, #8
 8000c16:	230a      	movs	r3, #10
 8000c18:	48a3      	ldr	r0, [pc, #652]	; (8000ea8 <printRadioSettings+0x31c>)
 8000c1a:	f003 fa5b 	bl	80040d4 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f7ff fcf0 	bl	8000604 <NRF24_read_register>
 8000c24:	4603      	mov	r3, r0
 8000c26:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000c2a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c2e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	bfcc      	ite	gt
 8000c36:	2301      	movgt	r3, #1
 8000c38:	2300      	movle	r3, #0
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000c3e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c42:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	bfcc      	ite	gt
 8000c4a:	2301      	movgt	r3, #1
 8000c4c:	2300      	movle	r3, #0
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000c52:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c56:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	bfcc      	ite	gt
 8000c5e:	2301      	movgt	r3, #1
 8000c60:	2300      	movle	r3, #0
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000c66:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c6a:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	bfcc      	ite	gt
 8000c72:	2301      	movgt	r3, #1
 8000c74:	2300      	movle	r3, #0
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000c7a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c7e:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	bfcc      	ite	gt
 8000c86:	2301      	movgt	r3, #1
 8000c88:	2300      	movle	r3, #0
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000c8e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c92:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	bfcc      	ite	gt
 8000c9a:	2301      	movgt	r3, #1
 8000c9c:	2300      	movle	r3, #0
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	f107 0008 	add.w	r0, r7, #8
 8000ca4:	9303      	str	r3, [sp, #12]
 8000ca6:	9402      	str	r4, [sp, #8]
 8000ca8:	9101      	str	r1, [sp, #4]
 8000caa:	9200      	str	r2, [sp, #0]
 8000cac:	4633      	mov	r3, r6
 8000cae:	462a      	mov	r2, r5
 8000cb0:	4981      	ldr	r1, [pc, #516]	; (8000eb8 <printRadioSettings+0x32c>)
 8000cb2:	f003 febf 	bl	8004a34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000cb6:	f107 0308 	add.w	r3, r7, #8
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fa88 	bl	80001d0 <strlen>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	b29a      	uxth	r2, r3
 8000cc4:	f107 0108 	add.w	r1, r7, #8
 8000cc8:	230a      	movs	r3, #10
 8000cca:	4877      	ldr	r0, [pc, #476]	; (8000ea8 <printRadioSettings+0x31c>)
 8000ccc:	f003 fa02 	bl	80040d4 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8000cd0:	2002      	movs	r0, #2
 8000cd2:	f7ff fc97 	bl	8000604 <NRF24_read_register>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000cdc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ce0:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	bfcc      	ite	gt
 8000ce8:	2301      	movgt	r3, #1
 8000cea:	2300      	movle	r3, #0
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000cf0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cf4:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	bfcc      	ite	gt
 8000cfc:	2301      	movgt	r3, #1
 8000cfe:	2300      	movle	r3, #0
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d04:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d08:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	bfcc      	ite	gt
 8000d10:	2301      	movgt	r3, #1
 8000d12:	2300      	movle	r3, #0
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d18:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d1c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	bfcc      	ite	gt
 8000d24:	2301      	movgt	r3, #1
 8000d26:	2300      	movle	r3, #0
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d2c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d30:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	bfcc      	ite	gt
 8000d38:	2301      	movgt	r3, #1
 8000d3a:	2300      	movle	r3, #0
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d40:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d44:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	bfcc      	ite	gt
 8000d4c:	2301      	movgt	r3, #1
 8000d4e:	2300      	movle	r3, #0
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	f107 0008 	add.w	r0, r7, #8
 8000d56:	9303      	str	r3, [sp, #12]
 8000d58:	9402      	str	r4, [sp, #8]
 8000d5a:	9101      	str	r1, [sp, #4]
 8000d5c:	9200      	str	r2, [sp, #0]
 8000d5e:	4633      	mov	r3, r6
 8000d60:	462a      	mov	r2, r5
 8000d62:	4956      	ldr	r1, [pc, #344]	; (8000ebc <printRadioSettings+0x330>)
 8000d64:	f003 fe66 	bl	8004a34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000d68:	f107 0308 	add.w	r3, r7, #8
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fa2f 	bl	80001d0 <strlen>
 8000d72:	4603      	mov	r3, r0
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	f107 0108 	add.w	r1, r7, #8
 8000d7a:	230a      	movs	r3, #10
 8000d7c:	484a      	ldr	r0, [pc, #296]	; (8000ea8 <printRadioSettings+0x31c>)
 8000d7e:	f003 f9a9 	bl	80040d4 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8000d82:	2003      	movs	r0, #3
 8000d84:	f7ff fc3e 	bl	8000604 <NRF24_read_register>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	f003 0303 	and.w	r3, r3, #3
 8000d8e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8000d92:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d96:	3302      	adds	r3, #2
 8000d98:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8000d9c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000da0:	f107 0308 	add.w	r3, r7, #8
 8000da4:	4946      	ldr	r1, [pc, #280]	; (8000ec0 <printRadioSettings+0x334>)
 8000da6:	4618      	mov	r0, r3
 8000da8:	f003 fe44 	bl	8004a34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000dac:	f107 0308 	add.w	r3, r7, #8
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fa0d 	bl	80001d0 <strlen>
 8000db6:	4603      	mov	r3, r0
 8000db8:	b29a      	uxth	r2, r3
 8000dba:	f107 0108 	add.w	r1, r7, #8
 8000dbe:	230a      	movs	r3, #10
 8000dc0:	4839      	ldr	r0, [pc, #228]	; (8000ea8 <printRadioSettings+0x31c>)
 8000dc2:	f003 f987 	bl	80040d4 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8000dc6:	2005      	movs	r0, #5
 8000dc8:	f7ff fc1c 	bl	8000604 <NRF24_read_register>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8000dd2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000dd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000dda:	f107 0308 	add.w	r3, r7, #8
 8000dde:	4939      	ldr	r1, [pc, #228]	; (8000ec4 <printRadioSettings+0x338>)
 8000de0:	4618      	mov	r0, r3
 8000de2:	f003 fe27 	bl	8004a34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff f9f0 	bl	80001d0 <strlen>
 8000df0:	4603      	mov	r3, r0
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	f107 0108 	add.w	r1, r7, #8
 8000df8:	230a      	movs	r3, #10
 8000dfa:	482b      	ldr	r0, [pc, #172]	; (8000ea8 <printRadioSettings+0x31c>)
 8000dfc:	f003 f96a 	bl	80040d4 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8000e00:	2006      	movs	r0, #6
 8000e02:	f7ff fbff 	bl	8000604 <NRF24_read_register>
 8000e06:	4603      	mov	r3, r0
 8000e08:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8000e0c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e10:	f003 0308 	and.w	r3, r3, #8
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d006      	beq.n	8000e26 <printRadioSettings+0x29a>
 8000e18:	f107 0308 	add.w	r3, r7, #8
 8000e1c:	492a      	ldr	r1, [pc, #168]	; (8000ec8 <printRadioSettings+0x33c>)
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f003 fe08 	bl	8004a34 <siprintf>
 8000e24:	e005      	b.n	8000e32 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8000e26:	f107 0308 	add.w	r3, r7, #8
 8000e2a:	4928      	ldr	r1, [pc, #160]	; (8000ecc <printRadioSettings+0x340>)
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f003 fe01 	bl	8004a34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e32:	f107 0308 	add.w	r3, r7, #8
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff f9ca 	bl	80001d0 <strlen>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	f107 0108 	add.w	r1, r7, #8
 8000e44:	230a      	movs	r3, #10
 8000e46:	4818      	ldr	r0, [pc, #96]	; (8000ea8 <printRadioSettings+0x31c>)
 8000e48:	f003 f944 	bl	80040d4 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8000e4c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e50:	f003 0306 	and.w	r3, r3, #6
 8000e54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8000e58:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e5c:	085b      	lsrs	r3, r3, #1
 8000e5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8000e62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d106      	bne.n	8000e78 <printRadioSettings+0x2ec>
 8000e6a:	f107 0308 	add.w	r3, r7, #8
 8000e6e:	4918      	ldr	r1, [pc, #96]	; (8000ed0 <printRadioSettings+0x344>)
 8000e70:	4618      	mov	r0, r3
 8000e72:	f003 fddf 	bl	8004a34 <siprintf>
 8000e76:	e03b      	b.n	8000ef0 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8000e78:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d106      	bne.n	8000e8e <printRadioSettings+0x302>
 8000e80:	f107 0308 	add.w	r3, r7, #8
 8000e84:	4913      	ldr	r1, [pc, #76]	; (8000ed4 <printRadioSettings+0x348>)
 8000e86:	4618      	mov	r0, r3
 8000e88:	f003 fdd4 	bl	8004a34 <siprintf>
 8000e8c:	e030      	b.n	8000ef0 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8000e8e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d122      	bne.n	8000edc <printRadioSettings+0x350>
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	490f      	ldr	r1, [pc, #60]	; (8000ed8 <printRadioSettings+0x34c>)
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f003 fdc9 	bl	8004a34 <siprintf>
 8000ea2:	e025      	b.n	8000ef0 <printRadioSettings+0x364>
 8000ea4:	0800530c 	.word	0x0800530c
 8000ea8:	200000fc 	.word	0x200000fc
 8000eac:	08005340 	.word	0x08005340
 8000eb0:	0800535c 	.word	0x0800535c
 8000eb4:	08005378 	.word	0x08005378
 8000eb8:	0800538c 	.word	0x0800538c
 8000ebc:	080053d0 	.word	0x080053d0
 8000ec0:	0800541c 	.word	0x0800541c
 8000ec4:	08005438 	.word	0x08005438
 8000ec8:	0800544c 	.word	0x0800544c
 8000ecc:	08005464 	.word	0x08005464
 8000ed0:	0800547c 	.word	0x0800547c
 8000ed4:	08005490 	.word	0x08005490
 8000ed8:	080054a4 	.word	0x080054a4
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8000edc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d105      	bne.n	8000ef0 <printRadioSettings+0x364>
 8000ee4:	f107 0308 	add.w	r3, r7, #8
 8000ee8:	49d7      	ldr	r1, [pc, #860]	; (8001248 <printRadioSettings+0x6bc>)
 8000eea:	4618      	mov	r0, r3
 8000eec:	f003 fda2 	bl	8004a34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ef0:	f107 0308 	add.w	r3, r7, #8
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff f96b 	bl	80001d0 <strlen>
 8000efa:	4603      	mov	r3, r0
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	f107 0108 	add.w	r1, r7, #8
 8000f02:	230a      	movs	r3, #10
 8000f04:	48d1      	ldr	r0, [pc, #836]	; (800124c <printRadioSettings+0x6c0>)
 8000f06:	f003 f8e5 	bl	80040d4 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	2205      	movs	r2, #5
 8000f0e:	4619      	mov	r1, r3
 8000f10:	200a      	movs	r0, #10
 8000f12:	f7ff fb9f 	bl	8000654 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000f16:	793b      	ldrb	r3, [r7, #4]
 8000f18:	461c      	mov	r4, r3
 8000f1a:	78fb      	ldrb	r3, [r7, #3]
 8000f1c:	461d      	mov	r5, r3
 8000f1e:	78bb      	ldrb	r3, [r7, #2]
 8000f20:	787a      	ldrb	r2, [r7, #1]
 8000f22:	7839      	ldrb	r1, [r7, #0]
 8000f24:	f107 0008 	add.w	r0, r7, #8
 8000f28:	9102      	str	r1, [sp, #8]
 8000f2a:	9201      	str	r2, [sp, #4]
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	462b      	mov	r3, r5
 8000f30:	4622      	mov	r2, r4
 8000f32:	49c7      	ldr	r1, [pc, #796]	; (8001250 <printRadioSettings+0x6c4>)
 8000f34:	f003 fd7e 	bl	8004a34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f38:	f107 0308 	add.w	r3, r7, #8
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff f947 	bl	80001d0 <strlen>
 8000f42:	4603      	mov	r3, r0
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	f107 0108 	add.w	r1, r7, #8
 8000f4a:	230a      	movs	r3, #10
 8000f4c:	48bf      	ldr	r0, [pc, #764]	; (800124c <printRadioSettings+0x6c0>)
 8000f4e:	f003 f8c1 	bl	80040d4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8000f52:	463b      	mov	r3, r7
 8000f54:	2205      	movs	r2, #5
 8000f56:	4619      	mov	r1, r3
 8000f58:	200b      	movs	r0, #11
 8000f5a:	f7ff fb7b 	bl	8000654 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000f5e:	793b      	ldrb	r3, [r7, #4]
 8000f60:	461c      	mov	r4, r3
 8000f62:	78fb      	ldrb	r3, [r7, #3]
 8000f64:	461d      	mov	r5, r3
 8000f66:	78bb      	ldrb	r3, [r7, #2]
 8000f68:	787a      	ldrb	r2, [r7, #1]
 8000f6a:	7839      	ldrb	r1, [r7, #0]
 8000f6c:	f107 0008 	add.w	r0, r7, #8
 8000f70:	9102      	str	r1, [sp, #8]
 8000f72:	9201      	str	r2, [sp, #4]
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	462b      	mov	r3, r5
 8000f78:	4622      	mov	r2, r4
 8000f7a:	49b6      	ldr	r1, [pc, #728]	; (8001254 <printRadioSettings+0x6c8>)
 8000f7c:	f003 fd5a 	bl	8004a34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f80:	f107 0308 	add.w	r3, r7, #8
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff f923 	bl	80001d0 <strlen>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	f107 0108 	add.w	r1, r7, #8
 8000f92:	230a      	movs	r3, #10
 8000f94:	48ad      	ldr	r0, [pc, #692]	; (800124c <printRadioSettings+0x6c0>)
 8000f96:	f003 f89d 	bl	80040d4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	200c      	movs	r0, #12
 8000fa2:	f7ff fb57 	bl	8000654 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000fa6:	783b      	ldrb	r3, [r7, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	f107 0308 	add.w	r3, r7, #8
 8000fae:	49aa      	ldr	r1, [pc, #680]	; (8001258 <printRadioSettings+0x6cc>)
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f003 fd3f 	bl	8004a34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff f908 	bl	80001d0 <strlen>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	f107 0108 	add.w	r1, r7, #8
 8000fc8:	230a      	movs	r3, #10
 8000fca:	48a0      	ldr	r0, [pc, #640]	; (800124c <printRadioSettings+0x6c0>)
 8000fcc:	f003 f882 	bl	80040d4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	200d      	movs	r0, #13
 8000fd8:	f7ff fb3c 	bl	8000654 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000fdc:	783b      	ldrb	r3, [r7, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	f107 0308 	add.w	r3, r7, #8
 8000fe4:	499d      	ldr	r1, [pc, #628]	; (800125c <printRadioSettings+0x6d0>)
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f003 fd24 	bl	8004a34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000fec:	f107 0308 	add.w	r3, r7, #8
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff f8ed 	bl	80001d0 <strlen>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	f107 0108 	add.w	r1, r7, #8
 8000ffe:	230a      	movs	r3, #10
 8001000:	4892      	ldr	r0, [pc, #584]	; (800124c <printRadioSettings+0x6c0>)
 8001002:	f003 f867 	bl	80040d4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001006:	463b      	mov	r3, r7
 8001008:	2201      	movs	r2, #1
 800100a:	4619      	mov	r1, r3
 800100c:	200e      	movs	r0, #14
 800100e:	f7ff fb21 	bl	8000654 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001012:	783b      	ldrb	r3, [r7, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	f107 0308 	add.w	r3, r7, #8
 800101a:	4991      	ldr	r1, [pc, #580]	; (8001260 <printRadioSettings+0x6d4>)
 800101c:	4618      	mov	r0, r3
 800101e:	f003 fd09 	bl	8004a34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001022:	f107 0308 	add.w	r3, r7, #8
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff f8d2 	bl	80001d0 <strlen>
 800102c:	4603      	mov	r3, r0
 800102e:	b29a      	uxth	r2, r3
 8001030:	f107 0108 	add.w	r1, r7, #8
 8001034:	230a      	movs	r3, #10
 8001036:	4885      	ldr	r0, [pc, #532]	; (800124c <printRadioSettings+0x6c0>)
 8001038:	f003 f84c 	bl	80040d4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 800103c:	463b      	mov	r3, r7
 800103e:	2201      	movs	r2, #1
 8001040:	4619      	mov	r1, r3
 8001042:	200f      	movs	r0, #15
 8001044:	f7ff fb06 	bl	8000654 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001048:	783b      	ldrb	r3, [r7, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	f107 0308 	add.w	r3, r7, #8
 8001050:	4984      	ldr	r1, [pc, #528]	; (8001264 <printRadioSettings+0x6d8>)
 8001052:	4618      	mov	r0, r3
 8001054:	f003 fcee 	bl	8004a34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff f8b7 	bl	80001d0 <strlen>
 8001062:	4603      	mov	r3, r0
 8001064:	b29a      	uxth	r2, r3
 8001066:	f107 0108 	add.w	r1, r7, #8
 800106a:	230a      	movs	r3, #10
 800106c:	4877      	ldr	r0, [pc, #476]	; (800124c <printRadioSettings+0x6c0>)
 800106e:	f003 f831 	bl	80040d4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001072:	463b      	mov	r3, r7
 8001074:	2205      	movs	r2, #5
 8001076:	4619      	mov	r1, r3
 8001078:	2010      	movs	r0, #16
 800107a:	f7ff faeb 	bl	8000654 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800107e:	793b      	ldrb	r3, [r7, #4]
 8001080:	461c      	mov	r4, r3
 8001082:	78fb      	ldrb	r3, [r7, #3]
 8001084:	461d      	mov	r5, r3
 8001086:	78bb      	ldrb	r3, [r7, #2]
 8001088:	787a      	ldrb	r2, [r7, #1]
 800108a:	7839      	ldrb	r1, [r7, #0]
 800108c:	f107 0008 	add.w	r0, r7, #8
 8001090:	9102      	str	r1, [sp, #8]
 8001092:	9201      	str	r2, [sp, #4]
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	462b      	mov	r3, r5
 8001098:	4622      	mov	r2, r4
 800109a:	4973      	ldr	r1, [pc, #460]	; (8001268 <printRadioSettings+0x6dc>)
 800109c:	f003 fcca 	bl	8004a34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010a0:	f107 0308 	add.w	r3, r7, #8
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff f893 	bl	80001d0 <strlen>
 80010aa:	4603      	mov	r3, r0
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	f107 0108 	add.w	r1, r7, #8
 80010b2:	230a      	movs	r3, #10
 80010b4:	4865      	ldr	r0, [pc, #404]	; (800124c <printRadioSettings+0x6c0>)
 80010b6:	f003 f80d 	bl	80040d4 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80010ba:	2011      	movs	r0, #17
 80010bc:	f7ff faa2 	bl	8000604 <NRF24_read_register>
 80010c0:	4603      	mov	r3, r0
 80010c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80010c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80010ce:	f107 0308 	add.w	r3, r7, #8
 80010d2:	4966      	ldr	r1, [pc, #408]	; (800126c <printRadioSettings+0x6e0>)
 80010d4:	4618      	mov	r0, r3
 80010d6:	f003 fcad 	bl	8004a34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff f876 	bl	80001d0 <strlen>
 80010e4:	4603      	mov	r3, r0
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	f107 0108 	add.w	r1, r7, #8
 80010ec:	230a      	movs	r3, #10
 80010ee:	4857      	ldr	r0, [pc, #348]	; (800124c <printRadioSettings+0x6c0>)
 80010f0:	f002 fff0 	bl	80040d4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 80010f4:	2012      	movs	r0, #18
 80010f6:	f7ff fa85 	bl	8000604 <NRF24_read_register>
 80010fa:	4603      	mov	r3, r0
 80010fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001100:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001104:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001108:	f107 0308 	add.w	r3, r7, #8
 800110c:	4958      	ldr	r1, [pc, #352]	; (8001270 <printRadioSettings+0x6e4>)
 800110e:	4618      	mov	r0, r3
 8001110:	f003 fc90 	bl	8004a34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001114:	f107 0308 	add.w	r3, r7, #8
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff f859 	bl	80001d0 <strlen>
 800111e:	4603      	mov	r3, r0
 8001120:	b29a      	uxth	r2, r3
 8001122:	f107 0108 	add.w	r1, r7, #8
 8001126:	230a      	movs	r3, #10
 8001128:	4848      	ldr	r0, [pc, #288]	; (800124c <printRadioSettings+0x6c0>)
 800112a:	f002 ffd3 	bl	80040d4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 800112e:	2013      	movs	r0, #19
 8001130:	f7ff fa68 	bl	8000604 <NRF24_read_register>
 8001134:	4603      	mov	r3, r0
 8001136:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800113a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800113e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	494b      	ldr	r1, [pc, #300]	; (8001274 <printRadioSettings+0x6e8>)
 8001148:	4618      	mov	r0, r3
 800114a:	f003 fc73 	bl	8004a34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800114e:	f107 0308 	add.w	r3, r7, #8
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff f83c 	bl	80001d0 <strlen>
 8001158:	4603      	mov	r3, r0
 800115a:	b29a      	uxth	r2, r3
 800115c:	f107 0108 	add.w	r1, r7, #8
 8001160:	230a      	movs	r3, #10
 8001162:	483a      	ldr	r0, [pc, #232]	; (800124c <printRadioSettings+0x6c0>)
 8001164:	f002 ffb6 	bl	80040d4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 8001168:	2014      	movs	r0, #20
 800116a:	f7ff fa4b 	bl	8000604 <NRF24_read_register>
 800116e:	4603      	mov	r3, r0
 8001170:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001174:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001178:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800117c:	f107 0308 	add.w	r3, r7, #8
 8001180:	493d      	ldr	r1, [pc, #244]	; (8001278 <printRadioSettings+0x6ec>)
 8001182:	4618      	mov	r0, r3
 8001184:	f003 fc56 	bl	8004a34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001188:	f107 0308 	add.w	r3, r7, #8
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f81f 	bl	80001d0 <strlen>
 8001192:	4603      	mov	r3, r0
 8001194:	b29a      	uxth	r2, r3
 8001196:	f107 0108 	add.w	r1, r7, #8
 800119a:	230a      	movs	r3, #10
 800119c:	482b      	ldr	r0, [pc, #172]	; (800124c <printRadioSettings+0x6c0>)
 800119e:	f002 ff99 	bl	80040d4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 80011a2:	2015      	movs	r0, #21
 80011a4:	f7ff fa2e 	bl	8000604 <NRF24_read_register>
 80011a8:	4603      	mov	r3, r0
 80011aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80011ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	4930      	ldr	r1, [pc, #192]	; (800127c <printRadioSettings+0x6f0>)
 80011bc:	4618      	mov	r0, r3
 80011be:	f003 fc39 	bl	8004a34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011c2:	f107 0308 	add.w	r3, r7, #8
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f802 	bl	80001d0 <strlen>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	f107 0108 	add.w	r1, r7, #8
 80011d4:	230a      	movs	r3, #10
 80011d6:	481d      	ldr	r0, [pc, #116]	; (800124c <printRadioSettings+0x6c0>)
 80011d8:	f002 ff7c 	bl	80040d4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 80011dc:	2016      	movs	r0, #22
 80011de:	f7ff fa11 	bl	8000604 <NRF24_read_register>
 80011e2:	4603      	mov	r3, r0
 80011e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80011e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	4922      	ldr	r1, [pc, #136]	; (8001280 <printRadioSettings+0x6f4>)
 80011f6:	4618      	mov	r0, r3
 80011f8:	f003 fc1c 	bl	8004a34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	4618      	mov	r0, r3
 8001202:	f7fe ffe5 	bl	80001d0 <strlen>
 8001206:	4603      	mov	r3, r0
 8001208:	b29a      	uxth	r2, r3
 800120a:	f107 0108 	add.w	r1, r7, #8
 800120e:	230a      	movs	r3, #10
 8001210:	480e      	ldr	r0, [pc, #56]	; (800124c <printRadioSettings+0x6c0>)
 8001212:	f002 ff5f 	bl	80040d4 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001216:	201c      	movs	r0, #28
 8001218:	f7ff f9f4 	bl	8000604 <NRF24_read_register>
 800121c:	4603      	mov	r3, r0
 800121e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001222:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001226:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800122a:	2b00      	cmp	r3, #0
 800122c:	bfcc      	ite	gt
 800122e:	2301      	movgt	r3, #1
 8001230:	2300      	movle	r3, #0
 8001232:	b2db      	uxtb	r3, r3
 8001234:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001236:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800123a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800123e:	2b00      	cmp	r3, #0
 8001240:	bfcc      	ite	gt
 8001242:	2301      	movgt	r3, #1
 8001244:	2300      	movle	r3, #0
 8001246:	e01d      	b.n	8001284 <printRadioSettings+0x6f8>
 8001248:	080054b8 	.word	0x080054b8
 800124c:	200000fc 	.word	0x200000fc
 8001250:	080054cc 	.word	0x080054cc
 8001254:	080054fc 	.word	0x080054fc
 8001258:	0800552c 	.word	0x0800552c
 800125c:	08005554 	.word	0x08005554
 8001260:	0800557c 	.word	0x0800557c
 8001264:	080055a4 	.word	0x080055a4
 8001268:	080055cc 	.word	0x080055cc
 800126c:	080055f8 	.word	0x080055f8
 8001270:	08005614 	.word	0x08005614
 8001274:	08005630 	.word	0x08005630
 8001278:	0800564c 	.word	0x0800564c
 800127c:	08005668 	.word	0x08005668
 8001280:	08005684 	.word	0x08005684
 8001284:	b2db      	uxtb	r3, r3
 8001286:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001288:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800128c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001290:	2b00      	cmp	r3, #0
 8001292:	bfcc      	ite	gt
 8001294:	2301      	movgt	r3, #1
 8001296:	2300      	movle	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800129c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012a0:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	bfcc      	ite	gt
 80012a8:	2301      	movgt	r3, #1
 80012aa:	2300      	movle	r3, #0
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012b4:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	bfcc      	ite	gt
 80012bc:	2301      	movgt	r3, #1
 80012be:	2300      	movle	r3, #0
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012c8:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	bfcc      	ite	gt
 80012d0:	2301      	movgt	r3, #1
 80012d2:	2300      	movle	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	f107 0008 	add.w	r0, r7, #8
 80012da:	9303      	str	r3, [sp, #12]
 80012dc:	9402      	str	r4, [sp, #8]
 80012de:	9101      	str	r1, [sp, #4]
 80012e0:	9200      	str	r2, [sp, #0]
 80012e2:	4633      	mov	r3, r6
 80012e4:	462a      	mov	r2, r5
 80012e6:	4936      	ldr	r1, [pc, #216]	; (80013c0 <printRadioSettings+0x834>)
 80012e8:	f003 fba4 	bl	8004a34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7fe ff6d 	bl	80001d0 <strlen>
 80012f6:	4603      	mov	r3, r0
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	f107 0108 	add.w	r1, r7, #8
 80012fe:	230a      	movs	r3, #10
 8001300:	4830      	ldr	r0, [pc, #192]	; (80013c4 <printRadioSettings+0x838>)
 8001302:	f002 fee7 	bl	80040d4 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001306:	201d      	movs	r0, #29
 8001308:	f7ff f97c 	bl	8000604 <NRF24_read_register>
 800130c:	4603      	mov	r3, r0
 800130e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001312:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	2b00      	cmp	r3, #0
 800131c:	d006      	beq.n	800132c <printRadioSettings+0x7a0>
 800131e:	f107 0308 	add.w	r3, r7, #8
 8001322:	4929      	ldr	r1, [pc, #164]	; (80013c8 <printRadioSettings+0x83c>)
 8001324:	4618      	mov	r0, r3
 8001326:	f003 fb85 	bl	8004a34 <siprintf>
 800132a:	e005      	b.n	8001338 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 800132c:	f107 0308 	add.w	r3, r7, #8
 8001330:	4926      	ldr	r1, [pc, #152]	; (80013cc <printRadioSettings+0x840>)
 8001332:	4618      	mov	r0, r3
 8001334:	f003 fb7e 	bl	8004a34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001338:	f107 0308 	add.w	r3, r7, #8
 800133c:	4618      	mov	r0, r3
 800133e:	f7fe ff47 	bl	80001d0 <strlen>
 8001342:	4603      	mov	r3, r0
 8001344:	b29a      	uxth	r2, r3
 8001346:	f107 0108 	add.w	r1, r7, #8
 800134a:	230a      	movs	r3, #10
 800134c:	481d      	ldr	r0, [pc, #116]	; (80013c4 <printRadioSettings+0x838>)
 800134e:	f002 fec1 	bl	80040d4 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001352:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d006      	beq.n	800136c <printRadioSettings+0x7e0>
 800135e:	f107 0308 	add.w	r3, r7, #8
 8001362:	491b      	ldr	r1, [pc, #108]	; (80013d0 <printRadioSettings+0x844>)
 8001364:	4618      	mov	r0, r3
 8001366:	f003 fb65 	bl	8004a34 <siprintf>
 800136a:	e005      	b.n	8001378 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 800136c:	f107 0308 	add.w	r3, r7, #8
 8001370:	4918      	ldr	r1, [pc, #96]	; (80013d4 <printRadioSettings+0x848>)
 8001372:	4618      	mov	r0, r3
 8001374:	f003 fb5e 	bl	8004a34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001378:	f107 0308 	add.w	r3, r7, #8
 800137c:	4618      	mov	r0, r3
 800137e:	f7fe ff27 	bl	80001d0 <strlen>
 8001382:	4603      	mov	r3, r0
 8001384:	b29a      	uxth	r2, r3
 8001386:	f107 0108 	add.w	r1, r7, #8
 800138a:	230a      	movs	r3, #10
 800138c:	480d      	ldr	r0, [pc, #52]	; (80013c4 <printRadioSettings+0x838>)
 800138e:	f002 fea1 	bl	80040d4 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001392:	f107 0308 	add.w	r3, r7, #8
 8001396:	4910      	ldr	r1, [pc, #64]	; (80013d8 <printRadioSettings+0x84c>)
 8001398:	4618      	mov	r0, r3
 800139a:	f003 fb4b 	bl	8004a34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800139e:	f107 0308 	add.w	r3, r7, #8
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7fe ff14 	bl	80001d0 <strlen>
 80013a8:	4603      	mov	r3, r0
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	f107 0108 	add.w	r1, r7, #8
 80013b0:	230a      	movs	r3, #10
 80013b2:	4804      	ldr	r0, [pc, #16]	; (80013c4 <printRadioSettings+0x838>)
 80013b4:	f002 fe8e 	bl	80040d4 <HAL_UART_Transmit>
}
 80013b8:	bf00      	nop
 80013ba:	3774      	adds	r7, #116	; 0x74
 80013bc:	46bd      	mov	sp, r7
 80013be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013c0:	080056a0 	.word	0x080056a0
 80013c4:	200000fc 	.word	0x200000fc
 80013c8:	080056ec 	.word	0x080056ec
 80013cc:	08005704 	.word	0x08005704
 80013d0:	0800571c 	.word	0x0800571c
 80013d4:	08005738 	.word	0x08005738
 80013d8:	0800530c 	.word	0x0800530c

080013dc <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80013dc:	b084      	sub	sp, #16
 80013de:	b580      	push	{r7, lr}
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	f107 0c08 	add.w	ip, r7, #8
 80013e6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80013ea:	4b07      	ldr	r3, [pc, #28]	; (8001408 <nrf24_DebugUART_Init+0x2c>)
 80013ec:	4618      	mov	r0, r3
 80013ee:	f107 0308 	add.w	r3, r7, #8
 80013f2:	2284      	movs	r2, #132	; 0x84
 80013f4:	4619      	mov	r1, r3
 80013f6:	f003 fb07 	bl	8004a08 <memcpy>
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001402:	b004      	add	sp, #16
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	200000fc 	.word	0x200000fc

0800140c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b09f      	sub	sp, #124	; 0x7c
 8001410:	af1e      	add	r7, sp, #120	; 0x78
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001412:	f000 fa7c 	bl	800190e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001416:	f000 f829 	bl	800146c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800141a:	f000 f8db 	bl	80015d4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800141e:	f000 f86b 	bl	80014f8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001422:	f000 f8a7 	bl	8001574 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  NRF24_begin(GPIOB, CSNpin_Pin, GPIO_PIN_4, hspi1);
 8001426:	4c0e      	ldr	r4, [pc, #56]	; (8001460 <main+0x54>)
 8001428:	4668      	mov	r0, sp
 800142a:	1d23      	adds	r3, r4, #4
 800142c:	2260      	movs	r2, #96	; 0x60
 800142e:	4619      	mov	r1, r3
 8001430:	f003 faea 	bl	8004a08 <memcpy>
 8001434:	6823      	ldr	r3, [r4, #0]
 8001436:	2210      	movs	r2, #16
 8001438:	2108      	movs	r1, #8
 800143a:	480a      	ldr	r0, [pc, #40]	; (8001464 <main+0x58>)
 800143c:	f7ff f98c 	bl	8000758 <NRF24_begin>
  nrf24_DebugUART_Init(huart2);
 8001440:	4c09      	ldr	r4, [pc, #36]	; (8001468 <main+0x5c>)
 8001442:	4668      	mov	r0, sp
 8001444:	f104 0310 	add.w	r3, r4, #16
 8001448:	2274      	movs	r2, #116	; 0x74
 800144a:	4619      	mov	r1, r3
 800144c:	f003 fadc 	bl	8004a08 <memcpy>
 8001450:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001454:	f7ff ffc2 	bl	80013dc <nrf24_DebugUART_Init>

  printRadioSettings();
 8001458:	f7ff fb98 	bl	8000b8c <printRadioSettings>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800145c:	e7fe      	b.n	800145c <main+0x50>
 800145e:	bf00      	nop
 8001460:	20000180 	.word	0x20000180
 8001464:	48000400 	.word	0x48000400
 8001468:	200001e4 	.word	0x200001e4

0800146c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b096      	sub	sp, #88	; 0x58
 8001470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	2244      	movs	r2, #68	; 0x44
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f003 fad2 	bl	8004a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001480:	463b      	mov	r3, r7
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800148e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001492:	f000 fd4b 	bl	8001f2c <HAL_PWREx_ControlVoltageScaling>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800149c:	f000 f8d8 	bl	8001650 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80014a0:	2310      	movs	r3, #16
 80014a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014a4:	2301      	movs	r3, #1
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80014ac:	23b0      	movs	r3, #176	; 0xb0
 80014ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 fd8d 	bl	8001fd8 <HAL_RCC_OscConfig>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80014c4:	f000 f8c4 	bl	8001650 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c8:	230f      	movs	r3, #15
 80014ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80014cc:	2300      	movs	r3, #0
 80014ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014d8:	2300      	movs	r3, #0
 80014da:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014dc:	463b      	mov	r3, r7
 80014de:	2102      	movs	r1, #2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f001 f98d 	bl	8002800 <HAL_RCC_ClockConfig>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80014ec:	f000 f8b0 	bl	8001650 <Error_Handler>
  }
}
 80014f0:	bf00      	nop
 80014f2:	3758      	adds	r7, #88	; 0x58
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <MX_SPI1_Init+0x74>)
 80014fe:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <MX_SPI1_Init+0x78>)
 8001500:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001502:	4b1a      	ldr	r3, [pc, #104]	; (800156c <MX_SPI1_Init+0x74>)
 8001504:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001508:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800150a:	4b18      	ldr	r3, [pc, #96]	; (800156c <MX_SPI1_Init+0x74>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001510:	4b16      	ldr	r3, [pc, #88]	; (800156c <MX_SPI1_Init+0x74>)
 8001512:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001516:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <MX_SPI1_Init+0x74>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <MX_SPI1_Init+0x74>)
 8001520:	2200      	movs	r2, #0
 8001522:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_SPI1_Init+0x74>)
 8001526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800152a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <MX_SPI1_Init+0x74>)
 800152e:	2218      	movs	r2, #24
 8001530:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MX_SPI1_Init+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <MX_SPI1_Init+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <MX_SPI1_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <MX_SPI1_Init+0x74>)
 8001546:	2207      	movs	r2, #7
 8001548:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800154a:	4b08      	ldr	r3, [pc, #32]	; (800156c <MX_SPI1_Init+0x74>)
 800154c:	2200      	movs	r2, #0
 800154e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <MX_SPI1_Init+0x74>)
 8001552:	2208      	movs	r2, #8
 8001554:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001556:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_SPI1_Init+0x74>)
 8001558:	f001 fe5e 	bl	8003218 <HAL_SPI_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001562:	f000 f875 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000180 	.word	0x20000180
 8001570:	40013000 	.word	0x40013000

08001574 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001578:	4b14      	ldr	r3, [pc, #80]	; (80015cc <MX_USART2_UART_Init+0x58>)
 800157a:	4a15      	ldr	r2, [pc, #84]	; (80015d0 <MX_USART2_UART_Init+0x5c>)
 800157c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800157e:	4b13      	ldr	r3, [pc, #76]	; (80015cc <MX_USART2_UART_Init+0x58>)
 8001580:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001584:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <MX_USART2_UART_Init+0x58>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <MX_USART2_UART_Init+0x58>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <MX_USART2_UART_Init+0x58>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <MX_USART2_UART_Init+0x58>)
 800159a:	220c      	movs	r2, #12
 800159c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <MX_USART2_UART_Init+0x58>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a4:	4b09      	ldr	r3, [pc, #36]	; (80015cc <MX_USART2_UART_Init+0x58>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <MX_USART2_UART_Init+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <MX_USART2_UART_Init+0x58>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <MX_USART2_UART_Init+0x58>)
 80015b8:	f002 fd3e 	bl	8004038 <HAL_UART_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015c2:	f000 f845 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200001e4 	.word	0x200001e4
 80015d0:	40004400 	.word	0x40004400

080015d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015da:	f107 030c 	add.w	r3, r7, #12
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	4b17      	ldr	r3, [pc, #92]	; (8001648 <MX_GPIO_Init+0x74>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ee:	4a16      	ldr	r2, [pc, #88]	; (8001648 <MX_GPIO_Init+0x74>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f6:	4b14      	ldr	r3, [pc, #80]	; (8001648 <MX_GPIO_Init+0x74>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <MX_GPIO_Init+0x74>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001606:	4a10      	ldr	r2, [pc, #64]	; (8001648 <MX_GPIO_Init+0x74>)
 8001608:	f043 0302 	orr.w	r3, r3, #2
 800160c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <MX_GPIO_Init+0x74>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSNpin_Pin|CEpin_Pin, GPIO_PIN_RESET);
 800161a:	2200      	movs	r2, #0
 800161c:	2118      	movs	r1, #24
 800161e:	480b      	ldr	r0, [pc, #44]	; (800164c <MX_GPIO_Init+0x78>)
 8001620:	f000 fc5e 	bl	8001ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CSNpin_Pin CEpin_Pin */
  GPIO_InitStruct.Pin = CSNpin_Pin|CEpin_Pin;
 8001624:	2318      	movs	r3, #24
 8001626:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001628:	2301      	movs	r3, #1
 800162a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001634:	f107 030c 	add.w	r3, r7, #12
 8001638:	4619      	mov	r1, r3
 800163a:	4804      	ldr	r0, [pc, #16]	; (800164c <MX_GPIO_Init+0x78>)
 800163c:	f000 fae6 	bl	8001c0c <HAL_GPIO_Init>

}
 8001640:	bf00      	nop
 8001642:	3720      	adds	r7, #32
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40021000 	.word	0x40021000
 800164c:	48000400 	.word	0x48000400

08001650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001654:	b672      	cpsid	i
}
 8001656:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001658:	e7fe      	b.n	8001658 <Error_Handler+0x8>
	...

0800165c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <HAL_MspInit+0x44>)
 8001664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001666:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <HAL_MspInit+0x44>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6613      	str	r3, [r2, #96]	; 0x60
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <HAL_MspInit+0x44>)
 8001670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_MspInit+0x44>)
 800167c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167e:	4a08      	ldr	r2, [pc, #32]	; (80016a0 <HAL_MspInit+0x44>)
 8001680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001684:	6593      	str	r3, [r2, #88]	; 0x58
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_MspInit+0x44>)
 8001688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168e:	603b      	str	r3, [r7, #0]
 8001690:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40021000 	.word	0x40021000

080016a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	; 0x28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a17      	ldr	r2, [pc, #92]	; (8001720 <HAL_SPI_MspInit+0x7c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d128      	bne.n	8001718 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016c6:	4b17      	ldr	r3, [pc, #92]	; (8001724 <HAL_SPI_MspInit+0x80>)
 80016c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ca:	4a16      	ldr	r2, [pc, #88]	; (8001724 <HAL_SPI_MspInit+0x80>)
 80016cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016d0:	6613      	str	r3, [r2, #96]	; 0x60
 80016d2:	4b14      	ldr	r3, [pc, #80]	; (8001724 <HAL_SPI_MspInit+0x80>)
 80016d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	4b11      	ldr	r3, [pc, #68]	; (8001724 <HAL_SPI_MspInit+0x80>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	4a10      	ldr	r2, [pc, #64]	; (8001724 <HAL_SPI_MspInit+0x80>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <HAL_SPI_MspInit+0x80>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80016f6:	23c2      	movs	r3, #194	; 0xc2
 80016f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001702:	2303      	movs	r3, #3
 8001704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001706:	2305      	movs	r3, #5
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001714:	f000 fa7a 	bl	8001c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001718:	bf00      	nop
 800171a:	3728      	adds	r7, #40	; 0x28
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40013000 	.word	0x40013000
 8001724:	40021000 	.word	0x40021000

08001728 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b09e      	sub	sp, #120	; 0x78
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	2254      	movs	r2, #84	; 0x54
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f003 f96b 	bl	8004a24 <memset>
  if(huart->Instance==USART2)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a1f      	ldr	r2, [pc, #124]	; (80017d0 <HAL_UART_MspInit+0xa8>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d136      	bne.n	80017c6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001758:	2302      	movs	r3, #2
 800175a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800175c:	2300      	movs	r3, #0
 800175e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	4618      	mov	r0, r3
 8001766:	f001 fa6f 	bl	8002c48 <HAL_RCCEx_PeriphCLKConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001770:	f7ff ff6e 	bl	8001650 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001774:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <HAL_UART_MspInit+0xac>)
 8001776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001778:	4a16      	ldr	r2, [pc, #88]	; (80017d4 <HAL_UART_MspInit+0xac>)
 800177a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800177e:	6593      	str	r3, [r2, #88]	; 0x58
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <HAL_UART_MspInit+0xac>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <HAL_UART_MspInit+0xac>)
 800178e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001790:	4a10      	ldr	r2, [pc, #64]	; (80017d4 <HAL_UART_MspInit+0xac>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001798:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <HAL_UART_MspInit+0xac>)
 800179a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017a4:	230c      	movs	r3, #12
 80017a6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b0:	2303      	movs	r3, #3
 80017b2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017b4:	2307      	movs	r3, #7
 80017b6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017bc:	4619      	mov	r1, r3
 80017be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c2:	f000 fa23 	bl	8001c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017c6:	bf00      	nop
 80017c8:	3778      	adds	r7, #120	; 0x78
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40004400 	.word	0x40004400
 80017d4:	40021000 	.word	0x40021000

080017d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <NMI_Handler+0x4>

080017de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <HardFault_Handler+0x4>

080017e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <MemManage_Handler+0x4>

080017ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ee:	e7fe      	b.n	80017ee <BusFault_Handler+0x4>

080017f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <UsageFault_Handler+0x4>

080017f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001824:	f000 f8c8 	bl	80019b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}

0800182c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001834:	4a14      	ldr	r2, [pc, #80]	; (8001888 <_sbrk+0x5c>)
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <_sbrk+0x60>)
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001840:	4b13      	ldr	r3, [pc, #76]	; (8001890 <_sbrk+0x64>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <_sbrk+0x64>)
 800184a:	4a12      	ldr	r2, [pc, #72]	; (8001894 <_sbrk+0x68>)
 800184c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	429a      	cmp	r2, r3
 800185a:	d207      	bcs.n	800186c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800185c:	f003 f8aa 	bl	80049b4 <__errno>
 8001860:	4603      	mov	r3, r0
 8001862:	220c      	movs	r2, #12
 8001864:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800186a:	e009      	b.n	8001880 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001872:	4b07      	ldr	r3, [pc, #28]	; (8001890 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	4a05      	ldr	r2, [pc, #20]	; (8001890 <_sbrk+0x64>)
 800187c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20010000 	.word	0x20010000
 800188c:	00000400 	.word	0x00000400
 8001890:	20000268 	.word	0x20000268
 8001894:	20000280 	.word	0x20000280

08001898 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <SystemInit+0x20>)
 800189e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018a2:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <SystemInit+0x20>)
 80018a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018c0:	f7ff ffea 	bl	8001898 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018c4:	480c      	ldr	r0, [pc, #48]	; (80018f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80018c6:	490d      	ldr	r1, [pc, #52]	; (80018fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80018c8:	4a0d      	ldr	r2, [pc, #52]	; (8001900 <LoopForever+0xe>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018cc:	e002      	b.n	80018d4 <LoopCopyDataInit>

080018ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018d2:	3304      	adds	r3, #4

080018d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d8:	d3f9      	bcc.n	80018ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018da:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018dc:	4c0a      	ldr	r4, [pc, #40]	; (8001908 <LoopForever+0x16>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e0:	e001      	b.n	80018e6 <LoopFillZerobss>

080018e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e4:	3204      	adds	r2, #4

080018e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e8:	d3fb      	bcc.n	80018e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ea:	f003 f869 	bl	80049c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018ee:	f7ff fd8d 	bl	800140c <main>

080018f2 <LoopForever>:

LoopForever:
    b LoopForever
 80018f2:	e7fe      	b.n	80018f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018f4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80018f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018fc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001900:	080058dc 	.word	0x080058dc
  ldr r2, =_sbss
 8001904:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001908:	20000280 	.word	0x20000280

0800190c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800190c:	e7fe      	b.n	800190c <ADC1_IRQHandler>

0800190e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001918:	2003      	movs	r0, #3
 800191a:	f000 f943 	bl	8001ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800191e:	200f      	movs	r0, #15
 8001920:	f000 f80e 	bl	8001940 <HAL_InitTick>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d002      	beq.n	8001930 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	71fb      	strb	r3, [r7, #7]
 800192e:	e001      	b.n	8001934 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001930:	f7ff fe94 	bl	800165c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001934:	79fb      	ldrb	r3, [r7, #7]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800194c:	4b17      	ldr	r3, [pc, #92]	; (80019ac <HAL_InitTick+0x6c>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d023      	beq.n	800199c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001954:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <HAL_InitTick+0x70>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b14      	ldr	r3, [pc, #80]	; (80019ac <HAL_InitTick+0x6c>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	4619      	mov	r1, r3
 800195e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001962:	fbb3 f3f1 	udiv	r3, r3, r1
 8001966:	fbb2 f3f3 	udiv	r3, r2, r3
 800196a:	4618      	mov	r0, r3
 800196c:	f000 f941 	bl	8001bf2 <HAL_SYSTICK_Config>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10f      	bne.n	8001996 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b0f      	cmp	r3, #15
 800197a:	d809      	bhi.n	8001990 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800197c:	2200      	movs	r2, #0
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001984:	f000 f919 	bl	8001bba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001988:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <HAL_InitTick+0x74>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	e007      	b.n	80019a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
 8001994:	e004      	b.n	80019a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	73fb      	strb	r3, [r7, #15]
 800199a:	e001      	b.n	80019a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000008 	.word	0x20000008
 80019b0:	20000000 	.word	0x20000000
 80019b4:	20000004 	.word	0x20000004

080019b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_IncTick+0x20>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_IncTick+0x24>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	4a04      	ldr	r2, [pc, #16]	; (80019dc <HAL_IncTick+0x24>)
 80019ca:	6013      	str	r3, [r2, #0]
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000008 	.word	0x20000008
 80019dc:	2000026c 	.word	0x2000026c

080019e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return uwTick;
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <HAL_GetTick+0x14>)
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	2000026c 	.word	0x2000026c

080019f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a00:	f7ff ffee 	bl	80019e0 <HAL_GetTick>
 8001a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a10:	d005      	beq.n	8001a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_Delay+0x44>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a1e:	bf00      	nop
 8001a20:	f7ff ffde 	bl	80019e0 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d8f7      	bhi.n	8001a20 <HAL_Delay+0x28>
  {
  }
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000008 	.word	0x20000008

08001a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <__NVIC_SetPriorityGrouping+0x44>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a72:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <__NVIC_SetPriorityGrouping+0x44>)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	60d3      	str	r3, [r2, #12]
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	0a1b      	lsrs	r3, r3, #8
 8001a92:	f003 0307 	and.w	r3, r3, #7
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	6039      	str	r1, [r7, #0]
 8001aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	db0a      	blt.n	8001ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	490c      	ldr	r1, [pc, #48]	; (8001af0 <__NVIC_SetPriority+0x4c>)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	0112      	lsls	r2, r2, #4
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001acc:	e00a      	b.n	8001ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	4908      	ldr	r1, [pc, #32]	; (8001af4 <__NVIC_SetPriority+0x50>)
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	3b04      	subs	r3, #4
 8001adc:	0112      	lsls	r2, r2, #4
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	761a      	strb	r2, [r3, #24]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000e100 	.word	0xe000e100
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b089      	sub	sp, #36	; 0x24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f1c3 0307 	rsb	r3, r3, #7
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	bf28      	it	cs
 8001b16:	2304      	movcs	r3, #4
 8001b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d902      	bls.n	8001b28 <NVIC_EncodePriority+0x30>
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3b03      	subs	r3, #3
 8001b26:	e000      	b.n	8001b2a <NVIC_EncodePriority+0x32>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43da      	mvns	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4a:	43d9      	mvns	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	4313      	orrs	r3, r2
         );
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3724      	adds	r7, #36	; 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b70:	d301      	bcc.n	8001b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00f      	b.n	8001b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <SysTick_Config+0x40>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7e:	210f      	movs	r1, #15
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b84:	f7ff ff8e 	bl	8001aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <SysTick_Config+0x40>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8e:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <SysTick_Config+0x40>)
 8001b90:	2207      	movs	r2, #7
 8001b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	e000e010 	.word	0xe000e010

08001ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ff47 	bl	8001a40 <__NVIC_SetPriorityGrouping>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bcc:	f7ff ff5c 	bl	8001a88 <__NVIC_GetPriorityGrouping>
 8001bd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	6978      	ldr	r0, [r7, #20]
 8001bd8:	f7ff ff8e 	bl	8001af8 <NVIC_EncodePriority>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff5d 	bl	8001aa4 <__NVIC_SetPriority>
}
 8001bea:	bf00      	nop
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff ffb0 	bl	8001b60 <SysTick_Config>
 8001c00:	4603      	mov	r3, r0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c1a:	e148      	b.n	8001eae <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	2101      	movs	r1, #1
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	fa01 f303 	lsl.w	r3, r1, r3
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 813a 	beq.w	8001ea8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d005      	beq.n	8001c4c <HAL_GPIO_Init+0x40>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d130      	bne.n	8001cae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c82:	2201      	movs	r2, #1
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	091b      	lsrs	r3, r3, #4
 8001c98:	f003 0201 	and.w	r2, r3, #1
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d017      	beq.n	8001cea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d123      	bne.n	8001d3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	08da      	lsrs	r2, r3, #3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3208      	adds	r2, #8
 8001cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	220f      	movs	r2, #15
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4013      	ands	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	691a      	ldr	r2, [r3, #16]
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	08da      	lsrs	r2, r3, #3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3208      	adds	r2, #8
 8001d38:	6939      	ldr	r1, [r7, #16]
 8001d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	2203      	movs	r2, #3
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4013      	ands	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0203 	and.w	r2, r3, #3
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 8094 	beq.w	8001ea8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d80:	4b52      	ldr	r3, [pc, #328]	; (8001ecc <HAL_GPIO_Init+0x2c0>)
 8001d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d84:	4a51      	ldr	r2, [pc, #324]	; (8001ecc <HAL_GPIO_Init+0x2c0>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6613      	str	r3, [r2, #96]	; 0x60
 8001d8c:	4b4f      	ldr	r3, [pc, #316]	; (8001ecc <HAL_GPIO_Init+0x2c0>)
 8001d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d98:	4a4d      	ldr	r2, [pc, #308]	; (8001ed0 <HAL_GPIO_Init+0x2c4>)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	089b      	lsrs	r3, r3, #2
 8001d9e:	3302      	adds	r3, #2
 8001da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	220f      	movs	r2, #15
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dc2:	d00d      	beq.n	8001de0 <HAL_GPIO_Init+0x1d4>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a43      	ldr	r2, [pc, #268]	; (8001ed4 <HAL_GPIO_Init+0x2c8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d007      	beq.n	8001ddc <HAL_GPIO_Init+0x1d0>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a42      	ldr	r2, [pc, #264]	; (8001ed8 <HAL_GPIO_Init+0x2cc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d101      	bne.n	8001dd8 <HAL_GPIO_Init+0x1cc>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e004      	b.n	8001de2 <HAL_GPIO_Init+0x1d6>
 8001dd8:	2307      	movs	r3, #7
 8001dda:	e002      	b.n	8001de2 <HAL_GPIO_Init+0x1d6>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <HAL_GPIO_Init+0x1d6>
 8001de0:	2300      	movs	r3, #0
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	f002 0203 	and.w	r2, r2, #3
 8001de8:	0092      	lsls	r2, r2, #2
 8001dea:	4093      	lsls	r3, r2
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001df2:	4937      	ldr	r1, [pc, #220]	; (8001ed0 <HAL_GPIO_Init+0x2c4>)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	089b      	lsrs	r3, r3, #2
 8001df8:	3302      	adds	r3, #2
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e00:	4b36      	ldr	r3, [pc, #216]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e24:	4a2d      	ldr	r2, [pc, #180]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e2a:	4b2c      	ldr	r3, [pc, #176]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4013      	ands	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e4e:	4a23      	ldr	r2, [pc, #140]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e54:	4b21      	ldr	r3, [pc, #132]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e78:	4a18      	ldr	r2, [pc, #96]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e7e:	4b17      	ldr	r3, [pc, #92]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ea2:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f47f aeaf 	bne.w	8001c1c <HAL_GPIO_Init+0x10>
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	bf00      	nop
 8001ec2:	371c      	adds	r7, #28
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40010000 	.word	0x40010000
 8001ed4:	48000400 	.word	0x48000400
 8001ed8:	48000800 	.word	0x48000800
 8001edc:	40010400 	.word	0x40010400

08001ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	807b      	strh	r3, [r7, #2]
 8001eec:	4613      	mov	r3, r2
 8001eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ef0:	787b      	ldrb	r3, [r7, #1]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ef6:	887a      	ldrh	r2, [r7, #2]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001efc:	e002      	b.n	8001f04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001efe:	887a      	ldrh	r2, [r7, #2]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40007000 	.word	0x40007000

08001f2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f3a:	d130      	bne.n	8001f9e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f3c:	4b23      	ldr	r3, [pc, #140]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f48:	d038      	beq.n	8001fbc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f4a:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f52:	4a1e      	ldr	r2, [pc, #120]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f58:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f5a:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2232      	movs	r2, #50	; 0x32
 8001f60:	fb02 f303 	mul.w	r3, r2, r3
 8001f64:	4a1b      	ldr	r2, [pc, #108]	; (8001fd4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f66:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6a:	0c9b      	lsrs	r3, r3, #18
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f70:	e002      	b.n	8001f78 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	3b01      	subs	r3, #1
 8001f76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f78:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f84:	d102      	bne.n	8001f8c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1f2      	bne.n	8001f72 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f8c:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f98:	d110      	bne.n	8001fbc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e00f      	b.n	8001fbe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001faa:	d007      	beq.n	8001fbc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fac:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fb4:	4a05      	ldr	r2, [pc, #20]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40007000 	.word	0x40007000
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	431bde83 	.word	0x431bde83

08001fd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d102      	bne.n	8001fec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	f000 bc02 	b.w	80027f0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fec:	4b96      	ldr	r3, [pc, #600]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 030c 	and.w	r3, r3, #12
 8001ff4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ff6:	4b94      	ldr	r3, [pc, #592]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0310 	and.w	r3, r3, #16
 8002008:	2b00      	cmp	r3, #0
 800200a:	f000 80e4 	beq.w	80021d6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d007      	beq.n	8002024 <HAL_RCC_OscConfig+0x4c>
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	2b0c      	cmp	r3, #12
 8002018:	f040 808b 	bne.w	8002132 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	2b01      	cmp	r3, #1
 8002020:	f040 8087 	bne.w	8002132 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002024:	4b88      	ldr	r3, [pc, #544]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <HAL_RCC_OscConfig+0x64>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e3d9      	b.n	80027f0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a1a      	ldr	r2, [r3, #32]
 8002040:	4b81      	ldr	r3, [pc, #516]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d004      	beq.n	8002056 <HAL_RCC_OscConfig+0x7e>
 800204c:	4b7e      	ldr	r3, [pc, #504]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002054:	e005      	b.n	8002062 <HAL_RCC_OscConfig+0x8a>
 8002056:	4b7c      	ldr	r3, [pc, #496]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 8002058:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002062:	4293      	cmp	r3, r2
 8002064:	d223      	bcs.n	80020ae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	4618      	mov	r0, r3
 800206c:	f000 fd8c 	bl	8002b88 <RCC_SetFlashLatencyFromMSIRange>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e3ba      	b.n	80027f0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800207a:	4b73      	ldr	r3, [pc, #460]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a72      	ldr	r2, [pc, #456]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 8002080:	f043 0308 	orr.w	r3, r3, #8
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	4b70      	ldr	r3, [pc, #448]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	496d      	ldr	r1, [pc, #436]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 8002094:	4313      	orrs	r3, r2
 8002096:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002098:	4b6b      	ldr	r3, [pc, #428]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	021b      	lsls	r3, r3, #8
 80020a6:	4968      	ldr	r1, [pc, #416]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]
 80020ac:	e025      	b.n	80020fa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020ae:	4b66      	ldr	r3, [pc, #408]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a65      	ldr	r2, [pc, #404]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 80020b4:	f043 0308 	orr.w	r3, r3, #8
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	4b63      	ldr	r3, [pc, #396]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	4960      	ldr	r1, [pc, #384]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020cc:	4b5e      	ldr	r3, [pc, #376]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	021b      	lsls	r3, r3, #8
 80020da:	495b      	ldr	r1, [pc, #364]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d109      	bne.n	80020fa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 fd4c 	bl	8002b88 <RCC_SetFlashLatencyFromMSIRange>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e37a      	b.n	80027f0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020fa:	f000 fc81 	bl	8002a00 <HAL_RCC_GetSysClockFreq>
 80020fe:	4602      	mov	r2, r0
 8002100:	4b51      	ldr	r3, [pc, #324]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	091b      	lsrs	r3, r3, #4
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	4950      	ldr	r1, [pc, #320]	; (800224c <HAL_RCC_OscConfig+0x274>)
 800210c:	5ccb      	ldrb	r3, [r1, r3]
 800210e:	f003 031f 	and.w	r3, r3, #31
 8002112:	fa22 f303 	lsr.w	r3, r2, r3
 8002116:	4a4e      	ldr	r2, [pc, #312]	; (8002250 <HAL_RCC_OscConfig+0x278>)
 8002118:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800211a:	4b4e      	ldr	r3, [pc, #312]	; (8002254 <HAL_RCC_OscConfig+0x27c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff fc0e 	bl	8001940 <HAL_InitTick>
 8002124:	4603      	mov	r3, r0
 8002126:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d052      	beq.n	80021d4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	e35e      	b.n	80027f0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d032      	beq.n	80021a0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800213a:	4b43      	ldr	r3, [pc, #268]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a42      	ldr	r2, [pc, #264]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002146:	f7ff fc4b 	bl	80019e0 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800214e:	f7ff fc47 	bl	80019e0 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e347      	b.n	80027f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002160:	4b39      	ldr	r3, [pc, #228]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0f0      	beq.n	800214e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800216c:	4b36      	ldr	r3, [pc, #216]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a35      	ldr	r2, [pc, #212]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 8002172:	f043 0308 	orr.w	r3, r3, #8
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	4b33      	ldr	r3, [pc, #204]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	4930      	ldr	r1, [pc, #192]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 8002186:	4313      	orrs	r3, r2
 8002188:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800218a:	4b2f      	ldr	r3, [pc, #188]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	021b      	lsls	r3, r3, #8
 8002198:	492b      	ldr	r1, [pc, #172]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 800219a:	4313      	orrs	r3, r2
 800219c:	604b      	str	r3, [r1, #4]
 800219e:	e01a      	b.n	80021d6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021a0:	4b29      	ldr	r3, [pc, #164]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a28      	ldr	r2, [pc, #160]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 80021a6:	f023 0301 	bic.w	r3, r3, #1
 80021aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021ac:	f7ff fc18 	bl	80019e0 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021b4:	f7ff fc14 	bl	80019e0 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e314      	b.n	80027f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021c6:	4b20      	ldr	r3, [pc, #128]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x1dc>
 80021d2:	e000      	b.n	80021d6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d073      	beq.n	80022ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d005      	beq.n	80021f4 <HAL_RCC_OscConfig+0x21c>
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2b0c      	cmp	r3, #12
 80021ec:	d10e      	bne.n	800220c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d10b      	bne.n	800220c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f4:	4b14      	ldr	r3, [pc, #80]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d063      	beq.n	80022c8 <HAL_RCC_OscConfig+0x2f0>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d15f      	bne.n	80022c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e2f1      	b.n	80027f0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002214:	d106      	bne.n	8002224 <HAL_RCC_OscConfig+0x24c>
 8002216:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a0b      	ldr	r2, [pc, #44]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 800221c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	e025      	b.n	8002270 <HAL_RCC_OscConfig+0x298>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800222c:	d114      	bne.n	8002258 <HAL_RCC_OscConfig+0x280>
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a05      	ldr	r2, [pc, #20]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 8002234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	4b03      	ldr	r3, [pc, #12]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a02      	ldr	r2, [pc, #8]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 8002240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	e013      	b.n	8002270 <HAL_RCC_OscConfig+0x298>
 8002248:	40021000 	.word	0x40021000
 800224c:	08005850 	.word	0x08005850
 8002250:	20000000 	.word	0x20000000
 8002254:	20000004 	.word	0x20000004
 8002258:	4ba0      	ldr	r3, [pc, #640]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a9f      	ldr	r2, [pc, #636]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 800225e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	4b9d      	ldr	r3, [pc, #628]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a9c      	ldr	r2, [pc, #624]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 800226a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800226e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d013      	beq.n	80022a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002278:	f7ff fbb2 	bl	80019e0 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002280:	f7ff fbae 	bl	80019e0 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b64      	cmp	r3, #100	; 0x64
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e2ae      	b.n	80027f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002292:	4b92      	ldr	r3, [pc, #584]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCC_OscConfig+0x2a8>
 800229e:	e014      	b.n	80022ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a0:	f7ff fb9e 	bl	80019e0 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a8:	f7ff fb9a 	bl	80019e0 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b64      	cmp	r3, #100	; 0x64
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e29a      	b.n	80027f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022ba:	4b88      	ldr	r3, [pc, #544]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x2d0>
 80022c6:	e000      	b.n	80022ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d060      	beq.n	8002398 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d005      	beq.n	80022e8 <HAL_RCC_OscConfig+0x310>
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	2b0c      	cmp	r3, #12
 80022e0:	d119      	bne.n	8002316 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d116      	bne.n	8002316 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022e8:	4b7c      	ldr	r3, [pc, #496]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d005      	beq.n	8002300 <HAL_RCC_OscConfig+0x328>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e277      	b.n	80027f0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002300:	4b76      	ldr	r3, [pc, #472]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	061b      	lsls	r3, r3, #24
 800230e:	4973      	ldr	r1, [pc, #460]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 8002310:	4313      	orrs	r3, r2
 8002312:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002314:	e040      	b.n	8002398 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d023      	beq.n	8002366 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800231e:	4b6f      	ldr	r3, [pc, #444]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a6e      	ldr	r2, [pc, #440]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 8002324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232a:	f7ff fb59 	bl	80019e0 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002332:	f7ff fb55 	bl	80019e0 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e255      	b.n	80027f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002344:	4b65      	ldr	r3, [pc, #404]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0f0      	beq.n	8002332 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002350:	4b62      	ldr	r3, [pc, #392]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	061b      	lsls	r3, r3, #24
 800235e:	495f      	ldr	r1, [pc, #380]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 8002360:	4313      	orrs	r3, r2
 8002362:	604b      	str	r3, [r1, #4]
 8002364:	e018      	b.n	8002398 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002366:	4b5d      	ldr	r3, [pc, #372]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a5c      	ldr	r2, [pc, #368]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 800236c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002372:	f7ff fb35 	bl	80019e0 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800237a:	f7ff fb31 	bl	80019e0 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e231      	b.n	80027f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800238c:	4b53      	ldr	r3, [pc, #332]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1f0      	bne.n	800237a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d03c      	beq.n	800241e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d01c      	beq.n	80023e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ac:	4b4b      	ldr	r3, [pc, #300]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 80023ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023b2:	4a4a      	ldr	r2, [pc, #296]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023bc:	f7ff fb10 	bl	80019e0 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c4:	f7ff fb0c 	bl	80019e0 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e20c      	b.n	80027f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023d6:	4b41      	ldr	r3, [pc, #260]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 80023d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0ef      	beq.n	80023c4 <HAL_RCC_OscConfig+0x3ec>
 80023e4:	e01b      	b.n	800241e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023e6:	4b3d      	ldr	r3, [pc, #244]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 80023e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ec:	4a3b      	ldr	r2, [pc, #236]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 80023ee:	f023 0301 	bic.w	r3, r3, #1
 80023f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f6:	f7ff faf3 	bl	80019e0 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023fe:	f7ff faef 	bl	80019e0 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e1ef      	b.n	80027f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002410:	4b32      	ldr	r3, [pc, #200]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 8002412:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1ef      	bne.n	80023fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0304 	and.w	r3, r3, #4
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 80a6 	beq.w	8002578 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800242c:	2300      	movs	r3, #0
 800242e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002430:	4b2a      	ldr	r3, [pc, #168]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 8002432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10d      	bne.n	8002458 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800243c:	4b27      	ldr	r3, [pc, #156]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 800243e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002440:	4a26      	ldr	r2, [pc, #152]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 8002442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002446:	6593      	str	r3, [r2, #88]	; 0x58
 8002448:	4b24      	ldr	r3, [pc, #144]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 800244a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002454:	2301      	movs	r3, #1
 8002456:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002458:	4b21      	ldr	r3, [pc, #132]	; (80024e0 <HAL_RCC_OscConfig+0x508>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002460:	2b00      	cmp	r3, #0
 8002462:	d118      	bne.n	8002496 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002464:	4b1e      	ldr	r3, [pc, #120]	; (80024e0 <HAL_RCC_OscConfig+0x508>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a1d      	ldr	r2, [pc, #116]	; (80024e0 <HAL_RCC_OscConfig+0x508>)
 800246a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002470:	f7ff fab6 	bl	80019e0 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002478:	f7ff fab2 	bl	80019e0 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e1b2      	b.n	80027f0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800248a:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <HAL_RCC_OscConfig+0x508>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d108      	bne.n	80024b0 <HAL_RCC_OscConfig+0x4d8>
 800249e:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 80024a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a4:	4a0d      	ldr	r2, [pc, #52]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024ae:	e029      	b.n	8002504 <HAL_RCC_OscConfig+0x52c>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b05      	cmp	r3, #5
 80024b6:	d115      	bne.n	80024e4 <HAL_RCC_OscConfig+0x50c>
 80024b8:	4b08      	ldr	r3, [pc, #32]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 80024ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024be:	4a07      	ldr	r2, [pc, #28]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 80024c0:	f043 0304 	orr.w	r3, r3, #4
 80024c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024c8:	4b04      	ldr	r3, [pc, #16]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 80024ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ce:	4a03      	ldr	r2, [pc, #12]	; (80024dc <HAL_RCC_OscConfig+0x504>)
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024d8:	e014      	b.n	8002504 <HAL_RCC_OscConfig+0x52c>
 80024da:	bf00      	nop
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40007000 	.word	0x40007000
 80024e4:	4b9a      	ldr	r3, [pc, #616]	; (8002750 <HAL_RCC_OscConfig+0x778>)
 80024e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ea:	4a99      	ldr	r2, [pc, #612]	; (8002750 <HAL_RCC_OscConfig+0x778>)
 80024ec:	f023 0301 	bic.w	r3, r3, #1
 80024f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024f4:	4b96      	ldr	r3, [pc, #600]	; (8002750 <HAL_RCC_OscConfig+0x778>)
 80024f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fa:	4a95      	ldr	r2, [pc, #596]	; (8002750 <HAL_RCC_OscConfig+0x778>)
 80024fc:	f023 0304 	bic.w	r3, r3, #4
 8002500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d016      	beq.n	800253a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250c:	f7ff fa68 	bl	80019e0 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002512:	e00a      	b.n	800252a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002514:	f7ff fa64 	bl	80019e0 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002522:	4293      	cmp	r3, r2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e162      	b.n	80027f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800252a:	4b89      	ldr	r3, [pc, #548]	; (8002750 <HAL_RCC_OscConfig+0x778>)
 800252c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0ed      	beq.n	8002514 <HAL_RCC_OscConfig+0x53c>
 8002538:	e015      	b.n	8002566 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253a:	f7ff fa51 	bl	80019e0 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002540:	e00a      	b.n	8002558 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002542:	f7ff fa4d 	bl	80019e0 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002550:	4293      	cmp	r3, r2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e14b      	b.n	80027f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002558:	4b7d      	ldr	r3, [pc, #500]	; (8002750 <HAL_RCC_OscConfig+0x778>)
 800255a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1ed      	bne.n	8002542 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002566:	7ffb      	ldrb	r3, [r7, #31]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d105      	bne.n	8002578 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800256c:	4b78      	ldr	r3, [pc, #480]	; (8002750 <HAL_RCC_OscConfig+0x778>)
 800256e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002570:	4a77      	ldr	r2, [pc, #476]	; (8002750 <HAL_RCC_OscConfig+0x778>)
 8002572:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002576:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0320 	and.w	r3, r3, #32
 8002580:	2b00      	cmp	r3, #0
 8002582:	d03c      	beq.n	80025fe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	2b00      	cmp	r3, #0
 800258a:	d01c      	beq.n	80025c6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800258c:	4b70      	ldr	r3, [pc, #448]	; (8002750 <HAL_RCC_OscConfig+0x778>)
 800258e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002592:	4a6f      	ldr	r2, [pc, #444]	; (8002750 <HAL_RCC_OscConfig+0x778>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259c:	f7ff fa20 	bl	80019e0 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025a4:	f7ff fa1c 	bl	80019e0 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e11c      	b.n	80027f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025b6:	4b66      	ldr	r3, [pc, #408]	; (8002750 <HAL_RCC_OscConfig+0x778>)
 80025b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0ef      	beq.n	80025a4 <HAL_RCC_OscConfig+0x5cc>
 80025c4:	e01b      	b.n	80025fe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025c6:	4b62      	ldr	r3, [pc, #392]	; (8002750 <HAL_RCC_OscConfig+0x778>)
 80025c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025cc:	4a60      	ldr	r2, [pc, #384]	; (8002750 <HAL_RCC_OscConfig+0x778>)
 80025ce:	f023 0301 	bic.w	r3, r3, #1
 80025d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d6:	f7ff fa03 	bl	80019e0 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025de:	f7ff f9ff 	bl	80019e0 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e0ff      	b.n	80027f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025f0:	4b57      	ldr	r3, [pc, #348]	; (8002750 <HAL_RCC_OscConfig+0x778>)
 80025f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1ef      	bne.n	80025de <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 80f3 	beq.w	80027ee <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260c:	2b02      	cmp	r3, #2
 800260e:	f040 80c9 	bne.w	80027a4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002612:	4b4f      	ldr	r3, [pc, #316]	; (8002750 <HAL_RCC_OscConfig+0x778>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f003 0203 	and.w	r2, r3, #3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002622:	429a      	cmp	r2, r3
 8002624:	d12c      	bne.n	8002680 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	3b01      	subs	r3, #1
 8002632:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002634:	429a      	cmp	r2, r3
 8002636:	d123      	bne.n	8002680 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002642:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002644:	429a      	cmp	r2, r3
 8002646:	d11b      	bne.n	8002680 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002652:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002654:	429a      	cmp	r2, r3
 8002656:	d113      	bne.n	8002680 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002662:	085b      	lsrs	r3, r3, #1
 8002664:	3b01      	subs	r3, #1
 8002666:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002668:	429a      	cmp	r2, r3
 800266a:	d109      	bne.n	8002680 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	085b      	lsrs	r3, r3, #1
 8002678:	3b01      	subs	r3, #1
 800267a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800267c:	429a      	cmp	r2, r3
 800267e:	d06b      	beq.n	8002758 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	2b0c      	cmp	r3, #12
 8002684:	d062      	beq.n	800274c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002686:	4b32      	ldr	r3, [pc, #200]	; (8002750 <HAL_RCC_OscConfig+0x778>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e0ac      	b.n	80027f0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002696:	4b2e      	ldr	r3, [pc, #184]	; (8002750 <HAL_RCC_OscConfig+0x778>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a2d      	ldr	r2, [pc, #180]	; (8002750 <HAL_RCC_OscConfig+0x778>)
 800269c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026a0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026a2:	f7ff f99d 	bl	80019e0 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026aa:	f7ff f999 	bl	80019e0 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e099      	b.n	80027f0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026bc:	4b24      	ldr	r3, [pc, #144]	; (8002750 <HAL_RCC_OscConfig+0x778>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1f0      	bne.n	80026aa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026c8:	4b21      	ldr	r3, [pc, #132]	; (8002750 <HAL_RCC_OscConfig+0x778>)
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	4b21      	ldr	r3, [pc, #132]	; (8002754 <HAL_RCC_OscConfig+0x77c>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026d8:	3a01      	subs	r2, #1
 80026da:	0112      	lsls	r2, r2, #4
 80026dc:	4311      	orrs	r1, r2
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026e2:	0212      	lsls	r2, r2, #8
 80026e4:	4311      	orrs	r1, r2
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026ea:	0852      	lsrs	r2, r2, #1
 80026ec:	3a01      	subs	r2, #1
 80026ee:	0552      	lsls	r2, r2, #21
 80026f0:	4311      	orrs	r1, r2
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026f6:	0852      	lsrs	r2, r2, #1
 80026f8:	3a01      	subs	r2, #1
 80026fa:	0652      	lsls	r2, r2, #25
 80026fc:	4311      	orrs	r1, r2
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002702:	06d2      	lsls	r2, r2, #27
 8002704:	430a      	orrs	r2, r1
 8002706:	4912      	ldr	r1, [pc, #72]	; (8002750 <HAL_RCC_OscConfig+0x778>)
 8002708:	4313      	orrs	r3, r2
 800270a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800270c:	4b10      	ldr	r3, [pc, #64]	; (8002750 <HAL_RCC_OscConfig+0x778>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a0f      	ldr	r2, [pc, #60]	; (8002750 <HAL_RCC_OscConfig+0x778>)
 8002712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002716:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002718:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <HAL_RCC_OscConfig+0x778>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4a0c      	ldr	r2, [pc, #48]	; (8002750 <HAL_RCC_OscConfig+0x778>)
 800271e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002722:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002724:	f7ff f95c 	bl	80019e0 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800272c:	f7ff f958 	bl	80019e0 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e058      	b.n	80027f0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800273e:	4b04      	ldr	r3, [pc, #16]	; (8002750 <HAL_RCC_OscConfig+0x778>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800274a:	e050      	b.n	80027ee <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e04f      	b.n	80027f0 <HAL_RCC_OscConfig+0x818>
 8002750:	40021000 	.word	0x40021000
 8002754:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002758:	4b27      	ldr	r3, [pc, #156]	; (80027f8 <HAL_RCC_OscConfig+0x820>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d144      	bne.n	80027ee <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002764:	4b24      	ldr	r3, [pc, #144]	; (80027f8 <HAL_RCC_OscConfig+0x820>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a23      	ldr	r2, [pc, #140]	; (80027f8 <HAL_RCC_OscConfig+0x820>)
 800276a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800276e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002770:	4b21      	ldr	r3, [pc, #132]	; (80027f8 <HAL_RCC_OscConfig+0x820>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	4a20      	ldr	r2, [pc, #128]	; (80027f8 <HAL_RCC_OscConfig+0x820>)
 8002776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800277a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800277c:	f7ff f930 	bl	80019e0 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002784:	f7ff f92c 	bl	80019e0 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e02c      	b.n	80027f0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002796:	4b18      	ldr	r3, [pc, #96]	; (80027f8 <HAL_RCC_OscConfig+0x820>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0x7ac>
 80027a2:	e024      	b.n	80027ee <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	2b0c      	cmp	r3, #12
 80027a8:	d01f      	beq.n	80027ea <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027aa:	4b13      	ldr	r3, [pc, #76]	; (80027f8 <HAL_RCC_OscConfig+0x820>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a12      	ldr	r2, [pc, #72]	; (80027f8 <HAL_RCC_OscConfig+0x820>)
 80027b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b6:	f7ff f913 	bl	80019e0 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027be:	f7ff f90f 	bl	80019e0 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e00f      	b.n	80027f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027d0:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <HAL_RCC_OscConfig+0x820>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f0      	bne.n	80027be <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80027dc:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_RCC_OscConfig+0x820>)
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	4905      	ldr	r1, [pc, #20]	; (80027f8 <HAL_RCC_OscConfig+0x820>)
 80027e2:	4b06      	ldr	r3, [pc, #24]	; (80027fc <HAL_RCC_OscConfig+0x824>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	60cb      	str	r3, [r1, #12]
 80027e8:	e001      	b.n	80027ee <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3720      	adds	r7, #32
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40021000 	.word	0x40021000
 80027fc:	feeefffc 	.word	0xfeeefffc

08002800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0e7      	b.n	80029e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002814:	4b75      	ldr	r3, [pc, #468]	; (80029ec <HAL_RCC_ClockConfig+0x1ec>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d910      	bls.n	8002844 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002822:	4b72      	ldr	r3, [pc, #456]	; (80029ec <HAL_RCC_ClockConfig+0x1ec>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 0207 	bic.w	r2, r3, #7
 800282a:	4970      	ldr	r1, [pc, #448]	; (80029ec <HAL_RCC_ClockConfig+0x1ec>)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	4313      	orrs	r3, r2
 8002830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002832:	4b6e      	ldr	r3, [pc, #440]	; (80029ec <HAL_RCC_ClockConfig+0x1ec>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d001      	beq.n	8002844 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e0cf      	b.n	80029e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d010      	beq.n	8002872 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	4b66      	ldr	r3, [pc, #408]	; (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800285c:	429a      	cmp	r2, r3
 800285e:	d908      	bls.n	8002872 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002860:	4b63      	ldr	r3, [pc, #396]	; (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	4960      	ldr	r1, [pc, #384]	; (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 800286e:	4313      	orrs	r3, r2
 8002870:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d04c      	beq.n	8002918 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b03      	cmp	r3, #3
 8002884:	d107      	bne.n	8002896 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002886:	4b5a      	ldr	r3, [pc, #360]	; (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d121      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e0a6      	b.n	80029e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d107      	bne.n	80028ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800289e:	4b54      	ldr	r3, [pc, #336]	; (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d115      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e09a      	b.n	80029e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d107      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028b6:	4b4e      	ldr	r3, [pc, #312]	; (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d109      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e08e      	b.n	80029e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028c6:	4b4a      	ldr	r3, [pc, #296]	; (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e086      	b.n	80029e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028d6:	4b46      	ldr	r3, [pc, #280]	; (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f023 0203 	bic.w	r2, r3, #3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4943      	ldr	r1, [pc, #268]	; (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028e8:	f7ff f87a 	bl	80019e0 <HAL_GetTick>
 80028ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ee:	e00a      	b.n	8002906 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f0:	f7ff f876 	bl	80019e0 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fe:	4293      	cmp	r3, r2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e06e      	b.n	80029e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002906:	4b3a      	ldr	r3, [pc, #232]	; (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 020c 	and.w	r2, r3, #12
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	429a      	cmp	r2, r3
 8002916:	d1eb      	bne.n	80028f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d010      	beq.n	8002946 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	4b31      	ldr	r3, [pc, #196]	; (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002930:	429a      	cmp	r2, r3
 8002932:	d208      	bcs.n	8002946 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002934:	4b2e      	ldr	r3, [pc, #184]	; (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	492b      	ldr	r1, [pc, #172]	; (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002942:	4313      	orrs	r3, r2
 8002944:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002946:	4b29      	ldr	r3, [pc, #164]	; (80029ec <HAL_RCC_ClockConfig+0x1ec>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d210      	bcs.n	8002976 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002954:	4b25      	ldr	r3, [pc, #148]	; (80029ec <HAL_RCC_ClockConfig+0x1ec>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f023 0207 	bic.w	r2, r3, #7
 800295c:	4923      	ldr	r1, [pc, #140]	; (80029ec <HAL_RCC_ClockConfig+0x1ec>)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	4313      	orrs	r3, r2
 8002962:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002964:	4b21      	ldr	r3, [pc, #132]	; (80029ec <HAL_RCC_ClockConfig+0x1ec>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d001      	beq.n	8002976 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e036      	b.n	80029e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	2b00      	cmp	r3, #0
 8002980:	d008      	beq.n	8002994 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002982:	4b1b      	ldr	r3, [pc, #108]	; (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	4918      	ldr	r1, [pc, #96]	; (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002990:	4313      	orrs	r3, r2
 8002992:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d009      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029a0:	4b13      	ldr	r3, [pc, #76]	; (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	4910      	ldr	r1, [pc, #64]	; (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029b4:	f000 f824 	bl	8002a00 <HAL_RCC_GetSysClockFreq>
 80029b8:	4602      	mov	r2, r0
 80029ba:	4b0d      	ldr	r3, [pc, #52]	; (80029f0 <HAL_RCC_ClockConfig+0x1f0>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	091b      	lsrs	r3, r3, #4
 80029c0:	f003 030f 	and.w	r3, r3, #15
 80029c4:	490b      	ldr	r1, [pc, #44]	; (80029f4 <HAL_RCC_ClockConfig+0x1f4>)
 80029c6:	5ccb      	ldrb	r3, [r1, r3]
 80029c8:	f003 031f 	and.w	r3, r3, #31
 80029cc:	fa22 f303 	lsr.w	r3, r2, r3
 80029d0:	4a09      	ldr	r2, [pc, #36]	; (80029f8 <HAL_RCC_ClockConfig+0x1f8>)
 80029d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029d4:	4b09      	ldr	r3, [pc, #36]	; (80029fc <HAL_RCC_ClockConfig+0x1fc>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fe ffb1 	bl	8001940 <HAL_InitTick>
 80029de:	4603      	mov	r3, r0
 80029e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80029e2:	7afb      	ldrb	r3, [r7, #11]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40022000 	.word	0x40022000
 80029f0:	40021000 	.word	0x40021000
 80029f4:	08005850 	.word	0x08005850
 80029f8:	20000000 	.word	0x20000000
 80029fc:	20000004 	.word	0x20000004

08002a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b089      	sub	sp, #36	; 0x24
 8002a04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a0e:	4b3e      	ldr	r3, [pc, #248]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 030c 	and.w	r3, r3, #12
 8002a16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a18:	4b3b      	ldr	r3, [pc, #236]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d005      	beq.n	8002a34 <HAL_RCC_GetSysClockFreq+0x34>
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	2b0c      	cmp	r3, #12
 8002a2c:	d121      	bne.n	8002a72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d11e      	bne.n	8002a72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a34:	4b34      	ldr	r3, [pc, #208]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0308 	and.w	r3, r3, #8
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d107      	bne.n	8002a50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a40:	4b31      	ldr	r3, [pc, #196]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a46:	0a1b      	lsrs	r3, r3, #8
 8002a48:	f003 030f 	and.w	r3, r3, #15
 8002a4c:	61fb      	str	r3, [r7, #28]
 8002a4e:	e005      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a50:	4b2d      	ldr	r3, [pc, #180]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a5c:	4a2b      	ldr	r2, [pc, #172]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10d      	bne.n	8002a88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a70:	e00a      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d102      	bne.n	8002a7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a78:	4b25      	ldr	r3, [pc, #148]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a7a:	61bb      	str	r3, [r7, #24]
 8002a7c:	e004      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d101      	bne.n	8002a88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a84:	4b23      	ldr	r3, [pc, #140]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	2b0c      	cmp	r3, #12
 8002a8c:	d134      	bne.n	8002af8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a8e:	4b1e      	ldr	r3, [pc, #120]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d003      	beq.n	8002aa6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d003      	beq.n	8002aac <HAL_RCC_GetSysClockFreq+0xac>
 8002aa4:	e005      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002aa6:	4b1a      	ldr	r3, [pc, #104]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x110>)
 8002aa8:	617b      	str	r3, [r7, #20]
      break;
 8002aaa:	e005      	b.n	8002ab8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002aac:	4b19      	ldr	r3, [pc, #100]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x114>)
 8002aae:	617b      	str	r3, [r7, #20]
      break;
 8002ab0:	e002      	b.n	8002ab8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	617b      	str	r3, [r7, #20]
      break;
 8002ab6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ab8:	4b13      	ldr	r3, [pc, #76]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ac6:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	0a1b      	lsrs	r3, r3, #8
 8002acc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	fb03 f202 	mul.w	r2, r3, r2
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002adc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ade:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	0e5b      	lsrs	r3, r3, #25
 8002ae4:	f003 0303 	and.w	r3, r3, #3
 8002ae8:	3301      	adds	r3, #1
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002af8:	69bb      	ldr	r3, [r7, #24]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3724      	adds	r7, #36	; 0x24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	08005868 	.word	0x08005868
 8002b10:	00f42400 	.word	0x00f42400
 8002b14:	007a1200 	.word	0x007a1200

08002b18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b1c:	4b03      	ldr	r3, [pc, #12]	; (8002b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	20000000 	.word	0x20000000

08002b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b34:	f7ff fff0 	bl	8002b18 <HAL_RCC_GetHCLKFreq>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	0a1b      	lsrs	r3, r3, #8
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	4904      	ldr	r1, [pc, #16]	; (8002b58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b46:	5ccb      	ldrb	r3, [r1, r3]
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40021000 	.word	0x40021000
 8002b58:	08005860 	.word	0x08005860

08002b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b60:	f7ff ffda 	bl	8002b18 <HAL_RCC_GetHCLKFreq>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	0adb      	lsrs	r3, r3, #11
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	4904      	ldr	r1, [pc, #16]	; (8002b84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b72:	5ccb      	ldrb	r3, [r1, r3]
 8002b74:	f003 031f 	and.w	r3, r3, #31
 8002b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40021000 	.word	0x40021000
 8002b84:	08005860 	.word	0x08005860

08002b88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b90:	2300      	movs	r3, #0
 8002b92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b94:	4b2a      	ldr	r3, [pc, #168]	; (8002c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ba0:	f7ff f9b6 	bl	8001f10 <HAL_PWREx_GetVoltageRange>
 8002ba4:	6178      	str	r0, [r7, #20]
 8002ba6:	e014      	b.n	8002bd2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ba8:	4b25      	ldr	r3, [pc, #148]	; (8002c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bac:	4a24      	ldr	r2, [pc, #144]	; (8002c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb2:	6593      	str	r3, [r2, #88]	; 0x58
 8002bb4:	4b22      	ldr	r3, [pc, #136]	; (8002c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002bc0:	f7ff f9a6 	bl	8001f10 <HAL_PWREx_GetVoltageRange>
 8002bc4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bc6:	4b1e      	ldr	r3, [pc, #120]	; (8002c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bca:	4a1d      	ldr	r2, [pc, #116]	; (8002c40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bd0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bd8:	d10b      	bne.n	8002bf2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b80      	cmp	r3, #128	; 0x80
 8002bde:	d919      	bls.n	8002c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2ba0      	cmp	r3, #160	; 0xa0
 8002be4:	d902      	bls.n	8002bec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002be6:	2302      	movs	r3, #2
 8002be8:	613b      	str	r3, [r7, #16]
 8002bea:	e013      	b.n	8002c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bec:	2301      	movs	r3, #1
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	e010      	b.n	8002c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b80      	cmp	r3, #128	; 0x80
 8002bf6:	d902      	bls.n	8002bfe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	e00a      	b.n	8002c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b80      	cmp	r3, #128	; 0x80
 8002c02:	d102      	bne.n	8002c0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c04:	2302      	movs	r3, #2
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	e004      	b.n	8002c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b70      	cmp	r3, #112	; 0x70
 8002c0e:	d101      	bne.n	8002c14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c10:	2301      	movs	r3, #1
 8002c12:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c14:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f023 0207 	bic.w	r2, r3, #7
 8002c1c:	4909      	ldr	r1, [pc, #36]	; (8002c44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c24:	4b07      	ldr	r3, [pc, #28]	; (8002c44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d001      	beq.n	8002c36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40022000 	.word	0x40022000

08002c48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c50:	2300      	movs	r3, #0
 8002c52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c54:	2300      	movs	r3, #0
 8002c56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d031      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c68:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c6c:	d01a      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002c6e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c72:	d814      	bhi.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d009      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c7c:	d10f      	bne.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002c7e:	4b5d      	ldr	r3, [pc, #372]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	4a5c      	ldr	r2, [pc, #368]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c88:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c8a:	e00c      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3304      	adds	r3, #4
 8002c90:	2100      	movs	r1, #0
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 f9ce 	bl	8003034 <RCCEx_PLLSAI1_Config>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c9c:	e003      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	74fb      	strb	r3, [r7, #19]
      break;
 8002ca2:	e000      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002ca4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ca6:	7cfb      	ldrb	r3, [r7, #19]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10b      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cac:	4b51      	ldr	r3, [pc, #324]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cba:	494e      	ldr	r1, [pc, #312]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002cc2:	e001      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc4:	7cfb      	ldrb	r3, [r7, #19]
 8002cc6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 809e 	beq.w	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cda:	4b46      	ldr	r3, [pc, #280]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002cea:	2300      	movs	r3, #0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00d      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf0:	4b40      	ldr	r3, [pc, #256]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf4:	4a3f      	ldr	r2, [pc, #252]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cfa:	6593      	str	r3, [r2, #88]	; 0x58
 8002cfc:	4b3d      	ldr	r3, [pc, #244]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d04:	60bb      	str	r3, [r7, #8]
 8002d06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d0c:	4b3a      	ldr	r3, [pc, #232]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a39      	ldr	r2, [pc, #228]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d18:	f7fe fe62 	bl	80019e0 <HAL_GetTick>
 8002d1c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d1e:	e009      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d20:	f7fe fe5e 	bl	80019e0 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d902      	bls.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	74fb      	strb	r3, [r7, #19]
        break;
 8002d32:	e005      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d34:	4b30      	ldr	r3, [pc, #192]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0ef      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002d40:	7cfb      	ldrb	r3, [r7, #19]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d15a      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d46:	4b2b      	ldr	r3, [pc, #172]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d50:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d01e      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d019      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d62:	4b24      	ldr	r3, [pc, #144]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d6c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d6e:	4b21      	ldr	r3, [pc, #132]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d74:	4a1f      	ldr	r2, [pc, #124]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d7e:	4b1d      	ldr	r3, [pc, #116]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d84:	4a1b      	ldr	r2, [pc, #108]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d8e:	4a19      	ldr	r2, [pc, #100]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d016      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da0:	f7fe fe1e 	bl	80019e0 <HAL_GetTick>
 8002da4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002da6:	e00b      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da8:	f7fe fe1a 	bl	80019e0 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d902      	bls.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	74fb      	strb	r3, [r7, #19]
            break;
 8002dbe:	e006      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0ec      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002dce:	7cfb      	ldrb	r3, [r7, #19]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10b      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dd4:	4b07      	ldr	r3, [pc, #28]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002de2:	4904      	ldr	r1, [pc, #16]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002dea:	e009      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002dec:	7cfb      	ldrb	r3, [r7, #19]
 8002dee:	74bb      	strb	r3, [r7, #18]
 8002df0:	e006      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002df2:	bf00      	nop
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dfc:	7cfb      	ldrb	r3, [r7, #19]
 8002dfe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e00:	7c7b      	ldrb	r3, [r7, #17]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d105      	bne.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e06:	4b8a      	ldr	r3, [pc, #552]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0a:	4a89      	ldr	r2, [pc, #548]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00a      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e1e:	4b84      	ldr	r3, [pc, #528]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e24:	f023 0203 	bic.w	r2, r3, #3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	4980      	ldr	r1, [pc, #512]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00a      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e40:	4b7b      	ldr	r3, [pc, #492]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e46:	f023 020c 	bic.w	r2, r3, #12
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	4978      	ldr	r1, [pc, #480]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0320 	and.w	r3, r3, #32
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e62:	4b73      	ldr	r3, [pc, #460]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e68:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	496f      	ldr	r1, [pc, #444]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00a      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e84:	4b6a      	ldr	r3, [pc, #424]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e92:	4967      	ldr	r1, [pc, #412]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00a      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ea6:	4b62      	ldr	r3, [pc, #392]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb4:	495e      	ldr	r1, [pc, #376]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00a      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ec8:	4b59      	ldr	r3, [pc, #356]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ece:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed6:	4956      	ldr	r1, [pc, #344]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002eea:	4b51      	ldr	r3, [pc, #324]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	494d      	ldr	r1, [pc, #308]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d028      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f0c:	4b48      	ldr	r3, [pc, #288]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	4945      	ldr	r1, [pc, #276]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f2a:	d106      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f2c:	4b40      	ldr	r3, [pc, #256]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	4a3f      	ldr	r2, [pc, #252]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f36:	60d3      	str	r3, [r2, #12]
 8002f38:	e011      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f42:	d10c      	bne.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3304      	adds	r3, #4
 8002f48:	2101      	movs	r1, #1
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 f872 	bl	8003034 <RCCEx_PLLSAI1_Config>
 8002f50:	4603      	mov	r3, r0
 8002f52:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f54:	7cfb      	ldrb	r3, [r7, #19]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002f5a:	7cfb      	ldrb	r3, [r7, #19]
 8002f5c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d028      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f6a:	4b31      	ldr	r3, [pc, #196]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f78:	492d      	ldr	r1, [pc, #180]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f88:	d106      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f8a:	4b29      	ldr	r3, [pc, #164]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	4a28      	ldr	r2, [pc, #160]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f94:	60d3      	str	r3, [r2, #12]
 8002f96:	e011      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 f843 	bl	8003034 <RCCEx_PLLSAI1_Config>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fb2:	7cfb      	ldrb	r3, [r7, #19]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002fb8:	7cfb      	ldrb	r3, [r7, #19]
 8002fba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d01c      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fc8:	4b19      	ldr	r3, [pc, #100]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd6:	4916      	ldr	r1, [pc, #88]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fe6:	d10c      	bne.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3304      	adds	r3, #4
 8002fec:	2102      	movs	r1, #2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 f820 	bl	8003034 <RCCEx_PLLSAI1_Config>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ff8:	7cfb      	ldrb	r3, [r7, #19]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002ffe:	7cfb      	ldrb	r3, [r7, #19]
 8003000:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800300e:	4b08      	ldr	r3, [pc, #32]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003014:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301c:	4904      	ldr	r1, [pc, #16]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003024:	7cbb      	ldrb	r3, [r7, #18]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40021000 	.word	0x40021000

08003034 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003042:	4b74      	ldr	r3, [pc, #464]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d018      	beq.n	8003080 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800304e:	4b71      	ldr	r3, [pc, #452]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f003 0203 	and.w	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d10d      	bne.n	800307a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
       ||
 8003062:	2b00      	cmp	r3, #0
 8003064:	d009      	beq.n	800307a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003066:	4b6b      	ldr	r3, [pc, #428]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	091b      	lsrs	r3, r3, #4
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
       ||
 8003076:	429a      	cmp	r2, r3
 8003078:	d047      	beq.n	800310a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	73fb      	strb	r3, [r7, #15]
 800307e:	e044      	b.n	800310a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b03      	cmp	r3, #3
 8003086:	d018      	beq.n	80030ba <RCCEx_PLLSAI1_Config+0x86>
 8003088:	2b03      	cmp	r3, #3
 800308a:	d825      	bhi.n	80030d8 <RCCEx_PLLSAI1_Config+0xa4>
 800308c:	2b01      	cmp	r3, #1
 800308e:	d002      	beq.n	8003096 <RCCEx_PLLSAI1_Config+0x62>
 8003090:	2b02      	cmp	r3, #2
 8003092:	d009      	beq.n	80030a8 <RCCEx_PLLSAI1_Config+0x74>
 8003094:	e020      	b.n	80030d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003096:	4b5f      	ldr	r3, [pc, #380]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d11d      	bne.n	80030de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030a6:	e01a      	b.n	80030de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030a8:	4b5a      	ldr	r3, [pc, #360]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d116      	bne.n	80030e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b8:	e013      	b.n	80030e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030ba:	4b56      	ldr	r3, [pc, #344]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10f      	bne.n	80030e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030c6:	4b53      	ldr	r3, [pc, #332]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d109      	bne.n	80030e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030d6:	e006      	b.n	80030e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	73fb      	strb	r3, [r7, #15]
      break;
 80030dc:	e004      	b.n	80030e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030de:	bf00      	nop
 80030e0:	e002      	b.n	80030e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030e2:	bf00      	nop
 80030e4:	e000      	b.n	80030e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10d      	bne.n	800310a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030ee:	4b49      	ldr	r3, [pc, #292]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6819      	ldr	r1, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	3b01      	subs	r3, #1
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	430b      	orrs	r3, r1
 8003104:	4943      	ldr	r1, [pc, #268]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003106:	4313      	orrs	r3, r2
 8003108:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800310a:	7bfb      	ldrb	r3, [r7, #15]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d17c      	bne.n	800320a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003110:	4b40      	ldr	r3, [pc, #256]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a3f      	ldr	r2, [pc, #252]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003116:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800311a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800311c:	f7fe fc60 	bl	80019e0 <HAL_GetTick>
 8003120:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003122:	e009      	b.n	8003138 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003124:	f7fe fc5c 	bl	80019e0 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d902      	bls.n	8003138 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	73fb      	strb	r3, [r7, #15]
        break;
 8003136:	e005      	b.n	8003144 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003138:	4b36      	ldr	r3, [pc, #216]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e0>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1ef      	bne.n	8003124 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003144:	7bfb      	ldrb	r3, [r7, #15]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d15f      	bne.n	800320a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d110      	bne.n	8003172 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003150:	4b30      	ldr	r3, [pc, #192]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003158:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6892      	ldr	r2, [r2, #8]
 8003160:	0211      	lsls	r1, r2, #8
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	68d2      	ldr	r2, [r2, #12]
 8003166:	06d2      	lsls	r2, r2, #27
 8003168:	430a      	orrs	r2, r1
 800316a:	492a      	ldr	r1, [pc, #168]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e0>)
 800316c:	4313      	orrs	r3, r2
 800316e:	610b      	str	r3, [r1, #16]
 8003170:	e027      	b.n	80031c2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d112      	bne.n	800319e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003178:	4b26      	ldr	r3, [pc, #152]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e0>)
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003180:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6892      	ldr	r2, [r2, #8]
 8003188:	0211      	lsls	r1, r2, #8
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6912      	ldr	r2, [r2, #16]
 800318e:	0852      	lsrs	r2, r2, #1
 8003190:	3a01      	subs	r2, #1
 8003192:	0552      	lsls	r2, r2, #21
 8003194:	430a      	orrs	r2, r1
 8003196:	491f      	ldr	r1, [pc, #124]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003198:	4313      	orrs	r3, r2
 800319a:	610b      	str	r3, [r1, #16]
 800319c:	e011      	b.n	80031c2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800319e:	4b1d      	ldr	r3, [pc, #116]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6892      	ldr	r2, [r2, #8]
 80031ae:	0211      	lsls	r1, r2, #8
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6952      	ldr	r2, [r2, #20]
 80031b4:	0852      	lsrs	r2, r2, #1
 80031b6:	3a01      	subs	r2, #1
 80031b8:	0652      	lsls	r2, r2, #25
 80031ba:	430a      	orrs	r2, r1
 80031bc:	4915      	ldr	r1, [pc, #84]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80031c2:	4b14      	ldr	r3, [pc, #80]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a13      	ldr	r2, [pc, #76]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ce:	f7fe fc07 	bl	80019e0 <HAL_GetTick>
 80031d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031d4:	e009      	b.n	80031ea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031d6:	f7fe fc03 	bl	80019e0 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d902      	bls.n	80031ea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	73fb      	strb	r3, [r7, #15]
          break;
 80031e8:	e005      	b.n	80031f6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031ea:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0ef      	beq.n	80031d6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d106      	bne.n	800320a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031fc:	4b05      	ldr	r3, [pc, #20]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	4903      	ldr	r1, [pc, #12]	; (8003214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003206:	4313      	orrs	r3, r2
 8003208:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800320a:	7bfb      	ldrb	r3, [r7, #15]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40021000 	.word	0x40021000

08003218 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e095      	b.n	8003356 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	2b00      	cmp	r3, #0
 8003230:	d108      	bne.n	8003244 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800323a:	d009      	beq.n	8003250 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	61da      	str	r2, [r3, #28]
 8003242:	e005      	b.n	8003250 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d106      	bne.n	8003270 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fe fa1a 	bl	80016a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003286:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003290:	d902      	bls.n	8003298 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	e002      	b.n	800329e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800329c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80032a6:	d007      	beq.n	80032b8 <HAL_SPI_Init+0xa0>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032b0:	d002      	beq.n	80032b8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80032c8:	431a      	orrs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	431a      	orrs	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fa:	ea42 0103 	orr.w	r1, r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003302:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	0c1b      	lsrs	r3, r3, #16
 8003314:	f003 0204 	and.w	r2, r3, #4
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	f003 0310 	and.w	r3, r3, #16
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003334:	ea42 0103 	orr.w	r1, r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b088      	sub	sp, #32
 8003362:	af00      	add	r7, sp, #0
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	603b      	str	r3, [r7, #0]
 800336a:	4613      	mov	r3, r2
 800336c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800336e:	2300      	movs	r3, #0
 8003370:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_SPI_Transmit+0x22>
 800337c:	2302      	movs	r3, #2
 800337e:	e158      	b.n	8003632 <HAL_SPI_Transmit+0x2d4>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003388:	f7fe fb2a 	bl	80019e0 <HAL_GetTick>
 800338c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b01      	cmp	r3, #1
 800339c:	d002      	beq.n	80033a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800339e:	2302      	movs	r3, #2
 80033a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033a2:	e13d      	b.n	8003620 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <HAL_SPI_Transmit+0x52>
 80033aa:	88fb      	ldrh	r3, [r7, #6]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d102      	bne.n	80033b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033b4:	e134      	b.n	8003620 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2203      	movs	r2, #3
 80033ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	88fa      	ldrh	r2, [r7, #6]
 80033ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	88fa      	ldrh	r2, [r7, #6]
 80033d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003400:	d10f      	bne.n	8003422 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003410:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003420:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342c:	2b40      	cmp	r3, #64	; 0x40
 800342e:	d007      	beq.n	8003440 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800343e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003448:	d94b      	bls.n	80034e2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <HAL_SPI_Transmit+0xfa>
 8003452:	8afb      	ldrh	r3, [r7, #22]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d13e      	bne.n	80034d6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345c:	881a      	ldrh	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003468:	1c9a      	adds	r2, r3, #2
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003472:	b29b      	uxth	r3, r3
 8003474:	3b01      	subs	r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800347c:	e02b      	b.n	80034d6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b02      	cmp	r3, #2
 800348a:	d112      	bne.n	80034b2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003490:	881a      	ldrh	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349c:	1c9a      	adds	r2, r3, #2
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	3b01      	subs	r3, #1
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034b0:	e011      	b.n	80034d6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034b2:	f7fe fa95 	bl	80019e0 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d803      	bhi.n	80034ca <HAL_SPI_Transmit+0x16c>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034c8:	d102      	bne.n	80034d0 <HAL_SPI_Transmit+0x172>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d102      	bne.n	80034d6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034d4:	e0a4      	b.n	8003620 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1ce      	bne.n	800347e <HAL_SPI_Transmit+0x120>
 80034e0:	e07c      	b.n	80035dc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <HAL_SPI_Transmit+0x192>
 80034ea:	8afb      	ldrh	r3, [r7, #22]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d170      	bne.n	80035d2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d912      	bls.n	8003520 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fe:	881a      	ldrh	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350a:	1c9a      	adds	r2, r3, #2
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003514:	b29b      	uxth	r3, r3
 8003516:	3b02      	subs	r3, #2
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800351e:	e058      	b.n	80035d2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	330c      	adds	r3, #12
 800352a:	7812      	ldrb	r2, [r2, #0]
 800352c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800353c:	b29b      	uxth	r3, r3
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003546:	e044      	b.n	80035d2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b02      	cmp	r3, #2
 8003554:	d12b      	bne.n	80035ae <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800355a:	b29b      	uxth	r3, r3
 800355c:	2b01      	cmp	r3, #1
 800355e:	d912      	bls.n	8003586 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003564:	881a      	ldrh	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003570:	1c9a      	adds	r2, r3, #2
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b02      	subs	r3, #2
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003584:	e025      	b.n	80035d2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	330c      	adds	r3, #12
 8003590:	7812      	ldrb	r2, [r2, #0]
 8003592:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035ac:	e011      	b.n	80035d2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035ae:	f7fe fa17 	bl	80019e0 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d803      	bhi.n	80035c6 <HAL_SPI_Transmit+0x268>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035c4:	d102      	bne.n	80035cc <HAL_SPI_Transmit+0x26e>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d102      	bne.n	80035d2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035d0:	e026      	b.n	8003620 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1b5      	bne.n	8003548 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	6839      	ldr	r1, [r7, #0]
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 fce3 	bl	8003fac <SPI_EndRxTxTransaction>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10a      	bne.n	8003610 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035fa:	2300      	movs	r3, #0
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	613b      	str	r3, [r7, #16]
 800360e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	77fb      	strb	r3, [r7, #31]
 800361c:	e000      	b.n	8003620 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800361e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003630:	7ffb      	ldrb	r3, [r7, #31]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3720      	adds	r7, #32
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b088      	sub	sp, #32
 800363e:	af02      	add	r7, sp, #8
 8003640:	60f8      	str	r0, [r7, #12]
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	603b      	str	r3, [r7, #0]
 8003646:	4613      	mov	r3, r2
 8003648:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003656:	d112      	bne.n	800367e <HAL_SPI_Receive+0x44>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10e      	bne.n	800367e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2204      	movs	r2, #4
 8003664:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003668:	88fa      	ldrh	r2, [r7, #6]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	4613      	mov	r3, r2
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	68b9      	ldr	r1, [r7, #8]
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 f910 	bl	800389a <HAL_SPI_TransmitReceive>
 800367a:	4603      	mov	r3, r0
 800367c:	e109      	b.n	8003892 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_SPI_Receive+0x52>
 8003688:	2302      	movs	r3, #2
 800368a:	e102      	b.n	8003892 <HAL_SPI_Receive+0x258>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003694:	f7fe f9a4 	bl	80019e0 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d002      	beq.n	80036ac <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80036a6:	2302      	movs	r3, #2
 80036a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036aa:	e0e9      	b.n	8003880 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <HAL_SPI_Receive+0x7e>
 80036b2:	88fb      	ldrh	r3, [r7, #6]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d102      	bne.n	80036be <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036bc:	e0e0      	b.n	8003880 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2204      	movs	r2, #4
 80036c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	88fa      	ldrh	r2, [r7, #6]
 80036d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	88fa      	ldrh	r2, [r7, #6]
 80036de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003708:	d908      	bls.n	800371c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	e007      	b.n	800372c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800372a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003734:	d10f      	bne.n	8003756 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003744:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003754:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003760:	2b40      	cmp	r3, #64	; 0x40
 8003762:	d007      	beq.n	8003774 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003772:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800377c:	d867      	bhi.n	800384e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800377e:	e030      	b.n	80037e2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b01      	cmp	r3, #1
 800378c:	d117      	bne.n	80037be <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f103 020c 	add.w	r2, r3, #12
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	7812      	ldrb	r2, [r2, #0]
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80037bc:	e011      	b.n	80037e2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037be:	f7fe f90f 	bl	80019e0 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d803      	bhi.n	80037d6 <HAL_SPI_Receive+0x19c>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037d4:	d102      	bne.n	80037dc <HAL_SPI_Receive+0x1a2>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d102      	bne.n	80037e2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	75fb      	strb	r3, [r7, #23]
          goto error;
 80037e0:	e04e      	b.n	8003880 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1c8      	bne.n	8003780 <HAL_SPI_Receive+0x146>
 80037ee:	e034      	b.n	800385a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d115      	bne.n	800382a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	b292      	uxth	r2, r2
 800380a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	1c9a      	adds	r2, r3, #2
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800381c:	b29b      	uxth	r3, r3
 800381e:	3b01      	subs	r3, #1
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003828:	e011      	b.n	800384e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800382a:	f7fe f8d9 	bl	80019e0 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d803      	bhi.n	8003842 <HAL_SPI_Receive+0x208>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003840:	d102      	bne.n	8003848 <HAL_SPI_Receive+0x20e>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d102      	bne.n	800384e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800384c:	e018      	b.n	8003880 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003854:	b29b      	uxth	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1ca      	bne.n	80037f0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	6839      	ldr	r1, [r7, #0]
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 fb4c 	bl	8003efc <SPI_EndRxTransaction>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2220      	movs	r2, #32
 800386e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	75fb      	strb	r3, [r7, #23]
 800387c:	e000      	b.n	8003880 <HAL_SPI_Receive+0x246>
  }

error :
 800387e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003890:	7dfb      	ldrb	r3, [r7, #23]
}
 8003892:	4618      	mov	r0, r3
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b08a      	sub	sp, #40	; 0x28
 800389e:	af00      	add	r7, sp, #0
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	607a      	str	r2, [r7, #4]
 80038a6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80038a8:	2301      	movs	r3, #1
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d101      	bne.n	80038c0 <HAL_SPI_TransmitReceive+0x26>
 80038bc:	2302      	movs	r3, #2
 80038be:	e1fb      	b.n	8003cb8 <HAL_SPI_TransmitReceive+0x41e>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038c8:	f7fe f88a 	bl	80019e0 <HAL_GetTick>
 80038cc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038d4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80038dc:	887b      	ldrh	r3, [r7, #2]
 80038de:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80038e0:	887b      	ldrh	r3, [r7, #2]
 80038e2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038e4:	7efb      	ldrb	r3, [r7, #27]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d00e      	beq.n	8003908 <HAL_SPI_TransmitReceive+0x6e>
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038f0:	d106      	bne.n	8003900 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d102      	bne.n	8003900 <HAL_SPI_TransmitReceive+0x66>
 80038fa:	7efb      	ldrb	r3, [r7, #27]
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d003      	beq.n	8003908 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003900:	2302      	movs	r3, #2
 8003902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003906:	e1cd      	b.n	8003ca4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d005      	beq.n	800391a <HAL_SPI_TransmitReceive+0x80>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d002      	beq.n	800391a <HAL_SPI_TransmitReceive+0x80>
 8003914:	887b      	ldrh	r3, [r7, #2]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d103      	bne.n	8003922 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003920:	e1c0      	b.n	8003ca4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b04      	cmp	r3, #4
 800392c:	d003      	beq.n	8003936 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2205      	movs	r2, #5
 8003932:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	887a      	ldrh	r2, [r7, #2]
 8003946:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	887a      	ldrh	r2, [r7, #2]
 800394e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	887a      	ldrh	r2, [r7, #2]
 800395c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	887a      	ldrh	r2, [r7, #2]
 8003962:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003978:	d802      	bhi.n	8003980 <HAL_SPI_TransmitReceive+0xe6>
 800397a:	8a3b      	ldrh	r3, [r7, #16]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d908      	bls.n	8003992 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800398e:	605a      	str	r2, [r3, #4]
 8003990:	e007      	b.n	80039a2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039a0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ac:	2b40      	cmp	r3, #64	; 0x40
 80039ae:	d007      	beq.n	80039c0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039c8:	d97c      	bls.n	8003ac4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <HAL_SPI_TransmitReceive+0x13e>
 80039d2:	8a7b      	ldrh	r3, [r7, #18]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d169      	bne.n	8003aac <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039dc:	881a      	ldrh	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e8:	1c9a      	adds	r2, r3, #2
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	3b01      	subs	r3, #1
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039fc:	e056      	b.n	8003aac <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d11b      	bne.n	8003a44 <HAL_SPI_TransmitReceive+0x1aa>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d016      	beq.n	8003a44 <HAL_SPI_TransmitReceive+0x1aa>
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d113      	bne.n	8003a44 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a20:	881a      	ldrh	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2c:	1c9a      	adds	r2, r3, #2
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d11c      	bne.n	8003a8c <HAL_SPI_TransmitReceive+0x1f2>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d016      	beq.n	8003a8c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	b292      	uxth	r2, r2
 8003a6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	1c9a      	adds	r2, r3, #2
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a8c:	f7fd ffa8 	bl	80019e0 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d807      	bhi.n	8003aac <HAL_SPI_TransmitReceive+0x212>
 8003a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aa2:	d003      	beq.n	8003aac <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003aaa:	e0fb      	b.n	8003ca4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1a3      	bne.n	80039fe <HAL_SPI_TransmitReceive+0x164>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d19d      	bne.n	80039fe <HAL_SPI_TransmitReceive+0x164>
 8003ac2:	e0df      	b.n	8003c84 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_SPI_TransmitReceive+0x23a>
 8003acc:	8a7b      	ldrh	r3, [r7, #18]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	f040 80cb 	bne.w	8003c6a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d912      	bls.n	8003b04 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae2:	881a      	ldrh	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aee:	1c9a      	adds	r2, r3, #2
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	3b02      	subs	r3, #2
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b02:	e0b2      	b.n	8003c6a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	330c      	adds	r3, #12
 8003b0e:	7812      	ldrb	r2, [r2, #0]
 8003b10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b16:	1c5a      	adds	r2, r3, #1
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b2a:	e09e      	b.n	8003c6a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d134      	bne.n	8003ba4 <HAL_SPI_TransmitReceive+0x30a>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d02f      	beq.n	8003ba4 <HAL_SPI_TransmitReceive+0x30a>
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d12c      	bne.n	8003ba4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d912      	bls.n	8003b7a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b58:	881a      	ldrh	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b64:	1c9a      	adds	r2, r3, #2
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	3b02      	subs	r3, #2
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b78:	e012      	b.n	8003ba0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	330c      	adds	r3, #12
 8003b84:	7812      	ldrb	r2, [r2, #0]
 8003b86:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d148      	bne.n	8003c44 <HAL_SPI_TransmitReceive+0x3aa>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d042      	beq.n	8003c44 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d923      	bls.n	8003c12 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68da      	ldr	r2, [r3, #12]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	b292      	uxth	r2, r2
 8003bd6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	1c9a      	adds	r2, r3, #2
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	3b02      	subs	r3, #2
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d81f      	bhi.n	8003c40 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c0e:	605a      	str	r2, [r3, #4]
 8003c10:	e016      	b.n	8003c40 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f103 020c 	add.w	r2, r3, #12
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	7812      	ldrb	r2, [r2, #0]
 8003c20:	b2d2      	uxtb	r2, r2
 8003c22:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	3b01      	subs	r3, #1
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c40:	2301      	movs	r3, #1
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c44:	f7fd fecc 	bl	80019e0 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d803      	bhi.n	8003c5c <HAL_SPI_TransmitReceive+0x3c2>
 8003c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c5a:	d102      	bne.n	8003c62 <HAL_SPI_TransmitReceive+0x3c8>
 8003c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d103      	bne.n	8003c6a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003c68:	e01c      	b.n	8003ca4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f47f af5b 	bne.w	8003b2c <HAL_SPI_TransmitReceive+0x292>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f47f af54 	bne.w	8003b2c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c84:	69fa      	ldr	r2, [r7, #28]
 8003c86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 f98f 	bl	8003fac <SPI_EndRxTxTransaction>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d006      	beq.n	8003ca2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	661a      	str	r2, [r3, #96]	; 0x60
 8003ca0:	e000      	b.n	8003ca4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003ca2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003cb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3728      	adds	r7, #40	; 0x28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003cd0:	f7fd fe86 	bl	80019e0 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd8:	1a9b      	subs	r3, r3, r2
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	4413      	add	r3, r2
 8003cde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ce0:	f7fd fe7e 	bl	80019e0 <HAL_GetTick>
 8003ce4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ce6:	4b39      	ldr	r3, [pc, #228]	; (8003dcc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	015b      	lsls	r3, r3, #5
 8003cec:	0d1b      	lsrs	r3, r3, #20
 8003cee:	69fa      	ldr	r2, [r7, #28]
 8003cf0:	fb02 f303 	mul.w	r3, r2, r3
 8003cf4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cf6:	e054      	b.n	8003da2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cfe:	d050      	beq.n	8003da2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d00:	f7fd fe6e 	bl	80019e0 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	69fa      	ldr	r2, [r7, #28]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d902      	bls.n	8003d16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d13d      	bne.n	8003d92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d2e:	d111      	bne.n	8003d54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d38:	d004      	beq.n	8003d44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d42:	d107      	bne.n	8003d54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d5c:	d10f      	bne.n	8003d7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e017      	b.n	8003dc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4013      	ands	r3, r2
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	bf0c      	ite	eq
 8003db2:	2301      	moveq	r3, #1
 8003db4:	2300      	movne	r3, #0
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	461a      	mov	r2, r3
 8003dba:	79fb      	ldrb	r3, [r7, #7]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d19b      	bne.n	8003cf8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3720      	adds	r7, #32
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20000000 	.word	0x20000000

08003dd0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08a      	sub	sp, #40	; 0x28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
 8003ddc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003dde:	2300      	movs	r3, #0
 8003de0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003de2:	f7fd fdfd 	bl	80019e0 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dea:	1a9b      	subs	r3, r3, r2
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	4413      	add	r3, r2
 8003df0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003df2:	f7fd fdf5 	bl	80019e0 <HAL_GetTick>
 8003df6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	330c      	adds	r3, #12
 8003dfe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003e00:	4b3d      	ldr	r3, [pc, #244]	; (8003ef8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	4613      	mov	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	00da      	lsls	r2, r3, #3
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	0d1b      	lsrs	r3, r3, #20
 8003e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e12:	fb02 f303 	mul.w	r3, r2, r3
 8003e16:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003e18:	e060      	b.n	8003edc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e20:	d107      	bne.n	8003e32 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003e30:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e38:	d050      	beq.n	8003edc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e3a:	f7fd fdd1 	bl	80019e0 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d902      	bls.n	8003e50 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d13d      	bne.n	8003ecc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e5e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e68:	d111      	bne.n	8003e8e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e72:	d004      	beq.n	8003e7e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e7c:	d107      	bne.n	8003e8e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e8c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e96:	d10f      	bne.n	8003eb8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003eb6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e010      	b.n	8003eee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689a      	ldr	r2, [r3, #8]
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d196      	bne.n	8003e1a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3728      	adds	r7, #40	; 0x28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	20000000 	.word	0x20000000

08003efc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f10:	d111      	bne.n	8003f36 <SPI_EndRxTransaction+0x3a>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f1a:	d004      	beq.n	8003f26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f24:	d107      	bne.n	8003f36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f34:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2180      	movs	r1, #128	; 0x80
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f7ff febd 	bl	8003cc0 <SPI_WaitFlagStateUntilTimeout>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d007      	beq.n	8003f5c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f50:	f043 0220 	orr.w	r2, r3, #32
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e023      	b.n	8003fa4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f64:	d11d      	bne.n	8003fa2 <SPI_EndRxTransaction+0xa6>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f6e:	d004      	beq.n	8003f7a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f78:	d113      	bne.n	8003fa2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f7ff ff22 	bl	8003dd0 <SPI_WaitFifoStateUntilTimeout>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d007      	beq.n	8003fa2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f96:	f043 0220 	orr.w	r2, r3, #32
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e000      	b.n	8003fa4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f7ff ff03 	bl	8003dd0 <SPI_WaitFifoStateUntilTimeout>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d007      	beq.n	8003fe0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd4:	f043 0220 	orr.w	r2, r3, #32
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e027      	b.n	8004030 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	2180      	movs	r1, #128	; 0x80
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f7ff fe68 	bl	8003cc0 <SPI_WaitFlagStateUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d007      	beq.n	8004006 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ffa:	f043 0220 	orr.w	r2, r3, #32
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e014      	b.n	8004030 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2200      	movs	r2, #0
 800400e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f7ff fedc 	bl	8003dd0 <SPI_WaitFifoStateUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d007      	beq.n	800402e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004022:	f043 0220 	orr.w	r2, r3, #32
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e000      	b.n	8004030 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e040      	b.n	80040cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800404e:	2b00      	cmp	r3, #0
 8004050:	d106      	bne.n	8004060 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7fd fb64 	bl	8001728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2224      	movs	r2, #36	; 0x24
 8004064:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0201 	bic.w	r2, r2, #1
 8004074:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f8c0 	bl	80041fc <UART_SetConfig>
 800407c:	4603      	mov	r3, r0
 800407e:	2b01      	cmp	r3, #1
 8004080:	d101      	bne.n	8004086 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e022      	b.n	80040cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fae0 	bl	8004654 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 fb67 	bl	8004798 <UART_CheckIdleState>
 80040ca:	4603      	mov	r3, r0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08a      	sub	sp, #40	; 0x28
 80040d8:	af02      	add	r7, sp, #8
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	603b      	str	r3, [r7, #0]
 80040e0:	4613      	mov	r3, r2
 80040e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040e8:	2b20      	cmp	r3, #32
 80040ea:	f040 8082 	bne.w	80041f2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <HAL_UART_Transmit+0x26>
 80040f4:	88fb      	ldrh	r3, [r7, #6]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e07a      	b.n	80041f4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_UART_Transmit+0x38>
 8004108:	2302      	movs	r3, #2
 800410a:	e073      	b.n	80041f4 <HAL_UART_Transmit+0x120>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2221      	movs	r2, #33	; 0x21
 8004120:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004122:	f7fd fc5d 	bl	80019e0 <HAL_GetTick>
 8004126:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	88fa      	ldrh	r2, [r7, #6]
 800412c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	88fa      	ldrh	r2, [r7, #6]
 8004134:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004140:	d108      	bne.n	8004154 <HAL_UART_Transmit+0x80>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d104      	bne.n	8004154 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800414a:	2300      	movs	r3, #0
 800414c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	61bb      	str	r3, [r7, #24]
 8004152:	e003      	b.n	800415c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004158:	2300      	movs	r3, #0
 800415a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004164:	e02d      	b.n	80041c2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	2200      	movs	r2, #0
 800416e:	2180      	movs	r1, #128	; 0x80
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 fb5a 	bl	800482a <UART_WaitOnFlagUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e039      	b.n	80041f4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10b      	bne.n	800419e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	881a      	ldrh	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004192:	b292      	uxth	r2, r2
 8004194:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	3302      	adds	r3, #2
 800419a:	61bb      	str	r3, [r7, #24]
 800419c:	e008      	b.n	80041b0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	781a      	ldrb	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	b292      	uxth	r2, r2
 80041a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	3301      	adds	r3, #1
 80041ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1cb      	bne.n	8004166 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2200      	movs	r2, #0
 80041d6:	2140      	movs	r1, #64	; 0x40
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 fb26 	bl	800482a <UART_WaitOnFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e005      	b.n	80041f4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2220      	movs	r2, #32
 80041ec:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80041ee:	2300      	movs	r3, #0
 80041f0:	e000      	b.n	80041f4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80041f2:	2302      	movs	r3, #2
  }
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3720      	adds	r7, #32
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004200:	b08a      	sub	sp, #40	; 0x28
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	431a      	orrs	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	431a      	orrs	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	4313      	orrs	r3, r2
 8004222:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	4bb4      	ldr	r3, [pc, #720]	; (80044fc <UART_SetConfig+0x300>)
 800422c:	4013      	ands	r3, r2
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	6812      	ldr	r2, [r2, #0]
 8004232:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004234:	430b      	orrs	r3, r1
 8004236:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4aa9      	ldr	r2, [pc, #676]	; (8004500 <UART_SetConfig+0x304>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d004      	beq.n	8004268 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004264:	4313      	orrs	r3, r2
 8004266:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004278:	430a      	orrs	r2, r1
 800427a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4aa0      	ldr	r2, [pc, #640]	; (8004504 <UART_SetConfig+0x308>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d126      	bne.n	80042d4 <UART_SetConfig+0xd8>
 8004286:	4ba0      	ldr	r3, [pc, #640]	; (8004508 <UART_SetConfig+0x30c>)
 8004288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428c:	f003 0303 	and.w	r3, r3, #3
 8004290:	2b03      	cmp	r3, #3
 8004292:	d81b      	bhi.n	80042cc <UART_SetConfig+0xd0>
 8004294:	a201      	add	r2, pc, #4	; (adr r2, 800429c <UART_SetConfig+0xa0>)
 8004296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429a:	bf00      	nop
 800429c:	080042ad 	.word	0x080042ad
 80042a0:	080042bd 	.word	0x080042bd
 80042a4:	080042b5 	.word	0x080042b5
 80042a8:	080042c5 	.word	0x080042c5
 80042ac:	2301      	movs	r3, #1
 80042ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042b2:	e080      	b.n	80043b6 <UART_SetConfig+0x1ba>
 80042b4:	2302      	movs	r3, #2
 80042b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ba:	e07c      	b.n	80043b6 <UART_SetConfig+0x1ba>
 80042bc:	2304      	movs	r3, #4
 80042be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042c2:	e078      	b.n	80043b6 <UART_SetConfig+0x1ba>
 80042c4:	2308      	movs	r3, #8
 80042c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ca:	e074      	b.n	80043b6 <UART_SetConfig+0x1ba>
 80042cc:	2310      	movs	r3, #16
 80042ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042d2:	e070      	b.n	80043b6 <UART_SetConfig+0x1ba>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a8c      	ldr	r2, [pc, #560]	; (800450c <UART_SetConfig+0x310>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d138      	bne.n	8004350 <UART_SetConfig+0x154>
 80042de:	4b8a      	ldr	r3, [pc, #552]	; (8004508 <UART_SetConfig+0x30c>)
 80042e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e4:	f003 030c 	and.w	r3, r3, #12
 80042e8:	2b0c      	cmp	r3, #12
 80042ea:	d82d      	bhi.n	8004348 <UART_SetConfig+0x14c>
 80042ec:	a201      	add	r2, pc, #4	; (adr r2, 80042f4 <UART_SetConfig+0xf8>)
 80042ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f2:	bf00      	nop
 80042f4:	08004329 	.word	0x08004329
 80042f8:	08004349 	.word	0x08004349
 80042fc:	08004349 	.word	0x08004349
 8004300:	08004349 	.word	0x08004349
 8004304:	08004339 	.word	0x08004339
 8004308:	08004349 	.word	0x08004349
 800430c:	08004349 	.word	0x08004349
 8004310:	08004349 	.word	0x08004349
 8004314:	08004331 	.word	0x08004331
 8004318:	08004349 	.word	0x08004349
 800431c:	08004349 	.word	0x08004349
 8004320:	08004349 	.word	0x08004349
 8004324:	08004341 	.word	0x08004341
 8004328:	2300      	movs	r3, #0
 800432a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800432e:	e042      	b.n	80043b6 <UART_SetConfig+0x1ba>
 8004330:	2302      	movs	r3, #2
 8004332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004336:	e03e      	b.n	80043b6 <UART_SetConfig+0x1ba>
 8004338:	2304      	movs	r3, #4
 800433a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800433e:	e03a      	b.n	80043b6 <UART_SetConfig+0x1ba>
 8004340:	2308      	movs	r3, #8
 8004342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004346:	e036      	b.n	80043b6 <UART_SetConfig+0x1ba>
 8004348:	2310      	movs	r3, #16
 800434a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800434e:	e032      	b.n	80043b6 <UART_SetConfig+0x1ba>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a6a      	ldr	r2, [pc, #424]	; (8004500 <UART_SetConfig+0x304>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d12a      	bne.n	80043b0 <UART_SetConfig+0x1b4>
 800435a:	4b6b      	ldr	r3, [pc, #428]	; (8004508 <UART_SetConfig+0x30c>)
 800435c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004360:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004364:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004368:	d01a      	beq.n	80043a0 <UART_SetConfig+0x1a4>
 800436a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800436e:	d81b      	bhi.n	80043a8 <UART_SetConfig+0x1ac>
 8004370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004374:	d00c      	beq.n	8004390 <UART_SetConfig+0x194>
 8004376:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800437a:	d815      	bhi.n	80043a8 <UART_SetConfig+0x1ac>
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <UART_SetConfig+0x18c>
 8004380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004384:	d008      	beq.n	8004398 <UART_SetConfig+0x19c>
 8004386:	e00f      	b.n	80043a8 <UART_SetConfig+0x1ac>
 8004388:	2300      	movs	r3, #0
 800438a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438e:	e012      	b.n	80043b6 <UART_SetConfig+0x1ba>
 8004390:	2302      	movs	r3, #2
 8004392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004396:	e00e      	b.n	80043b6 <UART_SetConfig+0x1ba>
 8004398:	2304      	movs	r3, #4
 800439a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800439e:	e00a      	b.n	80043b6 <UART_SetConfig+0x1ba>
 80043a0:	2308      	movs	r3, #8
 80043a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a6:	e006      	b.n	80043b6 <UART_SetConfig+0x1ba>
 80043a8:	2310      	movs	r3, #16
 80043aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ae:	e002      	b.n	80043b6 <UART_SetConfig+0x1ba>
 80043b0:	2310      	movs	r3, #16
 80043b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a51      	ldr	r2, [pc, #324]	; (8004500 <UART_SetConfig+0x304>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d17a      	bne.n	80044b6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d824      	bhi.n	8004412 <UART_SetConfig+0x216>
 80043c8:	a201      	add	r2, pc, #4	; (adr r2, 80043d0 <UART_SetConfig+0x1d4>)
 80043ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ce:	bf00      	nop
 80043d0:	080043f5 	.word	0x080043f5
 80043d4:	08004413 	.word	0x08004413
 80043d8:	080043fd 	.word	0x080043fd
 80043dc:	08004413 	.word	0x08004413
 80043e0:	08004403 	.word	0x08004403
 80043e4:	08004413 	.word	0x08004413
 80043e8:	08004413 	.word	0x08004413
 80043ec:	08004413 	.word	0x08004413
 80043f0:	0800440b 	.word	0x0800440b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043f4:	f7fe fb9c 	bl	8002b30 <HAL_RCC_GetPCLK1Freq>
 80043f8:	61f8      	str	r0, [r7, #28]
        break;
 80043fa:	e010      	b.n	800441e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043fc:	4b44      	ldr	r3, [pc, #272]	; (8004510 <UART_SetConfig+0x314>)
 80043fe:	61fb      	str	r3, [r7, #28]
        break;
 8004400:	e00d      	b.n	800441e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004402:	f7fe fafd 	bl	8002a00 <HAL_RCC_GetSysClockFreq>
 8004406:	61f8      	str	r0, [r7, #28]
        break;
 8004408:	e009      	b.n	800441e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800440a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800440e:	61fb      	str	r3, [r7, #28]
        break;
 8004410:	e005      	b.n	800441e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800441c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 8107 	beq.w	8004634 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	4613      	mov	r3, r2
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	4413      	add	r3, r2
 8004430:	69fa      	ldr	r2, [r7, #28]
 8004432:	429a      	cmp	r2, r3
 8004434:	d305      	bcc.n	8004442 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800443c:	69fa      	ldr	r2, [r7, #28]
 800443e:	429a      	cmp	r2, r3
 8004440:	d903      	bls.n	800444a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004448:	e0f4      	b.n	8004634 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	2200      	movs	r2, #0
 800444e:	461c      	mov	r4, r3
 8004450:	4615      	mov	r5, r2
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	f04f 0300 	mov.w	r3, #0
 800445a:	022b      	lsls	r3, r5, #8
 800445c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004460:	0222      	lsls	r2, r4, #8
 8004462:	68f9      	ldr	r1, [r7, #12]
 8004464:	6849      	ldr	r1, [r1, #4]
 8004466:	0849      	lsrs	r1, r1, #1
 8004468:	2000      	movs	r0, #0
 800446a:	4688      	mov	r8, r1
 800446c:	4681      	mov	r9, r0
 800446e:	eb12 0a08 	adds.w	sl, r2, r8
 8004472:	eb43 0b09 	adc.w	fp, r3, r9
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	603b      	str	r3, [r7, #0]
 800447e:	607a      	str	r2, [r7, #4]
 8004480:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004484:	4650      	mov	r0, sl
 8004486:	4659      	mov	r1, fp
 8004488:	f7fb fefa 	bl	8000280 <__aeabi_uldivmod>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	4613      	mov	r3, r2
 8004492:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800449a:	d308      	bcc.n	80044ae <UART_SetConfig+0x2b2>
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044a2:	d204      	bcs.n	80044ae <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	60da      	str	r2, [r3, #12]
 80044ac:	e0c2      	b.n	8004634 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80044b4:	e0be      	b.n	8004634 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044be:	d16a      	bne.n	8004596 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80044c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	d834      	bhi.n	8004532 <UART_SetConfig+0x336>
 80044c8:	a201      	add	r2, pc, #4	; (adr r2, 80044d0 <UART_SetConfig+0x2d4>)
 80044ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ce:	bf00      	nop
 80044d0:	080044f5 	.word	0x080044f5
 80044d4:	08004515 	.word	0x08004515
 80044d8:	0800451d 	.word	0x0800451d
 80044dc:	08004533 	.word	0x08004533
 80044e0:	08004523 	.word	0x08004523
 80044e4:	08004533 	.word	0x08004533
 80044e8:	08004533 	.word	0x08004533
 80044ec:	08004533 	.word	0x08004533
 80044f0:	0800452b 	.word	0x0800452b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044f4:	f7fe fb1c 	bl	8002b30 <HAL_RCC_GetPCLK1Freq>
 80044f8:	61f8      	str	r0, [r7, #28]
        break;
 80044fa:	e020      	b.n	800453e <UART_SetConfig+0x342>
 80044fc:	efff69f3 	.word	0xefff69f3
 8004500:	40008000 	.word	0x40008000
 8004504:	40013800 	.word	0x40013800
 8004508:	40021000 	.word	0x40021000
 800450c:	40004400 	.word	0x40004400
 8004510:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004514:	f7fe fb22 	bl	8002b5c <HAL_RCC_GetPCLK2Freq>
 8004518:	61f8      	str	r0, [r7, #28]
        break;
 800451a:	e010      	b.n	800453e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800451c:	4b4c      	ldr	r3, [pc, #304]	; (8004650 <UART_SetConfig+0x454>)
 800451e:	61fb      	str	r3, [r7, #28]
        break;
 8004520:	e00d      	b.n	800453e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004522:	f7fe fa6d 	bl	8002a00 <HAL_RCC_GetSysClockFreq>
 8004526:	61f8      	str	r0, [r7, #28]
        break;
 8004528:	e009      	b.n	800453e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800452a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800452e:	61fb      	str	r3, [r7, #28]
        break;
 8004530:	e005      	b.n	800453e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800453c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d077      	beq.n	8004634 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	005a      	lsls	r2, r3, #1
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	085b      	lsrs	r3, r3, #1
 800454e:	441a      	add	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	fbb2 f3f3 	udiv	r3, r2, r3
 8004558:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	2b0f      	cmp	r3, #15
 800455e:	d916      	bls.n	800458e <UART_SetConfig+0x392>
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004566:	d212      	bcs.n	800458e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	b29b      	uxth	r3, r3
 800456c:	f023 030f 	bic.w	r3, r3, #15
 8004570:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	085b      	lsrs	r3, r3, #1
 8004576:	b29b      	uxth	r3, r3
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	b29a      	uxth	r2, r3
 800457e:	8afb      	ldrh	r3, [r7, #22]
 8004580:	4313      	orrs	r3, r2
 8004582:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	8afa      	ldrh	r2, [r7, #22]
 800458a:	60da      	str	r2, [r3, #12]
 800458c:	e052      	b.n	8004634 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004594:	e04e      	b.n	8004634 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004596:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800459a:	2b08      	cmp	r3, #8
 800459c:	d827      	bhi.n	80045ee <UART_SetConfig+0x3f2>
 800459e:	a201      	add	r2, pc, #4	; (adr r2, 80045a4 <UART_SetConfig+0x3a8>)
 80045a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a4:	080045c9 	.word	0x080045c9
 80045a8:	080045d1 	.word	0x080045d1
 80045ac:	080045d9 	.word	0x080045d9
 80045b0:	080045ef 	.word	0x080045ef
 80045b4:	080045df 	.word	0x080045df
 80045b8:	080045ef 	.word	0x080045ef
 80045bc:	080045ef 	.word	0x080045ef
 80045c0:	080045ef 	.word	0x080045ef
 80045c4:	080045e7 	.word	0x080045e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045c8:	f7fe fab2 	bl	8002b30 <HAL_RCC_GetPCLK1Freq>
 80045cc:	61f8      	str	r0, [r7, #28]
        break;
 80045ce:	e014      	b.n	80045fa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045d0:	f7fe fac4 	bl	8002b5c <HAL_RCC_GetPCLK2Freq>
 80045d4:	61f8      	str	r0, [r7, #28]
        break;
 80045d6:	e010      	b.n	80045fa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045d8:	4b1d      	ldr	r3, [pc, #116]	; (8004650 <UART_SetConfig+0x454>)
 80045da:	61fb      	str	r3, [r7, #28]
        break;
 80045dc:	e00d      	b.n	80045fa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045de:	f7fe fa0f 	bl	8002a00 <HAL_RCC_GetSysClockFreq>
 80045e2:	61f8      	str	r0, [r7, #28]
        break;
 80045e4:	e009      	b.n	80045fa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ea:	61fb      	str	r3, [r7, #28]
        break;
 80045ec:	e005      	b.n	80045fa <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045f8:	bf00      	nop
    }

    if (pclk != 0U)
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d019      	beq.n	8004634 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	085a      	lsrs	r2, r3, #1
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	441a      	add	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004612:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	2b0f      	cmp	r3, #15
 8004618:	d909      	bls.n	800462e <UART_SetConfig+0x432>
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004620:	d205      	bcs.n	800462e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	b29a      	uxth	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	60da      	str	r2, [r3, #12]
 800462c:	e002      	b.n	8004634 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004640:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004644:	4618      	mov	r0, r3
 8004646:	3728      	adds	r7, #40	; 0x28
 8004648:	46bd      	mov	sp, r7
 800464a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800464e:	bf00      	nop
 8004650:	00f42400 	.word	0x00f42400

08004654 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00a      	beq.n	800467e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00a      	beq.n	80046c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	f003 0310 	and.w	r3, r3, #16
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00a      	beq.n	8004706 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470a:	f003 0320 	and.w	r3, r3, #32
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004730:	2b00      	cmp	r3, #0
 8004732:	d01a      	beq.n	800476a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004752:	d10a      	bne.n	800476a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	430a      	orrs	r2, r1
 800478a:	605a      	str	r2, [r3, #4]
  }
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af02      	add	r7, sp, #8
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047a8:	f7fd f91a 	bl	80019e0 <HAL_GetTick>
 80047ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0308 	and.w	r3, r3, #8
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d10e      	bne.n	80047da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f82d 	bl	800482a <UART_WaitOnFlagUntilTimeout>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e023      	b.n	8004822 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	d10e      	bne.n	8004806 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f817 	bl	800482a <UART_WaitOnFlagUntilTimeout>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e00d      	b.n	8004822 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2220      	movs	r2, #32
 800480a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2220      	movs	r2, #32
 8004810:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b09c      	sub	sp, #112	; 0x70
 800482e:	af00      	add	r7, sp, #0
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	60b9      	str	r1, [r7, #8]
 8004834:	603b      	str	r3, [r7, #0]
 8004836:	4613      	mov	r3, r2
 8004838:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800483a:	e0a5      	b.n	8004988 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800483c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800483e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004842:	f000 80a1 	beq.w	8004988 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004846:	f7fd f8cb 	bl	80019e0 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004852:	429a      	cmp	r2, r3
 8004854:	d302      	bcc.n	800485c <UART_WaitOnFlagUntilTimeout+0x32>
 8004856:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004858:	2b00      	cmp	r3, #0
 800485a:	d13e      	bne.n	80048da <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004864:	e853 3f00 	ldrex	r3, [r3]
 8004868:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800486a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800486c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004870:	667b      	str	r3, [r7, #100]	; 0x64
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	461a      	mov	r2, r3
 8004878:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800487a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800487c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004880:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004882:	e841 2300 	strex	r3, r2, [r1]
 8004886:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1e6      	bne.n	800485c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3308      	adds	r3, #8
 8004894:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800489e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a0:	f023 0301 	bic.w	r3, r3, #1
 80048a4:	663b      	str	r3, [r7, #96]	; 0x60
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	3308      	adds	r3, #8
 80048ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80048b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048b6:	e841 2300 	strex	r3, r2, [r1]
 80048ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80048bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1e5      	bne.n	800488e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2220      	movs	r2, #32
 80048c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2220      	movs	r2, #32
 80048cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e067      	b.n	80049aa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d04f      	beq.n	8004988 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048f6:	d147      	bne.n	8004988 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004900:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490a:	e853 3f00 	ldrex	r3, [r3]
 800490e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004916:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	461a      	mov	r2, r3
 800491e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004920:	637b      	str	r3, [r7, #52]	; 0x34
 8004922:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004924:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004926:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004928:	e841 2300 	strex	r3, r2, [r1]
 800492c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800492e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1e6      	bne.n	8004902 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	3308      	adds	r3, #8
 800493a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	e853 3f00 	ldrex	r3, [r3]
 8004942:	613b      	str	r3, [r7, #16]
   return(result);
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	f023 0301 	bic.w	r3, r3, #1
 800494a:	66bb      	str	r3, [r7, #104]	; 0x68
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3308      	adds	r3, #8
 8004952:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004954:	623a      	str	r2, [r7, #32]
 8004956:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004958:	69f9      	ldr	r1, [r7, #28]
 800495a:	6a3a      	ldr	r2, [r7, #32]
 800495c:	e841 2300 	strex	r3, r2, [r1]
 8004960:	61bb      	str	r3, [r7, #24]
   return(result);
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1e5      	bne.n	8004934 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2220      	movs	r2, #32
 800496c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2220      	movs	r2, #32
 8004972:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2220      	movs	r2, #32
 8004978:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e010      	b.n	80049aa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	69da      	ldr	r2, [r3, #28]
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	4013      	ands	r3, r2
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	429a      	cmp	r2, r3
 8004996:	bf0c      	ite	eq
 8004998:	2301      	moveq	r3, #1
 800499a:	2300      	movne	r3, #0
 800499c:	b2db      	uxtb	r3, r3
 800499e:	461a      	mov	r2, r3
 80049a0:	79fb      	ldrb	r3, [r7, #7]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	f43f af4a 	beq.w	800483c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3770      	adds	r7, #112	; 0x70
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
	...

080049b4 <__errno>:
 80049b4:	4b01      	ldr	r3, [pc, #4]	; (80049bc <__errno+0x8>)
 80049b6:	6818      	ldr	r0, [r3, #0]
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	2000000c 	.word	0x2000000c

080049c0 <__libc_init_array>:
 80049c0:	b570      	push	{r4, r5, r6, lr}
 80049c2:	4d0d      	ldr	r5, [pc, #52]	; (80049f8 <__libc_init_array+0x38>)
 80049c4:	4c0d      	ldr	r4, [pc, #52]	; (80049fc <__libc_init_array+0x3c>)
 80049c6:	1b64      	subs	r4, r4, r5
 80049c8:	10a4      	asrs	r4, r4, #2
 80049ca:	2600      	movs	r6, #0
 80049cc:	42a6      	cmp	r6, r4
 80049ce:	d109      	bne.n	80049e4 <__libc_init_array+0x24>
 80049d0:	4d0b      	ldr	r5, [pc, #44]	; (8004a00 <__libc_init_array+0x40>)
 80049d2:	4c0c      	ldr	r4, [pc, #48]	; (8004a04 <__libc_init_array+0x44>)
 80049d4:	f000 fc8e 	bl	80052f4 <_init>
 80049d8:	1b64      	subs	r4, r4, r5
 80049da:	10a4      	asrs	r4, r4, #2
 80049dc:	2600      	movs	r6, #0
 80049de:	42a6      	cmp	r6, r4
 80049e0:	d105      	bne.n	80049ee <__libc_init_array+0x2e>
 80049e2:	bd70      	pop	{r4, r5, r6, pc}
 80049e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e8:	4798      	blx	r3
 80049ea:	3601      	adds	r6, #1
 80049ec:	e7ee      	b.n	80049cc <__libc_init_array+0xc>
 80049ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80049f2:	4798      	blx	r3
 80049f4:	3601      	adds	r6, #1
 80049f6:	e7f2      	b.n	80049de <__libc_init_array+0x1e>
 80049f8:	080058d4 	.word	0x080058d4
 80049fc:	080058d4 	.word	0x080058d4
 8004a00:	080058d4 	.word	0x080058d4
 8004a04:	080058d8 	.word	0x080058d8

08004a08 <memcpy>:
 8004a08:	440a      	add	r2, r1
 8004a0a:	4291      	cmp	r1, r2
 8004a0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004a10:	d100      	bne.n	8004a14 <memcpy+0xc>
 8004a12:	4770      	bx	lr
 8004a14:	b510      	push	{r4, lr}
 8004a16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a1e:	4291      	cmp	r1, r2
 8004a20:	d1f9      	bne.n	8004a16 <memcpy+0xe>
 8004a22:	bd10      	pop	{r4, pc}

08004a24 <memset>:
 8004a24:	4402      	add	r2, r0
 8004a26:	4603      	mov	r3, r0
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d100      	bne.n	8004a2e <memset+0xa>
 8004a2c:	4770      	bx	lr
 8004a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a32:	e7f9      	b.n	8004a28 <memset+0x4>

08004a34 <siprintf>:
 8004a34:	b40e      	push	{r1, r2, r3}
 8004a36:	b500      	push	{lr}
 8004a38:	b09c      	sub	sp, #112	; 0x70
 8004a3a:	ab1d      	add	r3, sp, #116	; 0x74
 8004a3c:	9002      	str	r0, [sp, #8]
 8004a3e:	9006      	str	r0, [sp, #24]
 8004a40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a44:	4809      	ldr	r0, [pc, #36]	; (8004a6c <siprintf+0x38>)
 8004a46:	9107      	str	r1, [sp, #28]
 8004a48:	9104      	str	r1, [sp, #16]
 8004a4a:	4909      	ldr	r1, [pc, #36]	; (8004a70 <siprintf+0x3c>)
 8004a4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a50:	9105      	str	r1, [sp, #20]
 8004a52:	6800      	ldr	r0, [r0, #0]
 8004a54:	9301      	str	r3, [sp, #4]
 8004a56:	a902      	add	r1, sp, #8
 8004a58:	f000 f868 	bl	8004b2c <_svfiprintf_r>
 8004a5c:	9b02      	ldr	r3, [sp, #8]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	701a      	strb	r2, [r3, #0]
 8004a62:	b01c      	add	sp, #112	; 0x70
 8004a64:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a68:	b003      	add	sp, #12
 8004a6a:	4770      	bx	lr
 8004a6c:	2000000c 	.word	0x2000000c
 8004a70:	ffff0208 	.word	0xffff0208

08004a74 <__ssputs_r>:
 8004a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a78:	688e      	ldr	r6, [r1, #8]
 8004a7a:	429e      	cmp	r6, r3
 8004a7c:	4682      	mov	sl, r0
 8004a7e:	460c      	mov	r4, r1
 8004a80:	4690      	mov	r8, r2
 8004a82:	461f      	mov	r7, r3
 8004a84:	d838      	bhi.n	8004af8 <__ssputs_r+0x84>
 8004a86:	898a      	ldrh	r2, [r1, #12]
 8004a88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a8c:	d032      	beq.n	8004af4 <__ssputs_r+0x80>
 8004a8e:	6825      	ldr	r5, [r4, #0]
 8004a90:	6909      	ldr	r1, [r1, #16]
 8004a92:	eba5 0901 	sub.w	r9, r5, r1
 8004a96:	6965      	ldr	r5, [r4, #20]
 8004a98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	444b      	add	r3, r9
 8004aa4:	106d      	asrs	r5, r5, #1
 8004aa6:	429d      	cmp	r5, r3
 8004aa8:	bf38      	it	cc
 8004aaa:	461d      	movcc	r5, r3
 8004aac:	0553      	lsls	r3, r2, #21
 8004aae:	d531      	bpl.n	8004b14 <__ssputs_r+0xa0>
 8004ab0:	4629      	mov	r1, r5
 8004ab2:	f000 fb55 	bl	8005160 <_malloc_r>
 8004ab6:	4606      	mov	r6, r0
 8004ab8:	b950      	cbnz	r0, 8004ad0 <__ssputs_r+0x5c>
 8004aba:	230c      	movs	r3, #12
 8004abc:	f8ca 3000 	str.w	r3, [sl]
 8004ac0:	89a3      	ldrh	r3, [r4, #12]
 8004ac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ac6:	81a3      	strh	r3, [r4, #12]
 8004ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ad0:	6921      	ldr	r1, [r4, #16]
 8004ad2:	464a      	mov	r2, r9
 8004ad4:	f7ff ff98 	bl	8004a08 <memcpy>
 8004ad8:	89a3      	ldrh	r3, [r4, #12]
 8004ada:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ae2:	81a3      	strh	r3, [r4, #12]
 8004ae4:	6126      	str	r6, [r4, #16]
 8004ae6:	6165      	str	r5, [r4, #20]
 8004ae8:	444e      	add	r6, r9
 8004aea:	eba5 0509 	sub.w	r5, r5, r9
 8004aee:	6026      	str	r6, [r4, #0]
 8004af0:	60a5      	str	r5, [r4, #8]
 8004af2:	463e      	mov	r6, r7
 8004af4:	42be      	cmp	r6, r7
 8004af6:	d900      	bls.n	8004afa <__ssputs_r+0x86>
 8004af8:	463e      	mov	r6, r7
 8004afa:	6820      	ldr	r0, [r4, #0]
 8004afc:	4632      	mov	r2, r6
 8004afe:	4641      	mov	r1, r8
 8004b00:	f000 faa8 	bl	8005054 <memmove>
 8004b04:	68a3      	ldr	r3, [r4, #8]
 8004b06:	1b9b      	subs	r3, r3, r6
 8004b08:	60a3      	str	r3, [r4, #8]
 8004b0a:	6823      	ldr	r3, [r4, #0]
 8004b0c:	4433      	add	r3, r6
 8004b0e:	6023      	str	r3, [r4, #0]
 8004b10:	2000      	movs	r0, #0
 8004b12:	e7db      	b.n	8004acc <__ssputs_r+0x58>
 8004b14:	462a      	mov	r2, r5
 8004b16:	f000 fb97 	bl	8005248 <_realloc_r>
 8004b1a:	4606      	mov	r6, r0
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	d1e1      	bne.n	8004ae4 <__ssputs_r+0x70>
 8004b20:	6921      	ldr	r1, [r4, #16]
 8004b22:	4650      	mov	r0, sl
 8004b24:	f000 fab0 	bl	8005088 <_free_r>
 8004b28:	e7c7      	b.n	8004aba <__ssputs_r+0x46>
	...

08004b2c <_svfiprintf_r>:
 8004b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b30:	4698      	mov	r8, r3
 8004b32:	898b      	ldrh	r3, [r1, #12]
 8004b34:	061b      	lsls	r3, r3, #24
 8004b36:	b09d      	sub	sp, #116	; 0x74
 8004b38:	4607      	mov	r7, r0
 8004b3a:	460d      	mov	r5, r1
 8004b3c:	4614      	mov	r4, r2
 8004b3e:	d50e      	bpl.n	8004b5e <_svfiprintf_r+0x32>
 8004b40:	690b      	ldr	r3, [r1, #16]
 8004b42:	b963      	cbnz	r3, 8004b5e <_svfiprintf_r+0x32>
 8004b44:	2140      	movs	r1, #64	; 0x40
 8004b46:	f000 fb0b 	bl	8005160 <_malloc_r>
 8004b4a:	6028      	str	r0, [r5, #0]
 8004b4c:	6128      	str	r0, [r5, #16]
 8004b4e:	b920      	cbnz	r0, 8004b5a <_svfiprintf_r+0x2e>
 8004b50:	230c      	movs	r3, #12
 8004b52:	603b      	str	r3, [r7, #0]
 8004b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b58:	e0d1      	b.n	8004cfe <_svfiprintf_r+0x1d2>
 8004b5a:	2340      	movs	r3, #64	; 0x40
 8004b5c:	616b      	str	r3, [r5, #20]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	9309      	str	r3, [sp, #36]	; 0x24
 8004b62:	2320      	movs	r3, #32
 8004b64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b68:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b6c:	2330      	movs	r3, #48	; 0x30
 8004b6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004d18 <_svfiprintf_r+0x1ec>
 8004b72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b76:	f04f 0901 	mov.w	r9, #1
 8004b7a:	4623      	mov	r3, r4
 8004b7c:	469a      	mov	sl, r3
 8004b7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b82:	b10a      	cbz	r2, 8004b88 <_svfiprintf_r+0x5c>
 8004b84:	2a25      	cmp	r2, #37	; 0x25
 8004b86:	d1f9      	bne.n	8004b7c <_svfiprintf_r+0x50>
 8004b88:	ebba 0b04 	subs.w	fp, sl, r4
 8004b8c:	d00b      	beq.n	8004ba6 <_svfiprintf_r+0x7a>
 8004b8e:	465b      	mov	r3, fp
 8004b90:	4622      	mov	r2, r4
 8004b92:	4629      	mov	r1, r5
 8004b94:	4638      	mov	r0, r7
 8004b96:	f7ff ff6d 	bl	8004a74 <__ssputs_r>
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	f000 80aa 	beq.w	8004cf4 <_svfiprintf_r+0x1c8>
 8004ba0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ba2:	445a      	add	r2, fp
 8004ba4:	9209      	str	r2, [sp, #36]	; 0x24
 8004ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 80a2 	beq.w	8004cf4 <_svfiprintf_r+0x1c8>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bba:	f10a 0a01 	add.w	sl, sl, #1
 8004bbe:	9304      	str	r3, [sp, #16]
 8004bc0:	9307      	str	r3, [sp, #28]
 8004bc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bc6:	931a      	str	r3, [sp, #104]	; 0x68
 8004bc8:	4654      	mov	r4, sl
 8004bca:	2205      	movs	r2, #5
 8004bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bd0:	4851      	ldr	r0, [pc, #324]	; (8004d18 <_svfiprintf_r+0x1ec>)
 8004bd2:	f7fb fb05 	bl	80001e0 <memchr>
 8004bd6:	9a04      	ldr	r2, [sp, #16]
 8004bd8:	b9d8      	cbnz	r0, 8004c12 <_svfiprintf_r+0xe6>
 8004bda:	06d0      	lsls	r0, r2, #27
 8004bdc:	bf44      	itt	mi
 8004bde:	2320      	movmi	r3, #32
 8004be0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004be4:	0711      	lsls	r1, r2, #28
 8004be6:	bf44      	itt	mi
 8004be8:	232b      	movmi	r3, #43	; 0x2b
 8004bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bee:	f89a 3000 	ldrb.w	r3, [sl]
 8004bf2:	2b2a      	cmp	r3, #42	; 0x2a
 8004bf4:	d015      	beq.n	8004c22 <_svfiprintf_r+0xf6>
 8004bf6:	9a07      	ldr	r2, [sp, #28]
 8004bf8:	4654      	mov	r4, sl
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	f04f 0c0a 	mov.w	ip, #10
 8004c00:	4621      	mov	r1, r4
 8004c02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c06:	3b30      	subs	r3, #48	; 0x30
 8004c08:	2b09      	cmp	r3, #9
 8004c0a:	d94e      	bls.n	8004caa <_svfiprintf_r+0x17e>
 8004c0c:	b1b0      	cbz	r0, 8004c3c <_svfiprintf_r+0x110>
 8004c0e:	9207      	str	r2, [sp, #28]
 8004c10:	e014      	b.n	8004c3c <_svfiprintf_r+0x110>
 8004c12:	eba0 0308 	sub.w	r3, r0, r8
 8004c16:	fa09 f303 	lsl.w	r3, r9, r3
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	9304      	str	r3, [sp, #16]
 8004c1e:	46a2      	mov	sl, r4
 8004c20:	e7d2      	b.n	8004bc8 <_svfiprintf_r+0x9c>
 8004c22:	9b03      	ldr	r3, [sp, #12]
 8004c24:	1d19      	adds	r1, r3, #4
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	9103      	str	r1, [sp, #12]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	bfbb      	ittet	lt
 8004c2e:	425b      	neglt	r3, r3
 8004c30:	f042 0202 	orrlt.w	r2, r2, #2
 8004c34:	9307      	strge	r3, [sp, #28]
 8004c36:	9307      	strlt	r3, [sp, #28]
 8004c38:	bfb8      	it	lt
 8004c3a:	9204      	strlt	r2, [sp, #16]
 8004c3c:	7823      	ldrb	r3, [r4, #0]
 8004c3e:	2b2e      	cmp	r3, #46	; 0x2e
 8004c40:	d10c      	bne.n	8004c5c <_svfiprintf_r+0x130>
 8004c42:	7863      	ldrb	r3, [r4, #1]
 8004c44:	2b2a      	cmp	r3, #42	; 0x2a
 8004c46:	d135      	bne.n	8004cb4 <_svfiprintf_r+0x188>
 8004c48:	9b03      	ldr	r3, [sp, #12]
 8004c4a:	1d1a      	adds	r2, r3, #4
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	9203      	str	r2, [sp, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	bfb8      	it	lt
 8004c54:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004c58:	3402      	adds	r4, #2
 8004c5a:	9305      	str	r3, [sp, #20]
 8004c5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d28 <_svfiprintf_r+0x1fc>
 8004c60:	7821      	ldrb	r1, [r4, #0]
 8004c62:	2203      	movs	r2, #3
 8004c64:	4650      	mov	r0, sl
 8004c66:	f7fb fabb 	bl	80001e0 <memchr>
 8004c6a:	b140      	cbz	r0, 8004c7e <_svfiprintf_r+0x152>
 8004c6c:	2340      	movs	r3, #64	; 0x40
 8004c6e:	eba0 000a 	sub.w	r0, r0, sl
 8004c72:	fa03 f000 	lsl.w	r0, r3, r0
 8004c76:	9b04      	ldr	r3, [sp, #16]
 8004c78:	4303      	orrs	r3, r0
 8004c7a:	3401      	adds	r4, #1
 8004c7c:	9304      	str	r3, [sp, #16]
 8004c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c82:	4826      	ldr	r0, [pc, #152]	; (8004d1c <_svfiprintf_r+0x1f0>)
 8004c84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c88:	2206      	movs	r2, #6
 8004c8a:	f7fb faa9 	bl	80001e0 <memchr>
 8004c8e:	2800      	cmp	r0, #0
 8004c90:	d038      	beq.n	8004d04 <_svfiprintf_r+0x1d8>
 8004c92:	4b23      	ldr	r3, [pc, #140]	; (8004d20 <_svfiprintf_r+0x1f4>)
 8004c94:	bb1b      	cbnz	r3, 8004cde <_svfiprintf_r+0x1b2>
 8004c96:	9b03      	ldr	r3, [sp, #12]
 8004c98:	3307      	adds	r3, #7
 8004c9a:	f023 0307 	bic.w	r3, r3, #7
 8004c9e:	3308      	adds	r3, #8
 8004ca0:	9303      	str	r3, [sp, #12]
 8004ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ca4:	4433      	add	r3, r6
 8004ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ca8:	e767      	b.n	8004b7a <_svfiprintf_r+0x4e>
 8004caa:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cae:	460c      	mov	r4, r1
 8004cb0:	2001      	movs	r0, #1
 8004cb2:	e7a5      	b.n	8004c00 <_svfiprintf_r+0xd4>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	3401      	adds	r4, #1
 8004cb8:	9305      	str	r3, [sp, #20]
 8004cba:	4619      	mov	r1, r3
 8004cbc:	f04f 0c0a 	mov.w	ip, #10
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cc6:	3a30      	subs	r2, #48	; 0x30
 8004cc8:	2a09      	cmp	r2, #9
 8004cca:	d903      	bls.n	8004cd4 <_svfiprintf_r+0x1a8>
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0c5      	beq.n	8004c5c <_svfiprintf_r+0x130>
 8004cd0:	9105      	str	r1, [sp, #20]
 8004cd2:	e7c3      	b.n	8004c5c <_svfiprintf_r+0x130>
 8004cd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cd8:	4604      	mov	r4, r0
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e7f0      	b.n	8004cc0 <_svfiprintf_r+0x194>
 8004cde:	ab03      	add	r3, sp, #12
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	462a      	mov	r2, r5
 8004ce4:	4b0f      	ldr	r3, [pc, #60]	; (8004d24 <_svfiprintf_r+0x1f8>)
 8004ce6:	a904      	add	r1, sp, #16
 8004ce8:	4638      	mov	r0, r7
 8004cea:	f3af 8000 	nop.w
 8004cee:	1c42      	adds	r2, r0, #1
 8004cf0:	4606      	mov	r6, r0
 8004cf2:	d1d6      	bne.n	8004ca2 <_svfiprintf_r+0x176>
 8004cf4:	89ab      	ldrh	r3, [r5, #12]
 8004cf6:	065b      	lsls	r3, r3, #25
 8004cf8:	f53f af2c 	bmi.w	8004b54 <_svfiprintf_r+0x28>
 8004cfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cfe:	b01d      	add	sp, #116	; 0x74
 8004d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d04:	ab03      	add	r3, sp, #12
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	462a      	mov	r2, r5
 8004d0a:	4b06      	ldr	r3, [pc, #24]	; (8004d24 <_svfiprintf_r+0x1f8>)
 8004d0c:	a904      	add	r1, sp, #16
 8004d0e:	4638      	mov	r0, r7
 8004d10:	f000 f87a 	bl	8004e08 <_printf_i>
 8004d14:	e7eb      	b.n	8004cee <_svfiprintf_r+0x1c2>
 8004d16:	bf00      	nop
 8004d18:	08005898 	.word	0x08005898
 8004d1c:	080058a2 	.word	0x080058a2
 8004d20:	00000000 	.word	0x00000000
 8004d24:	08004a75 	.word	0x08004a75
 8004d28:	0800589e 	.word	0x0800589e

08004d2c <_printf_common>:
 8004d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d30:	4616      	mov	r6, r2
 8004d32:	4699      	mov	r9, r3
 8004d34:	688a      	ldr	r2, [r1, #8]
 8004d36:	690b      	ldr	r3, [r1, #16]
 8004d38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	bfb8      	it	lt
 8004d40:	4613      	movlt	r3, r2
 8004d42:	6033      	str	r3, [r6, #0]
 8004d44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d48:	4607      	mov	r7, r0
 8004d4a:	460c      	mov	r4, r1
 8004d4c:	b10a      	cbz	r2, 8004d52 <_printf_common+0x26>
 8004d4e:	3301      	adds	r3, #1
 8004d50:	6033      	str	r3, [r6, #0]
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	0699      	lsls	r1, r3, #26
 8004d56:	bf42      	ittt	mi
 8004d58:	6833      	ldrmi	r3, [r6, #0]
 8004d5a:	3302      	addmi	r3, #2
 8004d5c:	6033      	strmi	r3, [r6, #0]
 8004d5e:	6825      	ldr	r5, [r4, #0]
 8004d60:	f015 0506 	ands.w	r5, r5, #6
 8004d64:	d106      	bne.n	8004d74 <_printf_common+0x48>
 8004d66:	f104 0a19 	add.w	sl, r4, #25
 8004d6a:	68e3      	ldr	r3, [r4, #12]
 8004d6c:	6832      	ldr	r2, [r6, #0]
 8004d6e:	1a9b      	subs	r3, r3, r2
 8004d70:	42ab      	cmp	r3, r5
 8004d72:	dc26      	bgt.n	8004dc2 <_printf_common+0x96>
 8004d74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d78:	1e13      	subs	r3, r2, #0
 8004d7a:	6822      	ldr	r2, [r4, #0]
 8004d7c:	bf18      	it	ne
 8004d7e:	2301      	movne	r3, #1
 8004d80:	0692      	lsls	r2, r2, #26
 8004d82:	d42b      	bmi.n	8004ddc <_printf_common+0xb0>
 8004d84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d88:	4649      	mov	r1, r9
 8004d8a:	4638      	mov	r0, r7
 8004d8c:	47c0      	blx	r8
 8004d8e:	3001      	adds	r0, #1
 8004d90:	d01e      	beq.n	8004dd0 <_printf_common+0xa4>
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	68e5      	ldr	r5, [r4, #12]
 8004d96:	6832      	ldr	r2, [r6, #0]
 8004d98:	f003 0306 	and.w	r3, r3, #6
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	bf08      	it	eq
 8004da0:	1aad      	subeq	r5, r5, r2
 8004da2:	68a3      	ldr	r3, [r4, #8]
 8004da4:	6922      	ldr	r2, [r4, #16]
 8004da6:	bf0c      	ite	eq
 8004da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dac:	2500      	movne	r5, #0
 8004dae:	4293      	cmp	r3, r2
 8004db0:	bfc4      	itt	gt
 8004db2:	1a9b      	subgt	r3, r3, r2
 8004db4:	18ed      	addgt	r5, r5, r3
 8004db6:	2600      	movs	r6, #0
 8004db8:	341a      	adds	r4, #26
 8004dba:	42b5      	cmp	r5, r6
 8004dbc:	d11a      	bne.n	8004df4 <_printf_common+0xc8>
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	e008      	b.n	8004dd4 <_printf_common+0xa8>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	4652      	mov	r2, sl
 8004dc6:	4649      	mov	r1, r9
 8004dc8:	4638      	mov	r0, r7
 8004dca:	47c0      	blx	r8
 8004dcc:	3001      	adds	r0, #1
 8004dce:	d103      	bne.n	8004dd8 <_printf_common+0xac>
 8004dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd8:	3501      	adds	r5, #1
 8004dda:	e7c6      	b.n	8004d6a <_printf_common+0x3e>
 8004ddc:	18e1      	adds	r1, r4, r3
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	2030      	movs	r0, #48	; 0x30
 8004de2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004de6:	4422      	add	r2, r4
 8004de8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004df0:	3302      	adds	r3, #2
 8004df2:	e7c7      	b.n	8004d84 <_printf_common+0x58>
 8004df4:	2301      	movs	r3, #1
 8004df6:	4622      	mov	r2, r4
 8004df8:	4649      	mov	r1, r9
 8004dfa:	4638      	mov	r0, r7
 8004dfc:	47c0      	blx	r8
 8004dfe:	3001      	adds	r0, #1
 8004e00:	d0e6      	beq.n	8004dd0 <_printf_common+0xa4>
 8004e02:	3601      	adds	r6, #1
 8004e04:	e7d9      	b.n	8004dba <_printf_common+0x8e>
	...

08004e08 <_printf_i>:
 8004e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e0c:	7e0f      	ldrb	r7, [r1, #24]
 8004e0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e10:	2f78      	cmp	r7, #120	; 0x78
 8004e12:	4691      	mov	r9, r2
 8004e14:	4680      	mov	r8, r0
 8004e16:	460c      	mov	r4, r1
 8004e18:	469a      	mov	sl, r3
 8004e1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e1e:	d807      	bhi.n	8004e30 <_printf_i+0x28>
 8004e20:	2f62      	cmp	r7, #98	; 0x62
 8004e22:	d80a      	bhi.n	8004e3a <_printf_i+0x32>
 8004e24:	2f00      	cmp	r7, #0
 8004e26:	f000 80d8 	beq.w	8004fda <_printf_i+0x1d2>
 8004e2a:	2f58      	cmp	r7, #88	; 0x58
 8004e2c:	f000 80a3 	beq.w	8004f76 <_printf_i+0x16e>
 8004e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e38:	e03a      	b.n	8004eb0 <_printf_i+0xa8>
 8004e3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e3e:	2b15      	cmp	r3, #21
 8004e40:	d8f6      	bhi.n	8004e30 <_printf_i+0x28>
 8004e42:	a101      	add	r1, pc, #4	; (adr r1, 8004e48 <_printf_i+0x40>)
 8004e44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e48:	08004ea1 	.word	0x08004ea1
 8004e4c:	08004eb5 	.word	0x08004eb5
 8004e50:	08004e31 	.word	0x08004e31
 8004e54:	08004e31 	.word	0x08004e31
 8004e58:	08004e31 	.word	0x08004e31
 8004e5c:	08004e31 	.word	0x08004e31
 8004e60:	08004eb5 	.word	0x08004eb5
 8004e64:	08004e31 	.word	0x08004e31
 8004e68:	08004e31 	.word	0x08004e31
 8004e6c:	08004e31 	.word	0x08004e31
 8004e70:	08004e31 	.word	0x08004e31
 8004e74:	08004fc1 	.word	0x08004fc1
 8004e78:	08004ee5 	.word	0x08004ee5
 8004e7c:	08004fa3 	.word	0x08004fa3
 8004e80:	08004e31 	.word	0x08004e31
 8004e84:	08004e31 	.word	0x08004e31
 8004e88:	08004fe3 	.word	0x08004fe3
 8004e8c:	08004e31 	.word	0x08004e31
 8004e90:	08004ee5 	.word	0x08004ee5
 8004e94:	08004e31 	.word	0x08004e31
 8004e98:	08004e31 	.word	0x08004e31
 8004e9c:	08004fab 	.word	0x08004fab
 8004ea0:	682b      	ldr	r3, [r5, #0]
 8004ea2:	1d1a      	adds	r2, r3, #4
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	602a      	str	r2, [r5, #0]
 8004ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004eac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e0a3      	b.n	8004ffc <_printf_i+0x1f4>
 8004eb4:	6820      	ldr	r0, [r4, #0]
 8004eb6:	6829      	ldr	r1, [r5, #0]
 8004eb8:	0606      	lsls	r6, r0, #24
 8004eba:	f101 0304 	add.w	r3, r1, #4
 8004ebe:	d50a      	bpl.n	8004ed6 <_printf_i+0xce>
 8004ec0:	680e      	ldr	r6, [r1, #0]
 8004ec2:	602b      	str	r3, [r5, #0]
 8004ec4:	2e00      	cmp	r6, #0
 8004ec6:	da03      	bge.n	8004ed0 <_printf_i+0xc8>
 8004ec8:	232d      	movs	r3, #45	; 0x2d
 8004eca:	4276      	negs	r6, r6
 8004ecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ed0:	485e      	ldr	r0, [pc, #376]	; (800504c <_printf_i+0x244>)
 8004ed2:	230a      	movs	r3, #10
 8004ed4:	e019      	b.n	8004f0a <_printf_i+0x102>
 8004ed6:	680e      	ldr	r6, [r1, #0]
 8004ed8:	602b      	str	r3, [r5, #0]
 8004eda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ede:	bf18      	it	ne
 8004ee0:	b236      	sxthne	r6, r6
 8004ee2:	e7ef      	b.n	8004ec4 <_printf_i+0xbc>
 8004ee4:	682b      	ldr	r3, [r5, #0]
 8004ee6:	6820      	ldr	r0, [r4, #0]
 8004ee8:	1d19      	adds	r1, r3, #4
 8004eea:	6029      	str	r1, [r5, #0]
 8004eec:	0601      	lsls	r1, r0, #24
 8004eee:	d501      	bpl.n	8004ef4 <_printf_i+0xec>
 8004ef0:	681e      	ldr	r6, [r3, #0]
 8004ef2:	e002      	b.n	8004efa <_printf_i+0xf2>
 8004ef4:	0646      	lsls	r6, r0, #25
 8004ef6:	d5fb      	bpl.n	8004ef0 <_printf_i+0xe8>
 8004ef8:	881e      	ldrh	r6, [r3, #0]
 8004efa:	4854      	ldr	r0, [pc, #336]	; (800504c <_printf_i+0x244>)
 8004efc:	2f6f      	cmp	r7, #111	; 0x6f
 8004efe:	bf0c      	ite	eq
 8004f00:	2308      	moveq	r3, #8
 8004f02:	230a      	movne	r3, #10
 8004f04:	2100      	movs	r1, #0
 8004f06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f0a:	6865      	ldr	r5, [r4, #4]
 8004f0c:	60a5      	str	r5, [r4, #8]
 8004f0e:	2d00      	cmp	r5, #0
 8004f10:	bfa2      	ittt	ge
 8004f12:	6821      	ldrge	r1, [r4, #0]
 8004f14:	f021 0104 	bicge.w	r1, r1, #4
 8004f18:	6021      	strge	r1, [r4, #0]
 8004f1a:	b90e      	cbnz	r6, 8004f20 <_printf_i+0x118>
 8004f1c:	2d00      	cmp	r5, #0
 8004f1e:	d04d      	beq.n	8004fbc <_printf_i+0x1b4>
 8004f20:	4615      	mov	r5, r2
 8004f22:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f26:	fb03 6711 	mls	r7, r3, r1, r6
 8004f2a:	5dc7      	ldrb	r7, [r0, r7]
 8004f2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f30:	4637      	mov	r7, r6
 8004f32:	42bb      	cmp	r3, r7
 8004f34:	460e      	mov	r6, r1
 8004f36:	d9f4      	bls.n	8004f22 <_printf_i+0x11a>
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d10b      	bne.n	8004f54 <_printf_i+0x14c>
 8004f3c:	6823      	ldr	r3, [r4, #0]
 8004f3e:	07de      	lsls	r6, r3, #31
 8004f40:	d508      	bpl.n	8004f54 <_printf_i+0x14c>
 8004f42:	6923      	ldr	r3, [r4, #16]
 8004f44:	6861      	ldr	r1, [r4, #4]
 8004f46:	4299      	cmp	r1, r3
 8004f48:	bfde      	ittt	le
 8004f4a:	2330      	movle	r3, #48	; 0x30
 8004f4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f50:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004f54:	1b52      	subs	r2, r2, r5
 8004f56:	6122      	str	r2, [r4, #16]
 8004f58:	f8cd a000 	str.w	sl, [sp]
 8004f5c:	464b      	mov	r3, r9
 8004f5e:	aa03      	add	r2, sp, #12
 8004f60:	4621      	mov	r1, r4
 8004f62:	4640      	mov	r0, r8
 8004f64:	f7ff fee2 	bl	8004d2c <_printf_common>
 8004f68:	3001      	adds	r0, #1
 8004f6a:	d14c      	bne.n	8005006 <_printf_i+0x1fe>
 8004f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f70:	b004      	add	sp, #16
 8004f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f76:	4835      	ldr	r0, [pc, #212]	; (800504c <_printf_i+0x244>)
 8004f78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f7c:	6829      	ldr	r1, [r5, #0]
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f84:	6029      	str	r1, [r5, #0]
 8004f86:	061d      	lsls	r5, r3, #24
 8004f88:	d514      	bpl.n	8004fb4 <_printf_i+0x1ac>
 8004f8a:	07df      	lsls	r7, r3, #31
 8004f8c:	bf44      	itt	mi
 8004f8e:	f043 0320 	orrmi.w	r3, r3, #32
 8004f92:	6023      	strmi	r3, [r4, #0]
 8004f94:	b91e      	cbnz	r6, 8004f9e <_printf_i+0x196>
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	f023 0320 	bic.w	r3, r3, #32
 8004f9c:	6023      	str	r3, [r4, #0]
 8004f9e:	2310      	movs	r3, #16
 8004fa0:	e7b0      	b.n	8004f04 <_printf_i+0xfc>
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	f043 0320 	orr.w	r3, r3, #32
 8004fa8:	6023      	str	r3, [r4, #0]
 8004faa:	2378      	movs	r3, #120	; 0x78
 8004fac:	4828      	ldr	r0, [pc, #160]	; (8005050 <_printf_i+0x248>)
 8004fae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fb2:	e7e3      	b.n	8004f7c <_printf_i+0x174>
 8004fb4:	0659      	lsls	r1, r3, #25
 8004fb6:	bf48      	it	mi
 8004fb8:	b2b6      	uxthmi	r6, r6
 8004fba:	e7e6      	b.n	8004f8a <_printf_i+0x182>
 8004fbc:	4615      	mov	r5, r2
 8004fbe:	e7bb      	b.n	8004f38 <_printf_i+0x130>
 8004fc0:	682b      	ldr	r3, [r5, #0]
 8004fc2:	6826      	ldr	r6, [r4, #0]
 8004fc4:	6961      	ldr	r1, [r4, #20]
 8004fc6:	1d18      	adds	r0, r3, #4
 8004fc8:	6028      	str	r0, [r5, #0]
 8004fca:	0635      	lsls	r5, r6, #24
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	d501      	bpl.n	8004fd4 <_printf_i+0x1cc>
 8004fd0:	6019      	str	r1, [r3, #0]
 8004fd2:	e002      	b.n	8004fda <_printf_i+0x1d2>
 8004fd4:	0670      	lsls	r0, r6, #25
 8004fd6:	d5fb      	bpl.n	8004fd0 <_printf_i+0x1c8>
 8004fd8:	8019      	strh	r1, [r3, #0]
 8004fda:	2300      	movs	r3, #0
 8004fdc:	6123      	str	r3, [r4, #16]
 8004fde:	4615      	mov	r5, r2
 8004fe0:	e7ba      	b.n	8004f58 <_printf_i+0x150>
 8004fe2:	682b      	ldr	r3, [r5, #0]
 8004fe4:	1d1a      	adds	r2, r3, #4
 8004fe6:	602a      	str	r2, [r5, #0]
 8004fe8:	681d      	ldr	r5, [r3, #0]
 8004fea:	6862      	ldr	r2, [r4, #4]
 8004fec:	2100      	movs	r1, #0
 8004fee:	4628      	mov	r0, r5
 8004ff0:	f7fb f8f6 	bl	80001e0 <memchr>
 8004ff4:	b108      	cbz	r0, 8004ffa <_printf_i+0x1f2>
 8004ff6:	1b40      	subs	r0, r0, r5
 8004ff8:	6060      	str	r0, [r4, #4]
 8004ffa:	6863      	ldr	r3, [r4, #4]
 8004ffc:	6123      	str	r3, [r4, #16]
 8004ffe:	2300      	movs	r3, #0
 8005000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005004:	e7a8      	b.n	8004f58 <_printf_i+0x150>
 8005006:	6923      	ldr	r3, [r4, #16]
 8005008:	462a      	mov	r2, r5
 800500a:	4649      	mov	r1, r9
 800500c:	4640      	mov	r0, r8
 800500e:	47d0      	blx	sl
 8005010:	3001      	adds	r0, #1
 8005012:	d0ab      	beq.n	8004f6c <_printf_i+0x164>
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	079b      	lsls	r3, r3, #30
 8005018:	d413      	bmi.n	8005042 <_printf_i+0x23a>
 800501a:	68e0      	ldr	r0, [r4, #12]
 800501c:	9b03      	ldr	r3, [sp, #12]
 800501e:	4298      	cmp	r0, r3
 8005020:	bfb8      	it	lt
 8005022:	4618      	movlt	r0, r3
 8005024:	e7a4      	b.n	8004f70 <_printf_i+0x168>
 8005026:	2301      	movs	r3, #1
 8005028:	4632      	mov	r2, r6
 800502a:	4649      	mov	r1, r9
 800502c:	4640      	mov	r0, r8
 800502e:	47d0      	blx	sl
 8005030:	3001      	adds	r0, #1
 8005032:	d09b      	beq.n	8004f6c <_printf_i+0x164>
 8005034:	3501      	adds	r5, #1
 8005036:	68e3      	ldr	r3, [r4, #12]
 8005038:	9903      	ldr	r1, [sp, #12]
 800503a:	1a5b      	subs	r3, r3, r1
 800503c:	42ab      	cmp	r3, r5
 800503e:	dcf2      	bgt.n	8005026 <_printf_i+0x21e>
 8005040:	e7eb      	b.n	800501a <_printf_i+0x212>
 8005042:	2500      	movs	r5, #0
 8005044:	f104 0619 	add.w	r6, r4, #25
 8005048:	e7f5      	b.n	8005036 <_printf_i+0x22e>
 800504a:	bf00      	nop
 800504c:	080058a9 	.word	0x080058a9
 8005050:	080058ba 	.word	0x080058ba

08005054 <memmove>:
 8005054:	4288      	cmp	r0, r1
 8005056:	b510      	push	{r4, lr}
 8005058:	eb01 0402 	add.w	r4, r1, r2
 800505c:	d902      	bls.n	8005064 <memmove+0x10>
 800505e:	4284      	cmp	r4, r0
 8005060:	4623      	mov	r3, r4
 8005062:	d807      	bhi.n	8005074 <memmove+0x20>
 8005064:	1e43      	subs	r3, r0, #1
 8005066:	42a1      	cmp	r1, r4
 8005068:	d008      	beq.n	800507c <memmove+0x28>
 800506a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800506e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005072:	e7f8      	b.n	8005066 <memmove+0x12>
 8005074:	4402      	add	r2, r0
 8005076:	4601      	mov	r1, r0
 8005078:	428a      	cmp	r2, r1
 800507a:	d100      	bne.n	800507e <memmove+0x2a>
 800507c:	bd10      	pop	{r4, pc}
 800507e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005082:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005086:	e7f7      	b.n	8005078 <memmove+0x24>

08005088 <_free_r>:
 8005088:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800508a:	2900      	cmp	r1, #0
 800508c:	d044      	beq.n	8005118 <_free_r+0x90>
 800508e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005092:	9001      	str	r0, [sp, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	f1a1 0404 	sub.w	r4, r1, #4
 800509a:	bfb8      	it	lt
 800509c:	18e4      	addlt	r4, r4, r3
 800509e:	f000 f913 	bl	80052c8 <__malloc_lock>
 80050a2:	4a1e      	ldr	r2, [pc, #120]	; (800511c <_free_r+0x94>)
 80050a4:	9801      	ldr	r0, [sp, #4]
 80050a6:	6813      	ldr	r3, [r2, #0]
 80050a8:	b933      	cbnz	r3, 80050b8 <_free_r+0x30>
 80050aa:	6063      	str	r3, [r4, #4]
 80050ac:	6014      	str	r4, [r2, #0]
 80050ae:	b003      	add	sp, #12
 80050b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050b4:	f000 b90e 	b.w	80052d4 <__malloc_unlock>
 80050b8:	42a3      	cmp	r3, r4
 80050ba:	d908      	bls.n	80050ce <_free_r+0x46>
 80050bc:	6825      	ldr	r5, [r4, #0]
 80050be:	1961      	adds	r1, r4, r5
 80050c0:	428b      	cmp	r3, r1
 80050c2:	bf01      	itttt	eq
 80050c4:	6819      	ldreq	r1, [r3, #0]
 80050c6:	685b      	ldreq	r3, [r3, #4]
 80050c8:	1949      	addeq	r1, r1, r5
 80050ca:	6021      	streq	r1, [r4, #0]
 80050cc:	e7ed      	b.n	80050aa <_free_r+0x22>
 80050ce:	461a      	mov	r2, r3
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	b10b      	cbz	r3, 80050d8 <_free_r+0x50>
 80050d4:	42a3      	cmp	r3, r4
 80050d6:	d9fa      	bls.n	80050ce <_free_r+0x46>
 80050d8:	6811      	ldr	r1, [r2, #0]
 80050da:	1855      	adds	r5, r2, r1
 80050dc:	42a5      	cmp	r5, r4
 80050de:	d10b      	bne.n	80050f8 <_free_r+0x70>
 80050e0:	6824      	ldr	r4, [r4, #0]
 80050e2:	4421      	add	r1, r4
 80050e4:	1854      	adds	r4, r2, r1
 80050e6:	42a3      	cmp	r3, r4
 80050e8:	6011      	str	r1, [r2, #0]
 80050ea:	d1e0      	bne.n	80050ae <_free_r+0x26>
 80050ec:	681c      	ldr	r4, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	6053      	str	r3, [r2, #4]
 80050f2:	4421      	add	r1, r4
 80050f4:	6011      	str	r1, [r2, #0]
 80050f6:	e7da      	b.n	80050ae <_free_r+0x26>
 80050f8:	d902      	bls.n	8005100 <_free_r+0x78>
 80050fa:	230c      	movs	r3, #12
 80050fc:	6003      	str	r3, [r0, #0]
 80050fe:	e7d6      	b.n	80050ae <_free_r+0x26>
 8005100:	6825      	ldr	r5, [r4, #0]
 8005102:	1961      	adds	r1, r4, r5
 8005104:	428b      	cmp	r3, r1
 8005106:	bf04      	itt	eq
 8005108:	6819      	ldreq	r1, [r3, #0]
 800510a:	685b      	ldreq	r3, [r3, #4]
 800510c:	6063      	str	r3, [r4, #4]
 800510e:	bf04      	itt	eq
 8005110:	1949      	addeq	r1, r1, r5
 8005112:	6021      	streq	r1, [r4, #0]
 8005114:	6054      	str	r4, [r2, #4]
 8005116:	e7ca      	b.n	80050ae <_free_r+0x26>
 8005118:	b003      	add	sp, #12
 800511a:	bd30      	pop	{r4, r5, pc}
 800511c:	20000270 	.word	0x20000270

08005120 <sbrk_aligned>:
 8005120:	b570      	push	{r4, r5, r6, lr}
 8005122:	4e0e      	ldr	r6, [pc, #56]	; (800515c <sbrk_aligned+0x3c>)
 8005124:	460c      	mov	r4, r1
 8005126:	6831      	ldr	r1, [r6, #0]
 8005128:	4605      	mov	r5, r0
 800512a:	b911      	cbnz	r1, 8005132 <sbrk_aligned+0x12>
 800512c:	f000 f8bc 	bl	80052a8 <_sbrk_r>
 8005130:	6030      	str	r0, [r6, #0]
 8005132:	4621      	mov	r1, r4
 8005134:	4628      	mov	r0, r5
 8005136:	f000 f8b7 	bl	80052a8 <_sbrk_r>
 800513a:	1c43      	adds	r3, r0, #1
 800513c:	d00a      	beq.n	8005154 <sbrk_aligned+0x34>
 800513e:	1cc4      	adds	r4, r0, #3
 8005140:	f024 0403 	bic.w	r4, r4, #3
 8005144:	42a0      	cmp	r0, r4
 8005146:	d007      	beq.n	8005158 <sbrk_aligned+0x38>
 8005148:	1a21      	subs	r1, r4, r0
 800514a:	4628      	mov	r0, r5
 800514c:	f000 f8ac 	bl	80052a8 <_sbrk_r>
 8005150:	3001      	adds	r0, #1
 8005152:	d101      	bne.n	8005158 <sbrk_aligned+0x38>
 8005154:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005158:	4620      	mov	r0, r4
 800515a:	bd70      	pop	{r4, r5, r6, pc}
 800515c:	20000274 	.word	0x20000274

08005160 <_malloc_r>:
 8005160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005164:	1ccd      	adds	r5, r1, #3
 8005166:	f025 0503 	bic.w	r5, r5, #3
 800516a:	3508      	adds	r5, #8
 800516c:	2d0c      	cmp	r5, #12
 800516e:	bf38      	it	cc
 8005170:	250c      	movcc	r5, #12
 8005172:	2d00      	cmp	r5, #0
 8005174:	4607      	mov	r7, r0
 8005176:	db01      	blt.n	800517c <_malloc_r+0x1c>
 8005178:	42a9      	cmp	r1, r5
 800517a:	d905      	bls.n	8005188 <_malloc_r+0x28>
 800517c:	230c      	movs	r3, #12
 800517e:	603b      	str	r3, [r7, #0]
 8005180:	2600      	movs	r6, #0
 8005182:	4630      	mov	r0, r6
 8005184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005188:	4e2e      	ldr	r6, [pc, #184]	; (8005244 <_malloc_r+0xe4>)
 800518a:	f000 f89d 	bl	80052c8 <__malloc_lock>
 800518e:	6833      	ldr	r3, [r6, #0]
 8005190:	461c      	mov	r4, r3
 8005192:	bb34      	cbnz	r4, 80051e2 <_malloc_r+0x82>
 8005194:	4629      	mov	r1, r5
 8005196:	4638      	mov	r0, r7
 8005198:	f7ff ffc2 	bl	8005120 <sbrk_aligned>
 800519c:	1c43      	adds	r3, r0, #1
 800519e:	4604      	mov	r4, r0
 80051a0:	d14d      	bne.n	800523e <_malloc_r+0xde>
 80051a2:	6834      	ldr	r4, [r6, #0]
 80051a4:	4626      	mov	r6, r4
 80051a6:	2e00      	cmp	r6, #0
 80051a8:	d140      	bne.n	800522c <_malloc_r+0xcc>
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	4631      	mov	r1, r6
 80051ae:	4638      	mov	r0, r7
 80051b0:	eb04 0803 	add.w	r8, r4, r3
 80051b4:	f000 f878 	bl	80052a8 <_sbrk_r>
 80051b8:	4580      	cmp	r8, r0
 80051ba:	d13a      	bne.n	8005232 <_malloc_r+0xd2>
 80051bc:	6821      	ldr	r1, [r4, #0]
 80051be:	3503      	adds	r5, #3
 80051c0:	1a6d      	subs	r5, r5, r1
 80051c2:	f025 0503 	bic.w	r5, r5, #3
 80051c6:	3508      	adds	r5, #8
 80051c8:	2d0c      	cmp	r5, #12
 80051ca:	bf38      	it	cc
 80051cc:	250c      	movcc	r5, #12
 80051ce:	4629      	mov	r1, r5
 80051d0:	4638      	mov	r0, r7
 80051d2:	f7ff ffa5 	bl	8005120 <sbrk_aligned>
 80051d6:	3001      	adds	r0, #1
 80051d8:	d02b      	beq.n	8005232 <_malloc_r+0xd2>
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	442b      	add	r3, r5
 80051de:	6023      	str	r3, [r4, #0]
 80051e0:	e00e      	b.n	8005200 <_malloc_r+0xa0>
 80051e2:	6822      	ldr	r2, [r4, #0]
 80051e4:	1b52      	subs	r2, r2, r5
 80051e6:	d41e      	bmi.n	8005226 <_malloc_r+0xc6>
 80051e8:	2a0b      	cmp	r2, #11
 80051ea:	d916      	bls.n	800521a <_malloc_r+0xba>
 80051ec:	1961      	adds	r1, r4, r5
 80051ee:	42a3      	cmp	r3, r4
 80051f0:	6025      	str	r5, [r4, #0]
 80051f2:	bf18      	it	ne
 80051f4:	6059      	strne	r1, [r3, #4]
 80051f6:	6863      	ldr	r3, [r4, #4]
 80051f8:	bf08      	it	eq
 80051fa:	6031      	streq	r1, [r6, #0]
 80051fc:	5162      	str	r2, [r4, r5]
 80051fe:	604b      	str	r3, [r1, #4]
 8005200:	4638      	mov	r0, r7
 8005202:	f104 060b 	add.w	r6, r4, #11
 8005206:	f000 f865 	bl	80052d4 <__malloc_unlock>
 800520a:	f026 0607 	bic.w	r6, r6, #7
 800520e:	1d23      	adds	r3, r4, #4
 8005210:	1af2      	subs	r2, r6, r3
 8005212:	d0b6      	beq.n	8005182 <_malloc_r+0x22>
 8005214:	1b9b      	subs	r3, r3, r6
 8005216:	50a3      	str	r3, [r4, r2]
 8005218:	e7b3      	b.n	8005182 <_malloc_r+0x22>
 800521a:	6862      	ldr	r2, [r4, #4]
 800521c:	42a3      	cmp	r3, r4
 800521e:	bf0c      	ite	eq
 8005220:	6032      	streq	r2, [r6, #0]
 8005222:	605a      	strne	r2, [r3, #4]
 8005224:	e7ec      	b.n	8005200 <_malloc_r+0xa0>
 8005226:	4623      	mov	r3, r4
 8005228:	6864      	ldr	r4, [r4, #4]
 800522a:	e7b2      	b.n	8005192 <_malloc_r+0x32>
 800522c:	4634      	mov	r4, r6
 800522e:	6876      	ldr	r6, [r6, #4]
 8005230:	e7b9      	b.n	80051a6 <_malloc_r+0x46>
 8005232:	230c      	movs	r3, #12
 8005234:	603b      	str	r3, [r7, #0]
 8005236:	4638      	mov	r0, r7
 8005238:	f000 f84c 	bl	80052d4 <__malloc_unlock>
 800523c:	e7a1      	b.n	8005182 <_malloc_r+0x22>
 800523e:	6025      	str	r5, [r4, #0]
 8005240:	e7de      	b.n	8005200 <_malloc_r+0xa0>
 8005242:	bf00      	nop
 8005244:	20000270 	.word	0x20000270

08005248 <_realloc_r>:
 8005248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800524c:	4680      	mov	r8, r0
 800524e:	4614      	mov	r4, r2
 8005250:	460e      	mov	r6, r1
 8005252:	b921      	cbnz	r1, 800525e <_realloc_r+0x16>
 8005254:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005258:	4611      	mov	r1, r2
 800525a:	f7ff bf81 	b.w	8005160 <_malloc_r>
 800525e:	b92a      	cbnz	r2, 800526c <_realloc_r+0x24>
 8005260:	f7ff ff12 	bl	8005088 <_free_r>
 8005264:	4625      	mov	r5, r4
 8005266:	4628      	mov	r0, r5
 8005268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800526c:	f000 f838 	bl	80052e0 <_malloc_usable_size_r>
 8005270:	4284      	cmp	r4, r0
 8005272:	4607      	mov	r7, r0
 8005274:	d802      	bhi.n	800527c <_realloc_r+0x34>
 8005276:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800527a:	d812      	bhi.n	80052a2 <_realloc_r+0x5a>
 800527c:	4621      	mov	r1, r4
 800527e:	4640      	mov	r0, r8
 8005280:	f7ff ff6e 	bl	8005160 <_malloc_r>
 8005284:	4605      	mov	r5, r0
 8005286:	2800      	cmp	r0, #0
 8005288:	d0ed      	beq.n	8005266 <_realloc_r+0x1e>
 800528a:	42bc      	cmp	r4, r7
 800528c:	4622      	mov	r2, r4
 800528e:	4631      	mov	r1, r6
 8005290:	bf28      	it	cs
 8005292:	463a      	movcs	r2, r7
 8005294:	f7ff fbb8 	bl	8004a08 <memcpy>
 8005298:	4631      	mov	r1, r6
 800529a:	4640      	mov	r0, r8
 800529c:	f7ff fef4 	bl	8005088 <_free_r>
 80052a0:	e7e1      	b.n	8005266 <_realloc_r+0x1e>
 80052a2:	4635      	mov	r5, r6
 80052a4:	e7df      	b.n	8005266 <_realloc_r+0x1e>
	...

080052a8 <_sbrk_r>:
 80052a8:	b538      	push	{r3, r4, r5, lr}
 80052aa:	4d06      	ldr	r5, [pc, #24]	; (80052c4 <_sbrk_r+0x1c>)
 80052ac:	2300      	movs	r3, #0
 80052ae:	4604      	mov	r4, r0
 80052b0:	4608      	mov	r0, r1
 80052b2:	602b      	str	r3, [r5, #0]
 80052b4:	f7fc faba 	bl	800182c <_sbrk>
 80052b8:	1c43      	adds	r3, r0, #1
 80052ba:	d102      	bne.n	80052c2 <_sbrk_r+0x1a>
 80052bc:	682b      	ldr	r3, [r5, #0]
 80052be:	b103      	cbz	r3, 80052c2 <_sbrk_r+0x1a>
 80052c0:	6023      	str	r3, [r4, #0]
 80052c2:	bd38      	pop	{r3, r4, r5, pc}
 80052c4:	20000278 	.word	0x20000278

080052c8 <__malloc_lock>:
 80052c8:	4801      	ldr	r0, [pc, #4]	; (80052d0 <__malloc_lock+0x8>)
 80052ca:	f000 b811 	b.w	80052f0 <__retarget_lock_acquire_recursive>
 80052ce:	bf00      	nop
 80052d0:	2000027c 	.word	0x2000027c

080052d4 <__malloc_unlock>:
 80052d4:	4801      	ldr	r0, [pc, #4]	; (80052dc <__malloc_unlock+0x8>)
 80052d6:	f000 b80c 	b.w	80052f2 <__retarget_lock_release_recursive>
 80052da:	bf00      	nop
 80052dc:	2000027c 	.word	0x2000027c

080052e0 <_malloc_usable_size_r>:
 80052e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052e4:	1f18      	subs	r0, r3, #4
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	bfbc      	itt	lt
 80052ea:	580b      	ldrlt	r3, [r1, r0]
 80052ec:	18c0      	addlt	r0, r0, r3
 80052ee:	4770      	bx	lr

080052f0 <__retarget_lock_acquire_recursive>:
 80052f0:	4770      	bx	lr

080052f2 <__retarget_lock_release_recursive>:
 80052f2:	4770      	bx	lr

080052f4 <_init>:
 80052f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f6:	bf00      	nop
 80052f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052fa:	bc08      	pop	{r3}
 80052fc:	469e      	mov	lr, r3
 80052fe:	4770      	bx	lr

08005300 <_fini>:
 8005300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005302:	bf00      	nop
 8005304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005306:	bc08      	pop	{r3}
 8005308:	469e      	mov	lr, r3
 800530a:	4770      	bx	lr
