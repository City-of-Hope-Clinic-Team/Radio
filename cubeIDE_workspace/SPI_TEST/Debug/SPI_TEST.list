
SPI_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002408  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002594  08002594  00012594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025d4  080025d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080025d4  080025d4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025d4  080025d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025d4  080025d4  000125d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025d8  080025d8  000125d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080025dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000000c  080025e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080025e8  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d50  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013c0  00000000  00000000  00026d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  00028150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c0  00000000  00000000  000288b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ecde  00000000  00000000  00028f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007ce5  00000000  00000000  00047c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba3bc  00000000  00000000  0004f93b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00109cf7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cd8  00000000  00000000  00109d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800257c 	.word	0x0800257c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	0800257c 	.word	0x0800257c

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fade 	bl	8000792 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f949 	bl	800046c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f9cb 	bl	8000574 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001de:	f000 f98b 	bl	80004f8 <MX_SPI1_Init>

  //uint8_t buf[14];
  //uint8_t buf2[5];
  uint8_t checkStatus;
  uint8_t checkFIFO_Status;
  setupTXsimple();
 80001e2:	f000 f8b7 	bl	8000354 <setupTXsimple>
	  spiWriteNByte(0x0A, new_val, 5);
	  spiReadNByte(0x0A, result, 5);
	  */

	  //readtxResult = spiReadByte(0x0A, size);
	  checkStatus = spiReadByte(REG_STATUS); // Expect x0E
 80001e6:	2007      	movs	r0, #7
 80001e8:	f000 f824 	bl	8000234 <spiReadByte>
 80001ec:	4603      	mov	r3, r0
 80001ee:	71fb      	strb	r3, [r7, #7]
	  checkFIFO_Status = spiReadByte(REG_FIFO_STATUS); // x11 expected
 80001f0:	2017      	movs	r0, #23
 80001f2:	f000 f81f 	bl	8000234 <spiReadByte>
 80001f6:	4603      	mov	r3, r0
 80001f8:	71bb      	strb	r3, [r7, #6]
	  transmitByte(0x5C);
 80001fa:	205c      	movs	r0, #92	; 0x5c
 80001fc:	f000 f8f4 	bl	80003e8 <transmitByte>
	  transmitByte(0x5D);
 8000200:	205d      	movs	r0, #93	; 0x5d
 8000202:	f000 f8f1 	bl	80003e8 <transmitByte>
	  checkStatus = spiReadByte(REG_STATUS); // Expect x2E
 8000206:	2007      	movs	r0, #7
 8000208:	f000 f814 	bl	8000234 <spiReadByte>
 800020c:	4603      	mov	r3, r0
 800020e:	71fb      	strb	r3, [r7, #7]
	  spiWriteByte(REG_STATUS, 0x2E); // CLEARing datasend flag!
 8000210:	212e      	movs	r1, #46	; 0x2e
 8000212:	2007      	movs	r0, #7
 8000214:	f000 f83a 	bl	800028c <spiWriteByte>
	  checkStatus = spiReadByte(REG_STATUS); // Expect x0E
 8000218:	2007      	movs	r0, #7
 800021a:	f000 f80b 	bl	8000234 <spiReadByte>
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
	  checkFIFO_Status = spiReadByte(REG_FIFO_STATUS);// x01 expected
 8000222:	2017      	movs	r0, #23
 8000224:	f000 f806 	bl	8000234 <spiReadByte>
 8000228:	4603      	mov	r3, r0
 800022a:	71bb      	strb	r3, [r7, #6]
	  flushTXFIFO();
 800022c:	f000 f900 	bl	8000430 <flushTXFIFO>
	  checkStatus = spiReadByte(REG_STATUS); // Expect x0E
 8000230:	e7d9      	b.n	80001e6 <main+0x1a>
	...

08000234 <spiReadByte>:
  /* USER CODE END 3 */
}


uint8_t spiReadByte(uint8_t address)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af02      	add	r7, sp, #8
 800023a:	4603      	mov	r3, r0
 800023c:	71fb      	strb	r3, [r7, #7]
	spitxbuffer[0] = address;
 800023e:	4a0f      	ldr	r2, [pc, #60]	; (800027c <spiReadByte+0x48>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	7013      	strb	r3, [r2, #0]
	spitxbuffer[1] = 0;
 8000244:	4b0d      	ldr	r3, [pc, #52]	; (800027c <spiReadByte+0x48>)
 8000246:	2200      	movs	r2, #0
 8000248:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(GPIOB, CSNpin_Pin, GPIO_PIN_RESET); // put CSN = 0
 800024a:	2200      	movs	r2, #0
 800024c:	2108      	movs	r1, #8
 800024e:	480c      	ldr	r0, [pc, #48]	; (8000280 <spiReadByte+0x4c>)
 8000250:	f000 fd64 	bl	8000d1c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, spitxbuffer, spirxbuffer, 2*sizeof(uint8_t), HAL_MAX_DELAY);
 8000254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000258:	9300      	str	r3, [sp, #0]
 800025a:	2302      	movs	r3, #2
 800025c:	4a09      	ldr	r2, [pc, #36]	; (8000284 <spiReadByte+0x50>)
 800025e:	4907      	ldr	r1, [pc, #28]	; (800027c <spiReadByte+0x48>)
 8000260:	4809      	ldr	r0, [pc, #36]	; (8000288 <spiReadByte+0x54>)
 8000262:	f001 fde8 	bl	8001e36 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOB, CSNpin_Pin, GPIO_PIN_SET); // put CSN = 0
 8000266:	2201      	movs	r2, #1
 8000268:	2108      	movs	r1, #8
 800026a:	4805      	ldr	r0, [pc, #20]	; (8000280 <spiReadByte+0x4c>)
 800026c:	f000 fd56 	bl	8000d1c <HAL_GPIO_WritePin>
	return spirxbuffer[1];
 8000270:	4b04      	ldr	r3, [pc, #16]	; (8000284 <spiReadByte+0x50>)
 8000272:	785b      	ldrb	r3, [r3, #1]

}
 8000274:	4618      	mov	r0, r3
 8000276:	3708      	adds	r7, #8
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	20000028 	.word	0x20000028
 8000280:	48000400 	.word	0x48000400
 8000284:	20000030 	.word	0x20000030
 8000288:	20000038 	.word	0x20000038

0800028c <spiWriteByte>:
	HAL_GPIO_WritePin(GPIOB, CSNpin_Pin, GPIO_PIN_SET); // put CSN = 1
}


void spiWriteByte(uint8_t address, uint8_t value)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b084      	sub	sp, #16
 8000290:	af02      	add	r7, sp, #8
 8000292:	4603      	mov	r3, r0
 8000294:	460a      	mov	r2, r1
 8000296:	71fb      	strb	r3, [r7, #7]
 8000298:	4613      	mov	r3, r2
 800029a:	71bb      	strb	r3, [r7, #6]
	spitxbuffer[0] = address | 1<<5; // need to set 3 msb to 1 for writes
 800029c:	79fb      	ldrb	r3, [r7, #7]
 800029e:	f043 0320 	orr.w	r3, r3, #32
 80002a2:	b2da      	uxtb	r2, r3
 80002a4:	4b0d      	ldr	r3, [pc, #52]	; (80002dc <spiWriteByte+0x50>)
 80002a6:	701a      	strb	r2, [r3, #0]
	spitxbuffer[1] = value;
 80002a8:	4a0c      	ldr	r2, [pc, #48]	; (80002dc <spiWriteByte+0x50>)
 80002aa:	79bb      	ldrb	r3, [r7, #6]
 80002ac:	7053      	strb	r3, [r2, #1]

	HAL_GPIO_WritePin(GPIOB, CSNpin_Pin, GPIO_PIN_RESET); // put CSN = 0
 80002ae:	2200      	movs	r2, #0
 80002b0:	2108      	movs	r1, #8
 80002b2:	480b      	ldr	r0, [pc, #44]	; (80002e0 <spiWriteByte+0x54>)
 80002b4:	f000 fd32 	bl	8000d1c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, spitxbuffer, spirxbuffer, 2, HAL_MAX_DELAY);
 80002b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80002bc:	9300      	str	r3, [sp, #0]
 80002be:	2302      	movs	r3, #2
 80002c0:	4a08      	ldr	r2, [pc, #32]	; (80002e4 <spiWriteByte+0x58>)
 80002c2:	4906      	ldr	r1, [pc, #24]	; (80002dc <spiWriteByte+0x50>)
 80002c4:	4808      	ldr	r0, [pc, #32]	; (80002e8 <spiWriteByte+0x5c>)
 80002c6:	f001 fdb6 	bl	8001e36 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOB, CSNpin_Pin, GPIO_PIN_SET); // put CSN = 0
 80002ca:	2201      	movs	r2, #1
 80002cc:	2108      	movs	r1, #8
 80002ce:	4804      	ldr	r0, [pc, #16]	; (80002e0 <spiWriteByte+0x54>)
 80002d0:	f000 fd24 	bl	8000d1c <HAL_GPIO_WritePin>


}
 80002d4:	bf00      	nop
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20000028 	.word	0x20000028
 80002e0:	48000400 	.word	0x48000400
 80002e4:	20000030 	.word	0x20000030
 80002e8:	20000038 	.word	0x20000038

080002ec <spiWriteNByte>:

void spiWriteNByte(uint8_t address, const uint8_t *buf, uint8_t len)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	6039      	str	r1, [r7, #0]
 80002f6:	71fb      	strb	r3, [r7, #7]
 80002f8:	4613      	mov	r3, r2
 80002fa:	71bb      	strb	r3, [r7, #6]
	spitxbuffer[0] = address | 1 <<5;
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	f043 0320 	orr.w	r3, r3, #32
 8000302:	b2da      	uxtb	r2, r3
 8000304:	4b10      	ldr	r3, [pc, #64]	; (8000348 <spiWriteNByte+0x5c>)
 8000306:	701a      	strb	r2, [r3, #0]
	spitxbuffer[1] = 0;
 8000308:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <spiWriteNByte+0x5c>)
 800030a:	2200      	movs	r2, #0
 800030c:	705a      	strb	r2, [r3, #1]
	//Put CSN low
	HAL_GPIO_WritePin(GPIOB, CSNpin_Pin, GPIO_PIN_RESET); // put CSN = 0
 800030e:	2200      	movs	r2, #0
 8000310:	2108      	movs	r1, #8
 8000312:	480e      	ldr	r0, [pc, #56]	; (800034c <spiWriteNByte+0x60>)
 8000314:	f000 fd02 	bl	8000d1c <HAL_GPIO_WritePin>
	//Transmit register address
	HAL_SPI_Transmit(&hspi1, spitxbuffer, 1, HAL_MAX_DELAY);	//Receive data
 8000318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800031c:	2201      	movs	r2, #1
 800031e:	490a      	ldr	r1, [pc, #40]	; (8000348 <spiWriteNByte+0x5c>)
 8000320:	480b      	ldr	r0, [pc, #44]	; (8000350 <spiWriteNByte+0x64>)
 8000322:	f001 fc1a 	bl	8001b5a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)buf, len, HAL_MAX_DELAY);
 8000326:	79bb      	ldrb	r3, [r7, #6]
 8000328:	b29a      	uxth	r2, r3
 800032a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800032e:	6839      	ldr	r1, [r7, #0]
 8000330:	4807      	ldr	r0, [pc, #28]	; (8000350 <spiWriteNByte+0x64>)
 8000332:	f001 fc12 	bl	8001b5a <HAL_SPI_Transmit>
	//Bring CSN high
	HAL_GPIO_WritePin(GPIOB, CSNpin_Pin, GPIO_PIN_SET); // put CSN = 1
 8000336:	2201      	movs	r2, #1
 8000338:	2108      	movs	r1, #8
 800033a:	4804      	ldr	r0, [pc, #16]	; (800034c <spiWriteNByte+0x60>)
 800033c:	f000 fcee 	bl	8000d1c <HAL_GPIO_WritePin>
}
 8000340:	bf00      	nop
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	20000028 	.word	0x20000028
 800034c:	48000400 	.word	0x48000400
 8000350:	20000038 	.word	0x20000038

08000354 <setupTXsimple>:

void setupTXsimple(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
	spiWriteByte(REG_SETUP_RETR, 0x00); // no retransmission / acknowledgment
 800035a:	2100      	movs	r1, #0
 800035c:	2004      	movs	r0, #4
 800035e:	f7ff ff95 	bl	800028c <spiWriteByte>
	spiWriteByte(REG_EN_AA, 0x00); //no auto acknowledge
 8000362:	2100      	movs	r1, #0
 8000364:	2001      	movs	r0, #1
 8000366:	f7ff ff91 	bl	800028c <spiWriteByte>
	spiWriteByte(REG_SETUP_AW, 0x02); // makes address width 4 bytes
 800036a:	2102      	movs	r1, #2
 800036c:	2003      	movs	r0, #3
 800036e:	f7ff ff8d 	bl	800028c <spiWriteByte>
	spiWriteByte(REG_RF_CH, 0x02);// make frequency 2.402 Ghz
 8000372:	2102      	movs	r1, #2
 8000374:	2005      	movs	r0, #5
 8000376:	f7ff ff89 	bl	800028c <spiWriteByte>
	spiWriteByte(REG_RF_SETUP, 0x26); // lowest data rate + highest output pwr
 800037a:	2126      	movs	r1, #38	; 0x26
 800037c:	2006      	movs	r0, #6
 800037e:	f7ff ff85 	bl	800028c <spiWriteByte>

	// What is our TX_ADDRESS
	uint8_t TxAddr[4] = {0x00, 0x11, 0x22, 0x33};
 8000382:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <setupTXsimple+0x90>)
 8000384:	607b      	str	r3, [r7, #4]
	spiWriteNByte(REG_TX_ADDR, TxAddr, 4);
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	2204      	movs	r2, #4
 800038a:	4619      	mov	r1, r3
 800038c:	2010      	movs	r0, #16
 800038e:	f7ff ffad 	bl	80002ec <spiWriteNByte>

	// Receive Pipes not used
	spiWriteByte(REG_RX_PW_P0, 0x00);
 8000392:	2100      	movs	r1, #0
 8000394:	2011      	movs	r0, #17
 8000396:	f7ff ff79 	bl	800028c <spiWriteByte>
	spiWriteByte(REG_RX_PW_P1, 0x00);
 800039a:	2100      	movs	r1, #0
 800039c:	2012      	movs	r0, #18
 800039e:	f7ff ff75 	bl	800028c <spiWriteByte>
	spiWriteByte(REG_RX_PW_P2, 0x00);
 80003a2:	2100      	movs	r1, #0
 80003a4:	2013      	movs	r0, #19
 80003a6:	f7ff ff71 	bl	800028c <spiWriteByte>
	spiWriteByte(REG_RX_PW_P3, 0x00);
 80003aa:	2100      	movs	r1, #0
 80003ac:	2014      	movs	r0, #20
 80003ae:	f7ff ff6d 	bl	800028c <spiWriteByte>
	spiWriteByte(REG_RX_PW_P4, 0x00);
 80003b2:	2100      	movs	r1, #0
 80003b4:	2015      	movs	r0, #21
 80003b6:	f7ff ff69 	bl	800028c <spiWriteByte>
	spiWriteByte(REG_RX_PW_P5, 0x00);
 80003ba:	2100      	movs	r1, #0
 80003bc:	2016      	movs	r0, #22
 80003be:	f7ff ff65 	bl	800028c <spiWriteByte>

	// no shockburst stuff
	spiWriteByte(REG_DYNPD, 0x00);
 80003c2:	2100      	movs	r1, #0
 80003c4:	201c      	movs	r0, #28
 80003c6:	f7ff ff61 	bl	800028c <spiWriteByte>
	spiWriteByte(REG_FEATURE, 0x00);
 80003ca:	2100      	movs	r1, #0
 80003cc:	201d      	movs	r0, #29
 80003ce:	f7ff ff5d 	bl	800028c <spiWriteByte>

	// Do config
	spiWriteByte(REG_CONFIG, 0x0A);
 80003d2:	210a      	movs	r1, #10
 80003d4:	2000      	movs	r0, #0
 80003d6:	f7ff ff59 	bl	800028c <spiWriteByte>
}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	33221100 	.word	0x33221100

080003e8 <transmitByte>:
	buf[11] =  spiReadByte(REG_FEATURE);
	buf[12] =  spiReadByte(REG_CONFIG);
}

void transmitByte(uint8_t data)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
	uint8_t txData[2];
	txData[0] = 0xB0; // using the W_TX_PAYLOAD_NOACK cmd
 80003f2:	23b0      	movs	r3, #176	; 0xb0
 80003f4:	733b      	strb	r3, [r7, #12]
	txData[1] = data;
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(GPIOB, CSNpin_Pin, GPIO_PIN_RESET); // put CSN = 0
 80003fa:	2200      	movs	r2, #0
 80003fc:	2108      	movs	r1, #8
 80003fe:	480a      	ldr	r0, [pc, #40]	; (8000428 <transmitByte+0x40>)
 8000400:	f000 fc8c 	bl	8000d1c <HAL_GPIO_WritePin>
	// Send W_TX_Command
	HAL_SPI_Transmit(&hspi1, txData, 2, HAL_MAX_DELAY);
 8000404:	f107 010c 	add.w	r1, r7, #12
 8000408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800040c:	2202      	movs	r2, #2
 800040e:	4807      	ldr	r0, [pc, #28]	; (800042c <transmitByte+0x44>)
 8000410:	f001 fba3 	bl	8001b5a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, CSNpin_Pin, GPIO_PIN_SET); // put CSN = 0
 8000414:	2201      	movs	r2, #1
 8000416:	2108      	movs	r1, #8
 8000418:	4803      	ldr	r0, [pc, #12]	; (8000428 <transmitByte+0x40>)
 800041a:	f000 fc7f 	bl	8000d1c <HAL_GPIO_WritePin>

}
 800041e:	bf00      	nop
 8000420:	3710      	adds	r7, #16
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	48000400 	.word	0x48000400
 800042c:	20000038 	.word	0x20000038

08000430 <flushTXFIFO>:

void flushTXFIFO(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
	uint8_t txData[2];
	txData[0] = 0xE1; // using the W_TX_PAYLOAD_NOACK cmd
 8000436:	23e1      	movs	r3, #225	; 0xe1
 8000438:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, CSNpin_Pin, GPIO_PIN_RESET); // put CSN = 0
 800043a:	2200      	movs	r2, #0
 800043c:	2108      	movs	r1, #8
 800043e:	4809      	ldr	r0, [pc, #36]	; (8000464 <flushTXFIFO+0x34>)
 8000440:	f000 fc6c 	bl	8000d1c <HAL_GPIO_WritePin>
	// Send W_TX_Command
	HAL_SPI_Transmit(&hspi1, txData, 1, HAL_MAX_DELAY);
 8000444:	1d39      	adds	r1, r7, #4
 8000446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800044a:	2201      	movs	r2, #1
 800044c:	4806      	ldr	r0, [pc, #24]	; (8000468 <flushTXFIFO+0x38>)
 800044e:	f001 fb84 	bl	8001b5a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, CSNpin_Pin, GPIO_PIN_SET); // put CSN = 0
 8000452:	2201      	movs	r2, #1
 8000454:	2108      	movs	r1, #8
 8000456:	4803      	ldr	r0, [pc, #12]	; (8000464 <flushTXFIFO+0x34>)
 8000458:	f000 fc60 	bl	8000d1c <HAL_GPIO_WritePin>

}
 800045c:	bf00      	nop
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	48000400 	.word	0x48000400
 8000468:	20000038 	.word	0x20000038

0800046c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b096      	sub	sp, #88	; 0x58
 8000470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000472:	f107 0314 	add.w	r3, r7, #20
 8000476:	2244      	movs	r2, #68	; 0x44
 8000478:	2100      	movs	r1, #0
 800047a:	4618      	mov	r0, r3
 800047c:	f002 f876 	bl	800256c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000480:	463b      	mov	r3, r7
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
 800048c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800048e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000492:	f000 fc69 	bl	8000d68 <HAL_PWREx_ControlVoltageScaling>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800049c:	f000 f8a8 	bl	80005f0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004a0:	2310      	movs	r3, #16
 80004a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004a4:	2301      	movs	r3, #1
 80004a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80004ac:	2360      	movs	r3, #96	; 0x60
 80004ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004b0:	2300      	movs	r3, #0
 80004b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b4:	f107 0314 	add.w	r3, r7, #20
 80004b8:	4618      	mov	r0, r3
 80004ba:	f000 fcab 	bl	8000e14 <HAL_RCC_OscConfig>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80004c4:	f000 f894 	bl	80005f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c8:	230f      	movs	r3, #15
 80004ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80004cc:	2300      	movs	r3, #0
 80004ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d0:	2300      	movs	r3, #0
 80004d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004d4:	2300      	movs	r3, #0
 80004d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004d8:	2300      	movs	r3, #0
 80004da:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004dc:	463b      	mov	r3, r7
 80004de:	2100      	movs	r1, #0
 80004e0:	4618      	mov	r0, r3
 80004e2:	f001 f8ab 	bl	800163c <HAL_RCC_ClockConfig>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80004ec:	f000 f880 	bl	80005f0 <Error_Handler>
  }
}
 80004f0:	bf00      	nop
 80004f2:	3758      	adds	r7, #88	; 0x58
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004fc:	4b1b      	ldr	r3, [pc, #108]	; (800056c <MX_SPI1_Init+0x74>)
 80004fe:	4a1c      	ldr	r2, [pc, #112]	; (8000570 <MX_SPI1_Init+0x78>)
 8000500:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000502:	4b1a      	ldr	r3, [pc, #104]	; (800056c <MX_SPI1_Init+0x74>)
 8000504:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000508:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800050a:	4b18      	ldr	r3, [pc, #96]	; (800056c <MX_SPI1_Init+0x74>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000510:	4b16      	ldr	r3, [pc, #88]	; (800056c <MX_SPI1_Init+0x74>)
 8000512:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000516:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000518:	4b14      	ldr	r3, [pc, #80]	; (800056c <MX_SPI1_Init+0x74>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800051e:	4b13      	ldr	r3, [pc, #76]	; (800056c <MX_SPI1_Init+0x74>)
 8000520:	2200      	movs	r2, #0
 8000522:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000524:	4b11      	ldr	r3, [pc, #68]	; (800056c <MX_SPI1_Init+0x74>)
 8000526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800052a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <MX_SPI1_Init+0x74>)
 800052e:	2220      	movs	r2, #32
 8000530:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000532:	4b0e      	ldr	r3, [pc, #56]	; (800056c <MX_SPI1_Init+0x74>)
 8000534:	2200      	movs	r2, #0
 8000536:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000538:	4b0c      	ldr	r3, [pc, #48]	; (800056c <MX_SPI1_Init+0x74>)
 800053a:	2200      	movs	r2, #0
 800053c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800053e:	4b0b      	ldr	r3, [pc, #44]	; (800056c <MX_SPI1_Init+0x74>)
 8000540:	2200      	movs	r2, #0
 8000542:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000544:	4b09      	ldr	r3, [pc, #36]	; (800056c <MX_SPI1_Init+0x74>)
 8000546:	2207      	movs	r2, #7
 8000548:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <MX_SPI1_Init+0x74>)
 800054c:	2200      	movs	r2, #0
 800054e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <MX_SPI1_Init+0x74>)
 8000552:	2208      	movs	r2, #8
 8000554:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000556:	4805      	ldr	r0, [pc, #20]	; (800056c <MX_SPI1_Init+0x74>)
 8000558:	f001 fa5c 	bl	8001a14 <HAL_SPI_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000562:	f000 f845 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000038 	.word	0x20000038
 8000570:	40013000 	.word	0x40013000

08000574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058a:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <MX_GPIO_Init+0x74>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	4a16      	ldr	r2, [pc, #88]	; (80005e8 <MX_GPIO_Init+0x74>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000596:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <MX_GPIO_Init+0x74>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <MX_GPIO_Init+0x74>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	4a10      	ldr	r2, [pc, #64]	; (80005e8 <MX_GPIO_Init+0x74>)
 80005a8:	f043 0302 	orr.w	r3, r3, #2
 80005ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <MX_GPIO_Init+0x74>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	f003 0302 	and.w	r3, r3, #2
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSNpin_Pin|CEpin_Pin, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2118      	movs	r1, #24
 80005be:	480b      	ldr	r0, [pc, #44]	; (80005ec <MX_GPIO_Init+0x78>)
 80005c0:	f000 fbac 	bl	8000d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CSNpin_Pin CEpin_Pin */
  GPIO_InitStruct.Pin = CSNpin_Pin|CEpin_Pin;
 80005c4:	2318      	movs	r3, #24
 80005c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c8:	2301      	movs	r3, #1
 80005ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	4619      	mov	r1, r3
 80005da:	4804      	ldr	r0, [pc, #16]	; (80005ec <MX_GPIO_Init+0x78>)
 80005dc:	f000 fa34 	bl	8000a48 <HAL_GPIO_Init>

}
 80005e0:	bf00      	nop
 80005e2:	3720      	adds	r7, #32
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40021000 	.word	0x40021000
 80005ec:	48000400 	.word	0x48000400

080005f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f4:	b672      	cpsid	i
}
 80005f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <Error_Handler+0x8>
	...

080005fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_MspInit+0x44>)
 8000604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000606:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <HAL_MspInit+0x44>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6613      	str	r3, [r2, #96]	; 0x60
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <HAL_MspInit+0x44>)
 8000610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <HAL_MspInit+0x44>)
 800061c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800061e:	4a08      	ldr	r2, [pc, #32]	; (8000640 <HAL_MspInit+0x44>)
 8000620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000624:	6593      	str	r3, [r2, #88]	; 0x58
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_MspInit+0x44>)
 8000628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800062a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	40021000 	.word	0x40021000

08000644 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	; 0x28
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a17      	ldr	r2, [pc, #92]	; (80006c0 <HAL_SPI_MspInit+0x7c>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d128      	bne.n	80006b8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000666:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <HAL_SPI_MspInit+0x80>)
 8000668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800066a:	4a16      	ldr	r2, [pc, #88]	; (80006c4 <HAL_SPI_MspInit+0x80>)
 800066c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000670:	6613      	str	r3, [r2, #96]	; 0x60
 8000672:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <HAL_SPI_MspInit+0x80>)
 8000674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000676:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <HAL_SPI_MspInit+0x80>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	4a10      	ldr	r2, [pc, #64]	; (80006c4 <HAL_SPI_MspInit+0x80>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <HAL_SPI_MspInit+0x80>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000696:	23c2      	movs	r3, #194	; 0xc2
 8000698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069a:	2302      	movs	r3, #2
 800069c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a2:	2303      	movs	r3, #3
 80006a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006a6:	2305      	movs	r3, #5
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4619      	mov	r1, r3
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b4:	f000 f9c8 	bl	8000a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006b8:	bf00      	nop
 80006ba:	3728      	adds	r7, #40	; 0x28
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40013000 	.word	0x40013000
 80006c4:	40021000 	.word	0x40021000

080006c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006cc:	e7fe      	b.n	80006cc <NMI_Handler+0x4>

080006ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <HardFault_Handler+0x4>

080006d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <MemManage_Handler+0x4>

080006da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006de:	e7fe      	b.n	80006de <BusFault_Handler+0x4>

080006e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <UsageFault_Handler+0x4>

080006e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr

08000702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000714:	f000 f892 	bl	800083c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}

0800071c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <SystemInit+0x20>)
 8000722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000726:	4a05      	ldr	r2, [pc, #20]	; (800073c <SystemInit+0x20>)
 8000728:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800072c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000740:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000778 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000744:	f7ff ffea 	bl	800071c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000748:	480c      	ldr	r0, [pc, #48]	; (800077c <LoopForever+0x6>)
  ldr r1, =_edata
 800074a:	490d      	ldr	r1, [pc, #52]	; (8000780 <LoopForever+0xa>)
  ldr r2, =_sidata
 800074c:	4a0d      	ldr	r2, [pc, #52]	; (8000784 <LoopForever+0xe>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000750:	e002      	b.n	8000758 <LoopCopyDataInit>

08000752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000756:	3304      	adds	r3, #4

08000758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800075c:	d3f9      	bcc.n	8000752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000760:	4c0a      	ldr	r4, [pc, #40]	; (800078c <LoopForever+0x16>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000764:	e001      	b.n	800076a <LoopFillZerobss>

08000766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000768:	3204      	adds	r2, #4

0800076a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800076c:	d3fb      	bcc.n	8000766 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800076e:	f001 fed9 	bl	8002524 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000772:	f7ff fd2b 	bl	80001cc <main>

08000776 <LoopForever>:

LoopForever:
    b LoopForever
 8000776:	e7fe      	b.n	8000776 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000778:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800077c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000780:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000784:	080025dc 	.word	0x080025dc
  ldr r2, =_sbss
 8000788:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800078c:	200000a0 	.word	0x200000a0

08000790 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000790:	e7fe      	b.n	8000790 <ADC1_IRQHandler>

08000792 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000798:	2300      	movs	r3, #0
 800079a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800079c:	2003      	movs	r0, #3
 800079e:	f000 f91f 	bl	80009e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007a2:	200f      	movs	r0, #15
 80007a4:	f000 f80e 	bl	80007c4 <HAL_InitTick>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d002      	beq.n	80007b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
 80007b0:	71fb      	strb	r3, [r7, #7]
 80007b2:	e001      	b.n	80007b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007b4:	f7ff ff22 	bl	80005fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007b8:	79fb      	ldrb	r3, [r7, #7]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007cc:	2300      	movs	r3, #0
 80007ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <HAL_InitTick+0x6c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d023      	beq.n	8000820 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007d8:	4b16      	ldr	r3, [pc, #88]	; (8000834 <HAL_InitTick+0x70>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <HAL_InitTick+0x6c>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4619      	mov	r1, r3
 80007e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 f91d 	bl	8000a2e <HAL_SYSTICK_Config>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d10f      	bne.n	800081a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b0f      	cmp	r3, #15
 80007fe:	d809      	bhi.n	8000814 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000800:	2200      	movs	r2, #0
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000808:	f000 f8f5 	bl	80009f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800080c:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <HAL_InitTick+0x74>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6013      	str	r3, [r2, #0]
 8000812:	e007      	b.n	8000824 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000814:	2301      	movs	r3, #1
 8000816:	73fb      	strb	r3, [r7, #15]
 8000818:	e004      	b.n	8000824 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800081a:	2301      	movs	r3, #1
 800081c:	73fb      	strb	r3, [r7, #15]
 800081e:	e001      	b.n	8000824 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000820:	2301      	movs	r3, #1
 8000822:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000824:	7bfb      	ldrb	r3, [r7, #15]
}
 8000826:	4618      	mov	r0, r3
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000008 	.word	0x20000008
 8000834:	20000000 	.word	0x20000000
 8000838:	20000004 	.word	0x20000004

0800083c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <HAL_IncTick+0x20>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_IncTick+0x24>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4413      	add	r3, r2
 800084c:	4a04      	ldr	r2, [pc, #16]	; (8000860 <HAL_IncTick+0x24>)
 800084e:	6013      	str	r3, [r2, #0]
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	20000008 	.word	0x20000008
 8000860:	2000009c 	.word	0x2000009c

08000864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  return uwTick;
 8000868:	4b03      	ldr	r3, [pc, #12]	; (8000878 <HAL_GetTick+0x14>)
 800086a:	681b      	ldr	r3, [r3, #0]
}
 800086c:	4618      	mov	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	2000009c 	.word	0x2000009c

0800087c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f003 0307 	and.w	r3, r3, #7
 800088a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <__NVIC_SetPriorityGrouping+0x44>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000892:	68ba      	ldr	r2, [r7, #8]
 8000894:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000898:	4013      	ands	r3, r2
 800089a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ae:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <__NVIC_SetPriorityGrouping+0x44>)
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	60d3      	str	r3, [r2, #12]
}
 80008b4:	bf00      	nop
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c8:	4b04      	ldr	r3, [pc, #16]	; (80008dc <__NVIC_GetPriorityGrouping+0x18>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	0a1b      	lsrs	r3, r3, #8
 80008ce:	f003 0307 	and.w	r3, r3, #7
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	6039      	str	r1, [r7, #0]
 80008ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	db0a      	blt.n	800090a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	490c      	ldr	r1, [pc, #48]	; (800092c <__NVIC_SetPriority+0x4c>)
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	0112      	lsls	r2, r2, #4
 8000900:	b2d2      	uxtb	r2, r2
 8000902:	440b      	add	r3, r1
 8000904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000908:	e00a      	b.n	8000920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4908      	ldr	r1, [pc, #32]	; (8000930 <__NVIC_SetPriority+0x50>)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	f003 030f 	and.w	r3, r3, #15
 8000916:	3b04      	subs	r3, #4
 8000918:	0112      	lsls	r2, r2, #4
 800091a:	b2d2      	uxtb	r2, r2
 800091c:	440b      	add	r3, r1
 800091e:	761a      	strb	r2, [r3, #24]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	e000e100 	.word	0xe000e100
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000934:	b480      	push	{r7}
 8000936:	b089      	sub	sp, #36	; 0x24
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	f1c3 0307 	rsb	r3, r3, #7
 800094e:	2b04      	cmp	r3, #4
 8000950:	bf28      	it	cs
 8000952:	2304      	movcs	r3, #4
 8000954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	3304      	adds	r3, #4
 800095a:	2b06      	cmp	r3, #6
 800095c:	d902      	bls.n	8000964 <NVIC_EncodePriority+0x30>
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	3b03      	subs	r3, #3
 8000962:	e000      	b.n	8000966 <NVIC_EncodePriority+0x32>
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000968:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	43da      	mvns	r2, r3
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	401a      	ands	r2, r3
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800097c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	fa01 f303 	lsl.w	r3, r1, r3
 8000986:	43d9      	mvns	r1, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800098c:	4313      	orrs	r3, r2
         );
}
 800098e:	4618      	mov	r0, r3
 8000990:	3724      	adds	r7, #36	; 0x24
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009ac:	d301      	bcc.n	80009b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ae:	2301      	movs	r3, #1
 80009b0:	e00f      	b.n	80009d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b2:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <SysTick_Config+0x40>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ba:	210f      	movs	r1, #15
 80009bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009c0:	f7ff ff8e 	bl	80008e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <SysTick_Config+0x40>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ca:	4b04      	ldr	r3, [pc, #16]	; (80009dc <SysTick_Config+0x40>)
 80009cc:	2207      	movs	r2, #7
 80009ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	e000e010 	.word	0xe000e010

080009e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f7ff ff47 	bl	800087c <__NVIC_SetPriorityGrouping>
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b086      	sub	sp, #24
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	4603      	mov	r3, r0
 80009fe:	60b9      	str	r1, [r7, #8]
 8000a00:	607a      	str	r2, [r7, #4]
 8000a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a08:	f7ff ff5c 	bl	80008c4 <__NVIC_GetPriorityGrouping>
 8000a0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	68b9      	ldr	r1, [r7, #8]
 8000a12:	6978      	ldr	r0, [r7, #20]
 8000a14:	f7ff ff8e 	bl	8000934 <NVIC_EncodePriority>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ff5d 	bl	80008e0 <__NVIC_SetPriority>
}
 8000a26:	bf00      	nop
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f7ff ffb0 	bl	800099c <SysTick_Config>
 8000a3c:	4603      	mov	r3, r0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b087      	sub	sp, #28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a56:	e148      	b.n	8000cea <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	fa01 f303 	lsl.w	r3, r1, r3
 8000a64:	4013      	ands	r3, r2
 8000a66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f000 813a 	beq.w	8000ce4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	f003 0303 	and.w	r3, r3, #3
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d005      	beq.n	8000a88 <HAL_GPIO_Init+0x40>
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f003 0303 	and.w	r3, r3, #3
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d130      	bne.n	8000aea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	2203      	movs	r2, #3
 8000a94:	fa02 f303 	lsl.w	r3, r2, r3
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	68da      	ldr	r2, [r3, #12]
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000abe:	2201      	movs	r2, #1
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	4013      	ands	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	091b      	lsrs	r3, r3, #4
 8000ad4:	f003 0201 	and.w	r2, r3, #1
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f003 0303 	and.w	r3, r3, #3
 8000af2:	2b03      	cmp	r3, #3
 8000af4:	d017      	beq.n	8000b26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	2203      	movs	r2, #3
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43db      	mvns	r3, r3
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	689a      	ldr	r2, [r3, #8]
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f003 0303 	and.w	r3, r3, #3
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d123      	bne.n	8000b7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	08da      	lsrs	r2, r3, #3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	3208      	adds	r2, #8
 8000b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	220f      	movs	r2, #15
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	4013      	ands	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	691a      	ldr	r2, [r3, #16]
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	f003 0307 	and.w	r3, r3, #7
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	08da      	lsrs	r2, r3, #3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3208      	adds	r2, #8
 8000b74:	6939      	ldr	r1, [r7, #16]
 8000b76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	2203      	movs	r2, #3
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f003 0203 	and.w	r2, r3, #3
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f000 8094 	beq.w	8000ce4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbc:	4b52      	ldr	r3, [pc, #328]	; (8000d08 <HAL_GPIO_Init+0x2c0>)
 8000bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc0:	4a51      	ldr	r2, [pc, #324]	; (8000d08 <HAL_GPIO_Init+0x2c0>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	6613      	str	r3, [r2, #96]	; 0x60
 8000bc8:	4b4f      	ldr	r3, [pc, #316]	; (8000d08 <HAL_GPIO_Init+0x2c0>)
 8000bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bd4:	4a4d      	ldr	r2, [pc, #308]	; (8000d0c <HAL_GPIO_Init+0x2c4>)
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	089b      	lsrs	r3, r3, #2
 8000bda:	3302      	adds	r3, #2
 8000bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	f003 0303 	and.w	r3, r3, #3
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	220f      	movs	r2, #15
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bfe:	d00d      	beq.n	8000c1c <HAL_GPIO_Init+0x1d4>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a43      	ldr	r2, [pc, #268]	; (8000d10 <HAL_GPIO_Init+0x2c8>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d007      	beq.n	8000c18 <HAL_GPIO_Init+0x1d0>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a42      	ldr	r2, [pc, #264]	; (8000d14 <HAL_GPIO_Init+0x2cc>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d101      	bne.n	8000c14 <HAL_GPIO_Init+0x1cc>
 8000c10:	2302      	movs	r3, #2
 8000c12:	e004      	b.n	8000c1e <HAL_GPIO_Init+0x1d6>
 8000c14:	2307      	movs	r3, #7
 8000c16:	e002      	b.n	8000c1e <HAL_GPIO_Init+0x1d6>
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e000      	b.n	8000c1e <HAL_GPIO_Init+0x1d6>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	697a      	ldr	r2, [r7, #20]
 8000c20:	f002 0203 	and.w	r2, r2, #3
 8000c24:	0092      	lsls	r2, r2, #2
 8000c26:	4093      	lsls	r3, r2
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c2e:	4937      	ldr	r1, [pc, #220]	; (8000d0c <HAL_GPIO_Init+0x2c4>)
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	089b      	lsrs	r3, r3, #2
 8000c34:	3302      	adds	r3, #2
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c3c:	4b36      	ldr	r3, [pc, #216]	; (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	43db      	mvns	r3, r3
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d003      	beq.n	8000c60 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c60:	4a2d      	ldr	r2, [pc, #180]	; (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c66:	4b2c      	ldr	r3, [pc, #176]	; (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d003      	beq.n	8000c8a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c8a:	4a23      	ldr	r2, [pc, #140]	; (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c90:	4b21      	ldr	r3, [pc, #132]	; (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d003      	beq.n	8000cb4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cb4:	4a18      	ldr	r2, [pc, #96]	; (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000cba:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d003      	beq.n	8000cde <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cde:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	f47f aeaf 	bne.w	8000a58 <HAL_GPIO_Init+0x10>
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	bf00      	nop
 8000cfe:	371c      	adds	r7, #28
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010000 	.word	0x40010000
 8000d10:	48000400 	.word	0x48000400
 8000d14:	48000800 	.word	0x48000800
 8000d18:	40010400 	.word	0x40010400

08000d1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	807b      	strh	r3, [r7, #2]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d2c:	787b      	ldrb	r3, [r7, #1]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d003      	beq.n	8000d3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d32:	887a      	ldrh	r2, [r7, #2]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d38:	e002      	b.n	8000d40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d3a:	887a      	ldrh	r2, [r7, #2]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40007000 	.word	0x40007000

08000d68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d76:	d130      	bne.n	8000dda <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d78:	4b23      	ldr	r3, [pc, #140]	; (8000e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d84:	d038      	beq.n	8000df8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d86:	4b20      	ldr	r3, [pc, #128]	; (8000e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d8e:	4a1e      	ldr	r2, [pc, #120]	; (8000e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d94:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d96:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2232      	movs	r2, #50	; 0x32
 8000d9c:	fb02 f303 	mul.w	r3, r2, r3
 8000da0:	4a1b      	ldr	r2, [pc, #108]	; (8000e10 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000da2:	fba2 2303 	umull	r2, r3, r2, r3
 8000da6:	0c9b      	lsrs	r3, r3, #18
 8000da8:	3301      	adds	r3, #1
 8000daa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dac:	e002      	b.n	8000db4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	3b01      	subs	r3, #1
 8000db2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000db6:	695b      	ldr	r3, [r3, #20]
 8000db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dc0:	d102      	bne.n	8000dc8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d1f2      	bne.n	8000dae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dca:	695b      	ldr	r3, [r3, #20]
 8000dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dd4:	d110      	bne.n	8000df8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e00f      	b.n	8000dfa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000de6:	d007      	beq.n	8000df8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000df0:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000df6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40007000 	.word	0x40007000
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	431bde83 	.word	0x431bde83

08000e14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d102      	bne.n	8000e28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	f000 bc02 	b.w	800162c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e28:	4b96      	ldr	r3, [pc, #600]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	f003 030c 	and.w	r3, r3, #12
 8000e30:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e32:	4b94      	ldr	r3, [pc, #592]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	f003 0303 	and.w	r3, r3, #3
 8000e3a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 0310 	and.w	r3, r3, #16
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	f000 80e4 	beq.w	8001012 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d007      	beq.n	8000e60 <HAL_RCC_OscConfig+0x4c>
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	2b0c      	cmp	r3, #12
 8000e54:	f040 808b 	bne.w	8000f6e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	f040 8087 	bne.w	8000f6e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e60:	4b88      	ldr	r3, [pc, #544]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d005      	beq.n	8000e78 <HAL_RCC_OscConfig+0x64>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d101      	bne.n	8000e78 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e3d9      	b.n	800162c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6a1a      	ldr	r2, [r3, #32]
 8000e7c:	4b81      	ldr	r3, [pc, #516]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0308 	and.w	r3, r3, #8
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d004      	beq.n	8000e92 <HAL_RCC_OscConfig+0x7e>
 8000e88:	4b7e      	ldr	r3, [pc, #504]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e90:	e005      	b.n	8000e9e <HAL_RCC_OscConfig+0x8a>
 8000e92:	4b7c      	ldr	r3, [pc, #496]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e98:	091b      	lsrs	r3, r3, #4
 8000e9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d223      	bcs.n	8000eea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a1b      	ldr	r3, [r3, #32]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 fd54 	bl	8001954 <RCC_SetFlashLatencyFromMSIRange>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e3ba      	b.n	800162c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000eb6:	4b73      	ldr	r3, [pc, #460]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a72      	ldr	r2, [pc, #456]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000ebc:	f043 0308 	orr.w	r3, r3, #8
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	4b70      	ldr	r3, [pc, #448]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a1b      	ldr	r3, [r3, #32]
 8000ece:	496d      	ldr	r1, [pc, #436]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ed4:	4b6b      	ldr	r3, [pc, #428]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	69db      	ldr	r3, [r3, #28]
 8000ee0:	021b      	lsls	r3, r3, #8
 8000ee2:	4968      	ldr	r1, [pc, #416]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	604b      	str	r3, [r1, #4]
 8000ee8:	e025      	b.n	8000f36 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000eea:	4b66      	ldr	r3, [pc, #408]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a65      	ldr	r2, [pc, #404]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000ef0:	f043 0308 	orr.w	r3, r3, #8
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	4b63      	ldr	r3, [pc, #396]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a1b      	ldr	r3, [r3, #32]
 8000f02:	4960      	ldr	r1, [pc, #384]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000f04:	4313      	orrs	r3, r2
 8000f06:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f08:	4b5e      	ldr	r3, [pc, #376]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	69db      	ldr	r3, [r3, #28]
 8000f14:	021b      	lsls	r3, r3, #8
 8000f16:	495b      	ldr	r1, [pc, #364]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d109      	bne.n	8000f36 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6a1b      	ldr	r3, [r3, #32]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fd14 	bl	8001954 <RCC_SetFlashLatencyFromMSIRange>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e37a      	b.n	800162c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f36:	f000 fc81 	bl	800183c <HAL_RCC_GetSysClockFreq>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	4b51      	ldr	r3, [pc, #324]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	091b      	lsrs	r3, r3, #4
 8000f42:	f003 030f 	and.w	r3, r3, #15
 8000f46:	4950      	ldr	r1, [pc, #320]	; (8001088 <HAL_RCC_OscConfig+0x274>)
 8000f48:	5ccb      	ldrb	r3, [r1, r3]
 8000f4a:	f003 031f 	and.w	r3, r3, #31
 8000f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f52:	4a4e      	ldr	r2, [pc, #312]	; (800108c <HAL_RCC_OscConfig+0x278>)
 8000f54:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f56:	4b4e      	ldr	r3, [pc, #312]	; (8001090 <HAL_RCC_OscConfig+0x27c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fc32 	bl	80007c4 <HAL_InitTick>
 8000f60:	4603      	mov	r3, r0
 8000f62:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d052      	beq.n	8001010 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	e35e      	b.n	800162c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d032      	beq.n	8000fdc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f76:	4b43      	ldr	r3, [pc, #268]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a42      	ldr	r2, [pc, #264]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f82:	f7ff fc6f 	bl	8000864 <HAL_GetTick>
 8000f86:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f88:	e008      	b.n	8000f9c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f8a:	f7ff fc6b 	bl	8000864 <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d901      	bls.n	8000f9c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e347      	b.n	800162c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f9c:	4b39      	ldr	r3, [pc, #228]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d0f0      	beq.n	8000f8a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fa8:	4b36      	ldr	r3, [pc, #216]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a35      	ldr	r2, [pc, #212]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000fae:	f043 0308 	orr.w	r3, r3, #8
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	4b33      	ldr	r3, [pc, #204]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	4930      	ldr	r1, [pc, #192]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fc6:	4b2f      	ldr	r3, [pc, #188]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	492b      	ldr	r1, [pc, #172]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	604b      	str	r3, [r1, #4]
 8000fda:	e01a      	b.n	8001012 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000fdc:	4b29      	ldr	r3, [pc, #164]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a28      	ldr	r2, [pc, #160]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8000fe2:	f023 0301 	bic.w	r3, r3, #1
 8000fe6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fe8:	f7ff fc3c 	bl	8000864 <HAL_GetTick>
 8000fec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fee:	e008      	b.n	8001002 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ff0:	f7ff fc38 	bl	8000864 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d901      	bls.n	8001002 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e314      	b.n	800162c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001002:	4b20      	ldr	r3, [pc, #128]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f0      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x1dc>
 800100e:	e000      	b.n	8001012 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001010:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	2b00      	cmp	r3, #0
 800101c:	d073      	beq.n	8001106 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	2b08      	cmp	r3, #8
 8001022:	d005      	beq.n	8001030 <HAL_RCC_OscConfig+0x21c>
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	2b0c      	cmp	r3, #12
 8001028:	d10e      	bne.n	8001048 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	2b03      	cmp	r3, #3
 800102e:	d10b      	bne.n	8001048 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d063      	beq.n	8001104 <HAL_RCC_OscConfig+0x2f0>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d15f      	bne.n	8001104 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e2f1      	b.n	800162c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001050:	d106      	bne.n	8001060 <HAL_RCC_OscConfig+0x24c>
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8001058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	e025      	b.n	80010ac <HAL_RCC_OscConfig+0x298>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001068:	d114      	bne.n	8001094 <HAL_RCC_OscConfig+0x280>
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a05      	ldr	r2, [pc, #20]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8001070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	4b03      	ldr	r3, [pc, #12]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a02      	ldr	r2, [pc, #8]	; (8001084 <HAL_RCC_OscConfig+0x270>)
 800107c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	e013      	b.n	80010ac <HAL_RCC_OscConfig+0x298>
 8001084:	40021000 	.word	0x40021000
 8001088:	08002594 	.word	0x08002594
 800108c:	20000000 	.word	0x20000000
 8001090:	20000004 	.word	0x20000004
 8001094:	4ba0      	ldr	r3, [pc, #640]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a9f      	ldr	r2, [pc, #636]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 800109a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	4b9d      	ldr	r3, [pc, #628]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a9c      	ldr	r2, [pc, #624]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 80010a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d013      	beq.n	80010dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b4:	f7ff fbd6 	bl	8000864 <HAL_GetTick>
 80010b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010ba:	e008      	b.n	80010ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010bc:	f7ff fbd2 	bl	8000864 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b64      	cmp	r3, #100	; 0x64
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e2ae      	b.n	800162c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010ce:	4b92      	ldr	r3, [pc, #584]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0f0      	beq.n	80010bc <HAL_RCC_OscConfig+0x2a8>
 80010da:	e014      	b.n	8001106 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010dc:	f7ff fbc2 	bl	8000864 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010e4:	f7ff fbbe 	bl	8000864 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b64      	cmp	r3, #100	; 0x64
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e29a      	b.n	800162c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010f6:	4b88      	ldr	r3, [pc, #544]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1f0      	bne.n	80010e4 <HAL_RCC_OscConfig+0x2d0>
 8001102:	e000      	b.n	8001106 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d060      	beq.n	80011d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	2b04      	cmp	r3, #4
 8001116:	d005      	beq.n	8001124 <HAL_RCC_OscConfig+0x310>
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	2b0c      	cmp	r3, #12
 800111c:	d119      	bne.n	8001152 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	2b02      	cmp	r3, #2
 8001122:	d116      	bne.n	8001152 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001124:	4b7c      	ldr	r3, [pc, #496]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800112c:	2b00      	cmp	r3, #0
 800112e:	d005      	beq.n	800113c <HAL_RCC_OscConfig+0x328>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d101      	bne.n	800113c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e277      	b.n	800162c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113c:	4b76      	ldr	r3, [pc, #472]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	691b      	ldr	r3, [r3, #16]
 8001148:	061b      	lsls	r3, r3, #24
 800114a:	4973      	ldr	r1, [pc, #460]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 800114c:	4313      	orrs	r3, r2
 800114e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001150:	e040      	b.n	80011d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d023      	beq.n	80011a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800115a:	4b6f      	ldr	r3, [pc, #444]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a6e      	ldr	r2, [pc, #440]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 8001160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001166:	f7ff fb7d 	bl	8000864 <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800116e:	f7ff fb79 	bl	8000864 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e255      	b.n	800162c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001180:	4b65      	ldr	r3, [pc, #404]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0f0      	beq.n	800116e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118c:	4b62      	ldr	r3, [pc, #392]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	061b      	lsls	r3, r3, #24
 800119a:	495f      	ldr	r1, [pc, #380]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 800119c:	4313      	orrs	r3, r2
 800119e:	604b      	str	r3, [r1, #4]
 80011a0:	e018      	b.n	80011d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011a2:	4b5d      	ldr	r3, [pc, #372]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a5c      	ldr	r2, [pc, #368]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 80011a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ae:	f7ff fb59 	bl	8000864 <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011b6:	f7ff fb55 	bl	8000864 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e231      	b.n	800162c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011c8:	4b53      	ldr	r3, [pc, #332]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1f0      	bne.n	80011b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0308 	and.w	r3, r3, #8
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d03c      	beq.n	800125a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d01c      	beq.n	8001222 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011e8:	4b4b      	ldr	r3, [pc, #300]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 80011ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011ee:	4a4a      	ldr	r2, [pc, #296]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f8:	f7ff fb34 	bl	8000864 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001200:	f7ff fb30 	bl	8000864 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e20c      	b.n	800162c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001212:	4b41      	ldr	r3, [pc, #260]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 8001214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d0ef      	beq.n	8001200 <HAL_RCC_OscConfig+0x3ec>
 8001220:	e01b      	b.n	800125a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001222:	4b3d      	ldr	r3, [pc, #244]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 8001224:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001228:	4a3b      	ldr	r2, [pc, #236]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 800122a:	f023 0301 	bic.w	r3, r3, #1
 800122e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001232:	f7ff fb17 	bl	8000864 <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001238:	e008      	b.n	800124c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800123a:	f7ff fb13 	bl	8000864 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e1ef      	b.n	800162c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800124c:	4b32      	ldr	r3, [pc, #200]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 800124e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1ef      	bne.n	800123a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0304 	and.w	r3, r3, #4
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 80a6 	beq.w	80013b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001268:	2300      	movs	r3, #0
 800126a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800126c:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 800126e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d10d      	bne.n	8001294 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001278:	4b27      	ldr	r3, [pc, #156]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 800127a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127c:	4a26      	ldr	r2, [pc, #152]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 800127e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001282:	6593      	str	r3, [r2, #88]	; 0x58
 8001284:	4b24      	ldr	r3, [pc, #144]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 8001286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001290:	2301      	movs	r3, #1
 8001292:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001294:	4b21      	ldr	r3, [pc, #132]	; (800131c <HAL_RCC_OscConfig+0x508>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129c:	2b00      	cmp	r3, #0
 800129e:	d118      	bne.n	80012d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012a0:	4b1e      	ldr	r3, [pc, #120]	; (800131c <HAL_RCC_OscConfig+0x508>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a1d      	ldr	r2, [pc, #116]	; (800131c <HAL_RCC_OscConfig+0x508>)
 80012a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ac:	f7ff fada 	bl	8000864 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012b4:	f7ff fad6 	bl	8000864 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e1b2      	b.n	800162c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <HAL_RCC_OscConfig+0x508>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f0      	beq.n	80012b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d108      	bne.n	80012ec <HAL_RCC_OscConfig+0x4d8>
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 80012dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012e0:	4a0d      	ldr	r2, [pc, #52]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012ea:	e029      	b.n	8001340 <HAL_RCC_OscConfig+0x52c>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	2b05      	cmp	r3, #5
 80012f2:	d115      	bne.n	8001320 <HAL_RCC_OscConfig+0x50c>
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 80012f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012fa:	4a07      	ldr	r2, [pc, #28]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 8001306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800130a:	4a03      	ldr	r2, [pc, #12]	; (8001318 <HAL_RCC_OscConfig+0x504>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001314:	e014      	b.n	8001340 <HAL_RCC_OscConfig+0x52c>
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000
 800131c:	40007000 	.word	0x40007000
 8001320:	4b9a      	ldr	r3, [pc, #616]	; (800158c <HAL_RCC_OscConfig+0x778>)
 8001322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001326:	4a99      	ldr	r2, [pc, #612]	; (800158c <HAL_RCC_OscConfig+0x778>)
 8001328:	f023 0301 	bic.w	r3, r3, #1
 800132c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001330:	4b96      	ldr	r3, [pc, #600]	; (800158c <HAL_RCC_OscConfig+0x778>)
 8001332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001336:	4a95      	ldr	r2, [pc, #596]	; (800158c <HAL_RCC_OscConfig+0x778>)
 8001338:	f023 0304 	bic.w	r3, r3, #4
 800133c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d016      	beq.n	8001376 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001348:	f7ff fa8c 	bl	8000864 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800134e:	e00a      	b.n	8001366 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001350:	f7ff fa88 	bl	8000864 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	f241 3288 	movw	r2, #5000	; 0x1388
 800135e:	4293      	cmp	r3, r2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e162      	b.n	800162c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001366:	4b89      	ldr	r3, [pc, #548]	; (800158c <HAL_RCC_OscConfig+0x778>)
 8001368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0ed      	beq.n	8001350 <HAL_RCC_OscConfig+0x53c>
 8001374:	e015      	b.n	80013a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001376:	f7ff fa75 	bl	8000864 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800137c:	e00a      	b.n	8001394 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800137e:	f7ff fa71 	bl	8000864 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	f241 3288 	movw	r2, #5000	; 0x1388
 800138c:	4293      	cmp	r3, r2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e14b      	b.n	800162c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001394:	4b7d      	ldr	r3, [pc, #500]	; (800158c <HAL_RCC_OscConfig+0x778>)
 8001396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1ed      	bne.n	800137e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013a2:	7ffb      	ldrb	r3, [r7, #31]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d105      	bne.n	80013b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013a8:	4b78      	ldr	r3, [pc, #480]	; (800158c <HAL_RCC_OscConfig+0x778>)
 80013aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ac:	4a77      	ldr	r2, [pc, #476]	; (800158c <HAL_RCC_OscConfig+0x778>)
 80013ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0320 	and.w	r3, r3, #32
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d03c      	beq.n	800143a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d01c      	beq.n	8001402 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80013c8:	4b70      	ldr	r3, [pc, #448]	; (800158c <HAL_RCC_OscConfig+0x778>)
 80013ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013ce:	4a6f      	ldr	r2, [pc, #444]	; (800158c <HAL_RCC_OscConfig+0x778>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d8:	f7ff fa44 	bl	8000864 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013e0:	f7ff fa40 	bl	8000864 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e11c      	b.n	800162c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013f2:	4b66      	ldr	r3, [pc, #408]	; (800158c <HAL_RCC_OscConfig+0x778>)
 80013f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0ef      	beq.n	80013e0 <HAL_RCC_OscConfig+0x5cc>
 8001400:	e01b      	b.n	800143a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001402:	4b62      	ldr	r3, [pc, #392]	; (800158c <HAL_RCC_OscConfig+0x778>)
 8001404:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001408:	4a60      	ldr	r2, [pc, #384]	; (800158c <HAL_RCC_OscConfig+0x778>)
 800140a:	f023 0301 	bic.w	r3, r3, #1
 800140e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001412:	f7ff fa27 	bl	8000864 <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800141a:	f7ff fa23 	bl	8000864 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e0ff      	b.n	800162c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800142c:	4b57      	ldr	r3, [pc, #348]	; (800158c <HAL_RCC_OscConfig+0x778>)
 800142e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1ef      	bne.n	800141a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 80f3 	beq.w	800162a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001448:	2b02      	cmp	r3, #2
 800144a:	f040 80c9 	bne.w	80015e0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800144e:	4b4f      	ldr	r3, [pc, #316]	; (800158c <HAL_RCC_OscConfig+0x778>)
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	f003 0203 	and.w	r2, r3, #3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145e:	429a      	cmp	r2, r3
 8001460:	d12c      	bne.n	80014bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146c:	3b01      	subs	r3, #1
 800146e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001470:	429a      	cmp	r2, r3
 8001472:	d123      	bne.n	80014bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800147e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001480:	429a      	cmp	r2, r3
 8001482:	d11b      	bne.n	80014bc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800148e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001490:	429a      	cmp	r2, r3
 8001492:	d113      	bne.n	80014bc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800149e:	085b      	lsrs	r3, r3, #1
 80014a0:	3b01      	subs	r3, #1
 80014a2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d109      	bne.n	80014bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	085b      	lsrs	r3, r3, #1
 80014b4:	3b01      	subs	r3, #1
 80014b6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d06b      	beq.n	8001594 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2b0c      	cmp	r3, #12
 80014c0:	d062      	beq.n	8001588 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80014c2:	4b32      	ldr	r3, [pc, #200]	; (800158c <HAL_RCC_OscConfig+0x778>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e0ac      	b.n	800162c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80014d2:	4b2e      	ldr	r3, [pc, #184]	; (800158c <HAL_RCC_OscConfig+0x778>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a2d      	ldr	r2, [pc, #180]	; (800158c <HAL_RCC_OscConfig+0x778>)
 80014d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014dc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014de:	f7ff f9c1 	bl	8000864 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e6:	f7ff f9bd 	bl	8000864 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e099      	b.n	800162c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014f8:	4b24      	ldr	r3, [pc, #144]	; (800158c <HAL_RCC_OscConfig+0x778>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1f0      	bne.n	80014e6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001504:	4b21      	ldr	r3, [pc, #132]	; (800158c <HAL_RCC_OscConfig+0x778>)
 8001506:	68da      	ldr	r2, [r3, #12]
 8001508:	4b21      	ldr	r3, [pc, #132]	; (8001590 <HAL_RCC_OscConfig+0x77c>)
 800150a:	4013      	ands	r3, r2
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001514:	3a01      	subs	r2, #1
 8001516:	0112      	lsls	r2, r2, #4
 8001518:	4311      	orrs	r1, r2
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800151e:	0212      	lsls	r2, r2, #8
 8001520:	4311      	orrs	r1, r2
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001526:	0852      	lsrs	r2, r2, #1
 8001528:	3a01      	subs	r2, #1
 800152a:	0552      	lsls	r2, r2, #21
 800152c:	4311      	orrs	r1, r2
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001532:	0852      	lsrs	r2, r2, #1
 8001534:	3a01      	subs	r2, #1
 8001536:	0652      	lsls	r2, r2, #25
 8001538:	4311      	orrs	r1, r2
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800153e:	06d2      	lsls	r2, r2, #27
 8001540:	430a      	orrs	r2, r1
 8001542:	4912      	ldr	r1, [pc, #72]	; (800158c <HAL_RCC_OscConfig+0x778>)
 8001544:	4313      	orrs	r3, r2
 8001546:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001548:	4b10      	ldr	r3, [pc, #64]	; (800158c <HAL_RCC_OscConfig+0x778>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0f      	ldr	r2, [pc, #60]	; (800158c <HAL_RCC_OscConfig+0x778>)
 800154e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001552:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001554:	4b0d      	ldr	r3, [pc, #52]	; (800158c <HAL_RCC_OscConfig+0x778>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	4a0c      	ldr	r2, [pc, #48]	; (800158c <HAL_RCC_OscConfig+0x778>)
 800155a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800155e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001560:	f7ff f980 	bl	8000864 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001568:	f7ff f97c 	bl	8000864 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e058      	b.n	800162c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800157a:	4b04      	ldr	r3, [pc, #16]	; (800158c <HAL_RCC_OscConfig+0x778>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f0      	beq.n	8001568 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001586:	e050      	b.n	800162a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e04f      	b.n	800162c <HAL_RCC_OscConfig+0x818>
 800158c:	40021000 	.word	0x40021000
 8001590:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001594:	4b27      	ldr	r3, [pc, #156]	; (8001634 <HAL_RCC_OscConfig+0x820>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d144      	bne.n	800162a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80015a0:	4b24      	ldr	r3, [pc, #144]	; (8001634 <HAL_RCC_OscConfig+0x820>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a23      	ldr	r2, [pc, #140]	; (8001634 <HAL_RCC_OscConfig+0x820>)
 80015a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015ac:	4b21      	ldr	r3, [pc, #132]	; (8001634 <HAL_RCC_OscConfig+0x820>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	4a20      	ldr	r2, [pc, #128]	; (8001634 <HAL_RCC_OscConfig+0x820>)
 80015b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80015b8:	f7ff f954 	bl	8000864 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c0:	f7ff f950 	bl	8000864 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e02c      	b.n	800162c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015d2:	4b18      	ldr	r3, [pc, #96]	; (8001634 <HAL_RCC_OscConfig+0x820>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0f0      	beq.n	80015c0 <HAL_RCC_OscConfig+0x7ac>
 80015de:	e024      	b.n	800162a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	2b0c      	cmp	r3, #12
 80015e4:	d01f      	beq.n	8001626 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e6:	4b13      	ldr	r3, [pc, #76]	; (8001634 <HAL_RCC_OscConfig+0x820>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a12      	ldr	r2, [pc, #72]	; (8001634 <HAL_RCC_OscConfig+0x820>)
 80015ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f2:	f7ff f937 	bl	8000864 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015fa:	f7ff f933 	bl	8000864 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e00f      	b.n	800162c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800160c:	4b09      	ldr	r3, [pc, #36]	; (8001634 <HAL_RCC_OscConfig+0x820>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1f0      	bne.n	80015fa <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_RCC_OscConfig+0x820>)
 800161a:	68da      	ldr	r2, [r3, #12]
 800161c:	4905      	ldr	r1, [pc, #20]	; (8001634 <HAL_RCC_OscConfig+0x820>)
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_RCC_OscConfig+0x824>)
 8001620:	4013      	ands	r3, r2
 8001622:	60cb      	str	r3, [r1, #12]
 8001624:	e001      	b.n	800162a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3720      	adds	r7, #32
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40021000 	.word	0x40021000
 8001638:	feeefffc 	.word	0xfeeefffc

0800163c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e0e7      	b.n	8001820 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001650:	4b75      	ldr	r3, [pc, #468]	; (8001828 <HAL_RCC_ClockConfig+0x1ec>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d910      	bls.n	8001680 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165e:	4b72      	ldr	r3, [pc, #456]	; (8001828 <HAL_RCC_ClockConfig+0x1ec>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f023 0207 	bic.w	r2, r3, #7
 8001666:	4970      	ldr	r1, [pc, #448]	; (8001828 <HAL_RCC_ClockConfig+0x1ec>)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	4313      	orrs	r3, r2
 800166c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800166e:	4b6e      	ldr	r3, [pc, #440]	; (8001828 <HAL_RCC_ClockConfig+0x1ec>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	429a      	cmp	r2, r3
 800167a:	d001      	beq.n	8001680 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e0cf      	b.n	8001820 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d010      	beq.n	80016ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	4b66      	ldr	r3, [pc, #408]	; (800182c <HAL_RCC_ClockConfig+0x1f0>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001698:	429a      	cmp	r2, r3
 800169a:	d908      	bls.n	80016ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800169c:	4b63      	ldr	r3, [pc, #396]	; (800182c <HAL_RCC_ClockConfig+0x1f0>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	4960      	ldr	r1, [pc, #384]	; (800182c <HAL_RCC_ClockConfig+0x1f0>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d04c      	beq.n	8001754 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d107      	bne.n	80016d2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016c2:	4b5a      	ldr	r3, [pc, #360]	; (800182c <HAL_RCC_ClockConfig+0x1f0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d121      	bne.n	8001712 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e0a6      	b.n	8001820 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d107      	bne.n	80016ea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016da:	4b54      	ldr	r3, [pc, #336]	; (800182c <HAL_RCC_ClockConfig+0x1f0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d115      	bne.n	8001712 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e09a      	b.n	8001820 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d107      	bne.n	8001702 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016f2:	4b4e      	ldr	r3, [pc, #312]	; (800182c <HAL_RCC_ClockConfig+0x1f0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d109      	bne.n	8001712 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e08e      	b.n	8001820 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001702:	4b4a      	ldr	r3, [pc, #296]	; (800182c <HAL_RCC_ClockConfig+0x1f0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e086      	b.n	8001820 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001712:	4b46      	ldr	r3, [pc, #280]	; (800182c <HAL_RCC_ClockConfig+0x1f0>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f023 0203 	bic.w	r2, r3, #3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	4943      	ldr	r1, [pc, #268]	; (800182c <HAL_RCC_ClockConfig+0x1f0>)
 8001720:	4313      	orrs	r3, r2
 8001722:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001724:	f7ff f89e 	bl	8000864 <HAL_GetTick>
 8001728:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172a:	e00a      	b.n	8001742 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800172c:	f7ff f89a 	bl	8000864 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	f241 3288 	movw	r2, #5000	; 0x1388
 800173a:	4293      	cmp	r3, r2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e06e      	b.n	8001820 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001742:	4b3a      	ldr	r3, [pc, #232]	; (800182c <HAL_RCC_ClockConfig+0x1f0>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 020c 	and.w	r2, r3, #12
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	429a      	cmp	r2, r3
 8001752:	d1eb      	bne.n	800172c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d010      	beq.n	8001782 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	4b31      	ldr	r3, [pc, #196]	; (800182c <HAL_RCC_ClockConfig+0x1f0>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800176c:	429a      	cmp	r2, r3
 800176e:	d208      	bcs.n	8001782 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001770:	4b2e      	ldr	r3, [pc, #184]	; (800182c <HAL_RCC_ClockConfig+0x1f0>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	492b      	ldr	r1, [pc, #172]	; (800182c <HAL_RCC_ClockConfig+0x1f0>)
 800177e:	4313      	orrs	r3, r2
 8001780:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001782:	4b29      	ldr	r3, [pc, #164]	; (8001828 <HAL_RCC_ClockConfig+0x1ec>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	d210      	bcs.n	80017b2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001790:	4b25      	ldr	r3, [pc, #148]	; (8001828 <HAL_RCC_ClockConfig+0x1ec>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f023 0207 	bic.w	r2, r3, #7
 8001798:	4923      	ldr	r1, [pc, #140]	; (8001828 <HAL_RCC_ClockConfig+0x1ec>)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	4313      	orrs	r3, r2
 800179e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a0:	4b21      	ldr	r3, [pc, #132]	; (8001828 <HAL_RCC_ClockConfig+0x1ec>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d001      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e036      	b.n	8001820 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d008      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017be:	4b1b      	ldr	r3, [pc, #108]	; (800182c <HAL_RCC_ClockConfig+0x1f0>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	4918      	ldr	r1, [pc, #96]	; (800182c <HAL_RCC_ClockConfig+0x1f0>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0308 	and.w	r3, r3, #8
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d009      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017dc:	4b13      	ldr	r3, [pc, #76]	; (800182c <HAL_RCC_ClockConfig+0x1f0>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4910      	ldr	r1, [pc, #64]	; (800182c <HAL_RCC_ClockConfig+0x1f0>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017f0:	f000 f824 	bl	800183c <HAL_RCC_GetSysClockFreq>
 80017f4:	4602      	mov	r2, r0
 80017f6:	4b0d      	ldr	r3, [pc, #52]	; (800182c <HAL_RCC_ClockConfig+0x1f0>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	091b      	lsrs	r3, r3, #4
 80017fc:	f003 030f 	and.w	r3, r3, #15
 8001800:	490b      	ldr	r1, [pc, #44]	; (8001830 <HAL_RCC_ClockConfig+0x1f4>)
 8001802:	5ccb      	ldrb	r3, [r1, r3]
 8001804:	f003 031f 	and.w	r3, r3, #31
 8001808:	fa22 f303 	lsr.w	r3, r2, r3
 800180c:	4a09      	ldr	r2, [pc, #36]	; (8001834 <HAL_RCC_ClockConfig+0x1f8>)
 800180e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001810:	4b09      	ldr	r3, [pc, #36]	; (8001838 <HAL_RCC_ClockConfig+0x1fc>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe ffd5 	bl	80007c4 <HAL_InitTick>
 800181a:	4603      	mov	r3, r0
 800181c:	72fb      	strb	r3, [r7, #11]

  return status;
 800181e:	7afb      	ldrb	r3, [r7, #11]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40022000 	.word	0x40022000
 800182c:	40021000 	.word	0x40021000
 8001830:	08002594 	.word	0x08002594
 8001834:	20000000 	.word	0x20000000
 8001838:	20000004 	.word	0x20000004

0800183c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800183c:	b480      	push	{r7}
 800183e:	b089      	sub	sp, #36	; 0x24
 8001840:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
 8001846:	2300      	movs	r3, #0
 8001848:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800184a:	4b3e      	ldr	r3, [pc, #248]	; (8001944 <HAL_RCC_GetSysClockFreq+0x108>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 030c 	and.w	r3, r3, #12
 8001852:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001854:	4b3b      	ldr	r3, [pc, #236]	; (8001944 <HAL_RCC_GetSysClockFreq+0x108>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d005      	beq.n	8001870 <HAL_RCC_GetSysClockFreq+0x34>
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	2b0c      	cmp	r3, #12
 8001868:	d121      	bne.n	80018ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d11e      	bne.n	80018ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001870:	4b34      	ldr	r3, [pc, #208]	; (8001944 <HAL_RCC_GetSysClockFreq+0x108>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	2b00      	cmp	r3, #0
 800187a:	d107      	bne.n	800188c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800187c:	4b31      	ldr	r3, [pc, #196]	; (8001944 <HAL_RCC_GetSysClockFreq+0x108>)
 800187e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001882:	0a1b      	lsrs	r3, r3, #8
 8001884:	f003 030f 	and.w	r3, r3, #15
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	e005      	b.n	8001898 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800188c:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <HAL_RCC_GetSysClockFreq+0x108>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	091b      	lsrs	r3, r3, #4
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001898:	4a2b      	ldr	r2, [pc, #172]	; (8001948 <HAL_RCC_GetSysClockFreq+0x10c>)
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d10d      	bne.n	80018c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018ac:	e00a      	b.n	80018c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d102      	bne.n	80018ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80018b4:	4b25      	ldr	r3, [pc, #148]	; (800194c <HAL_RCC_GetSysClockFreq+0x110>)
 80018b6:	61bb      	str	r3, [r7, #24]
 80018b8:	e004      	b.n	80018c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d101      	bne.n	80018c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018c0:	4b23      	ldr	r3, [pc, #140]	; (8001950 <HAL_RCC_GetSysClockFreq+0x114>)
 80018c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	2b0c      	cmp	r3, #12
 80018c8:	d134      	bne.n	8001934 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018ca:	4b1e      	ldr	r3, [pc, #120]	; (8001944 <HAL_RCC_GetSysClockFreq+0x108>)
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d003      	beq.n	80018e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d003      	beq.n	80018e8 <HAL_RCC_GetSysClockFreq+0xac>
 80018e0:	e005      	b.n	80018ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80018e2:	4b1a      	ldr	r3, [pc, #104]	; (800194c <HAL_RCC_GetSysClockFreq+0x110>)
 80018e4:	617b      	str	r3, [r7, #20]
      break;
 80018e6:	e005      	b.n	80018f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <HAL_RCC_GetSysClockFreq+0x114>)
 80018ea:	617b      	str	r3, [r7, #20]
      break;
 80018ec:	e002      	b.n	80018f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	617b      	str	r3, [r7, #20]
      break;
 80018f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <HAL_RCC_GetSysClockFreq+0x108>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	091b      	lsrs	r3, r3, #4
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	3301      	adds	r3, #1
 8001900:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <HAL_RCC_GetSysClockFreq+0x108>)
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	0a1b      	lsrs	r3, r3, #8
 8001908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	fb03 f202 	mul.w	r2, r3, r2
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	fbb2 f3f3 	udiv	r3, r2, r3
 8001918:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <HAL_RCC_GetSysClockFreq+0x108>)
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	0e5b      	lsrs	r3, r3, #25
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	3301      	adds	r3, #1
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001932:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001934:	69bb      	ldr	r3, [r7, #24]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3724      	adds	r7, #36	; 0x24
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40021000 	.word	0x40021000
 8001948:	080025a4 	.word	0x080025a4
 800194c:	00f42400 	.word	0x00f42400
 8001950:	007a1200 	.word	0x007a1200

08001954 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800195c:	2300      	movs	r3, #0
 800195e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001960:	4b2a      	ldr	r3, [pc, #168]	; (8001a0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800196c:	f7ff f9ee 	bl	8000d4c <HAL_PWREx_GetVoltageRange>
 8001970:	6178      	str	r0, [r7, #20]
 8001972:	e014      	b.n	800199e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001974:	4b25      	ldr	r3, [pc, #148]	; (8001a0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001978:	4a24      	ldr	r2, [pc, #144]	; (8001a0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800197a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197e:	6593      	str	r3, [r2, #88]	; 0x58
 8001980:	4b22      	ldr	r3, [pc, #136]	; (8001a0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800198c:	f7ff f9de 	bl	8000d4c <HAL_PWREx_GetVoltageRange>
 8001990:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001992:	4b1e      	ldr	r3, [pc, #120]	; (8001a0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001996:	4a1d      	ldr	r2, [pc, #116]	; (8001a0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800199c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019a4:	d10b      	bne.n	80019be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b80      	cmp	r3, #128	; 0x80
 80019aa:	d919      	bls.n	80019e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2ba0      	cmp	r3, #160	; 0xa0
 80019b0:	d902      	bls.n	80019b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019b2:	2302      	movs	r3, #2
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	e013      	b.n	80019e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019b8:	2301      	movs	r3, #1
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	e010      	b.n	80019e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b80      	cmp	r3, #128	; 0x80
 80019c2:	d902      	bls.n	80019ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80019c4:	2303      	movs	r3, #3
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	e00a      	b.n	80019e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b80      	cmp	r3, #128	; 0x80
 80019ce:	d102      	bne.n	80019d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019d0:	2302      	movs	r3, #2
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	e004      	b.n	80019e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b70      	cmp	r3, #112	; 0x70
 80019da:	d101      	bne.n	80019e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019dc:	2301      	movs	r3, #1
 80019de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80019e0:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f023 0207 	bic.w	r2, r3, #7
 80019e8:	4909      	ldr	r1, [pc, #36]	; (8001a10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80019f0:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d001      	beq.n	8001a02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40022000 	.word	0x40022000

08001a14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e095      	b.n	8001b52 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d108      	bne.n	8001a40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a36:	d009      	beq.n	8001a4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	61da      	str	r2, [r3, #28]
 8001a3e:	e005      	b.n	8001a4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d106      	bne.n	8001a6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7fe fdec 	bl	8000644 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2202      	movs	r2, #2
 8001a70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001a8c:	d902      	bls.n	8001a94 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	e002      	b.n	8001a9a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a98:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001aa2:	d007      	beq.n	8001ab4 <HAL_SPI_Init+0xa0>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001aac:	d002      	beq.n	8001ab4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001aec:	431a      	orrs	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af6:	ea42 0103 	orr.w	r1, r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	0c1b      	lsrs	r3, r3, #16
 8001b10:	f003 0204 	and.w	r2, r3, #4
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b18:	f003 0310 	and.w	r3, r3, #16
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001b30:	ea42 0103 	orr.w	r1, r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b088      	sub	sp, #32
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	60f8      	str	r0, [r7, #12]
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	603b      	str	r3, [r7, #0]
 8001b66:	4613      	mov	r3, r2
 8001b68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d101      	bne.n	8001b7c <HAL_SPI_Transmit+0x22>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e158      	b.n	8001e2e <HAL_SPI_Transmit+0x2d4>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b84:	f7fe fe6e 	bl	8000864 <HAL_GetTick>
 8001b88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d002      	beq.n	8001ba0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b9e:	e13d      	b.n	8001e1c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <HAL_SPI_Transmit+0x52>
 8001ba6:	88fb      	ldrh	r3, [r7, #6]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d102      	bne.n	8001bb2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001bb0:	e134      	b.n	8001e1c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	88fa      	ldrh	r2, [r7, #6]
 8001bca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	88fa      	ldrh	r2, [r7, #6]
 8001bd0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bfc:	d10f      	bne.n	8001c1e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c28:	2b40      	cmp	r3, #64	; 0x40
 8001c2a:	d007      	beq.n	8001c3c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001c44:	d94b      	bls.n	8001cde <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d002      	beq.n	8001c54 <HAL_SPI_Transmit+0xfa>
 8001c4e:	8afb      	ldrh	r3, [r7, #22]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d13e      	bne.n	8001cd2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c58:	881a      	ldrh	r2, [r3, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c64:	1c9a      	adds	r2, r3, #2
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	3b01      	subs	r3, #1
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c78:	e02b      	b.n	8001cd2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d112      	bne.n	8001cae <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8c:	881a      	ldrh	r2, [r3, #0]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c98:	1c9a      	adds	r2, r3, #2
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001cac:	e011      	b.n	8001cd2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cae:	f7fe fdd9 	bl	8000864 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d803      	bhi.n	8001cc6 <HAL_SPI_Transmit+0x16c>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cc4:	d102      	bne.n	8001ccc <HAL_SPI_Transmit+0x172>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d102      	bne.n	8001cd2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001cd0:	e0a4      	b.n	8001e1c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1ce      	bne.n	8001c7a <HAL_SPI_Transmit+0x120>
 8001cdc:	e07c      	b.n	8001dd8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d002      	beq.n	8001cec <HAL_SPI_Transmit+0x192>
 8001ce6:	8afb      	ldrh	r3, [r7, #22]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d170      	bne.n	8001dce <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d912      	bls.n	8001d1c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfa:	881a      	ldrh	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d06:	1c9a      	adds	r2, r3, #2
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3b02      	subs	r3, #2
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d1a:	e058      	b.n	8001dce <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	330c      	adds	r3, #12
 8001d26:	7812      	ldrb	r2, [r2, #0]
 8001d28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001d42:	e044      	b.n	8001dce <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d12b      	bne.n	8001daa <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d912      	bls.n	8001d82 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d60:	881a      	ldrh	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d6c:	1c9a      	adds	r2, r3, #2
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	3b02      	subs	r3, #2
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d80:	e025      	b.n	8001dce <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	330c      	adds	r3, #12
 8001d8c:	7812      	ldrb	r2, [r2, #0]
 8001d8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d94:	1c5a      	adds	r2, r3, #1
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	3b01      	subs	r3, #1
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001da8:	e011      	b.n	8001dce <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001daa:	f7fe fd5b 	bl	8000864 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d803      	bhi.n	8001dc2 <HAL_SPI_Transmit+0x268>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dc0:	d102      	bne.n	8001dc8 <HAL_SPI_Transmit+0x26e>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d102      	bne.n	8001dce <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001dcc:	e026      	b.n	8001e1c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1b5      	bne.n	8001d44 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	6839      	ldr	r1, [r7, #0]
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f000 fb5b 	bl	8002498 <SPI_EndRxTxTransaction>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2220      	movs	r2, #32
 8001dec:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10a      	bne.n	8001e0c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d002      	beq.n	8001e1a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	77fb      	strb	r3, [r7, #31]
 8001e18:	e000      	b.n	8001e1c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8001e1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001e2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3720      	adds	r7, #32
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b08a      	sub	sp, #40	; 0x28
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
 8001e42:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001e44:	2301      	movs	r3, #1
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_SPI_TransmitReceive+0x26>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e1fb      	b.n	8002254 <HAL_SPI_TransmitReceive+0x41e>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e64:	f7fe fcfe 	bl	8000864 <HAL_GetTick>
 8001e68:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001e70:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001e78:	887b      	ldrh	r3, [r7, #2]
 8001e7a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001e80:	7efb      	ldrb	r3, [r7, #27]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d00e      	beq.n	8001ea4 <HAL_SPI_TransmitReceive+0x6e>
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e8c:	d106      	bne.n	8001e9c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d102      	bne.n	8001e9c <HAL_SPI_TransmitReceive+0x66>
 8001e96:	7efb      	ldrb	r3, [r7, #27]
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d003      	beq.n	8001ea4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001ea2:	e1cd      	b.n	8002240 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d005      	beq.n	8001eb6 <HAL_SPI_TransmitReceive+0x80>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <HAL_SPI_TransmitReceive+0x80>
 8001eb0:	887b      	ldrh	r3, [r7, #2]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d103      	bne.n	8001ebe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001ebc:	e1c0      	b.n	8002240 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d003      	beq.n	8001ed2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2205      	movs	r2, #5
 8001ece:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	887a      	ldrh	r2, [r7, #2]
 8001ee2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	887a      	ldrh	r2, [r7, #2]
 8001eea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	68ba      	ldr	r2, [r7, #8]
 8001ef2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	887a      	ldrh	r2, [r7, #2]
 8001ef8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	887a      	ldrh	r2, [r7, #2]
 8001efe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f14:	d802      	bhi.n	8001f1c <HAL_SPI_TransmitReceive+0xe6>
 8001f16:	8a3b      	ldrh	r3, [r7, #16]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d908      	bls.n	8001f2e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f2a:	605a      	str	r2, [r3, #4]
 8001f2c:	e007      	b.n	8001f3e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f3c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f48:	2b40      	cmp	r3, #64	; 0x40
 8001f4a:	d007      	beq.n	8001f5c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f64:	d97c      	bls.n	8002060 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d002      	beq.n	8001f74 <HAL_SPI_TransmitReceive+0x13e>
 8001f6e:	8a7b      	ldrh	r3, [r7, #18]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d169      	bne.n	8002048 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f78:	881a      	ldrh	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f84:	1c9a      	adds	r2, r3, #2
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	3b01      	subs	r3, #1
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f98:	e056      	b.n	8002048 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d11b      	bne.n	8001fe0 <HAL_SPI_TransmitReceive+0x1aa>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d016      	beq.n	8001fe0 <HAL_SPI_TransmitReceive+0x1aa>
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d113      	bne.n	8001fe0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fbc:	881a      	ldrh	r2, [r3, #0]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc8:	1c9a      	adds	r2, r3, #2
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d11c      	bne.n	8002028 <HAL_SPI_TransmitReceive+0x1f2>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d016      	beq.n	8002028 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	b292      	uxth	r2, r2
 8002006:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	1c9a      	adds	r2, r3, #2
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002018:	b29b      	uxth	r3, r3
 800201a:	3b01      	subs	r3, #1
 800201c:	b29a      	uxth	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002024:	2301      	movs	r3, #1
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002028:	f7fe fc1c 	bl	8000864 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002034:	429a      	cmp	r2, r3
 8002036:	d807      	bhi.n	8002048 <HAL_SPI_TransmitReceive+0x212>
 8002038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800203a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800203e:	d003      	beq.n	8002048 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002046:	e0fb      	b.n	8002240 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800204c:	b29b      	uxth	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1a3      	bne.n	8001f9a <HAL_SPI_TransmitReceive+0x164>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002058:	b29b      	uxth	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d19d      	bne.n	8001f9a <HAL_SPI_TransmitReceive+0x164>
 800205e:	e0df      	b.n	8002220 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <HAL_SPI_TransmitReceive+0x23a>
 8002068:	8a7b      	ldrh	r3, [r7, #18]
 800206a:	2b01      	cmp	r3, #1
 800206c:	f040 80cb 	bne.w	8002206 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002074:	b29b      	uxth	r3, r3
 8002076:	2b01      	cmp	r3, #1
 8002078:	d912      	bls.n	80020a0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207e:	881a      	ldrh	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208a:	1c9a      	adds	r2, r3, #2
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002094:	b29b      	uxth	r3, r3
 8002096:	3b02      	subs	r3, #2
 8002098:	b29a      	uxth	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800209e:	e0b2      	b.n	8002206 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	330c      	adds	r3, #12
 80020aa:	7812      	ldrb	r2, [r2, #0]
 80020ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020bc:	b29b      	uxth	r3, r3
 80020be:	3b01      	subs	r3, #1
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020c6:	e09e      	b.n	8002206 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d134      	bne.n	8002140 <HAL_SPI_TransmitReceive+0x30a>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020da:	b29b      	uxth	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d02f      	beq.n	8002140 <HAL_SPI_TransmitReceive+0x30a>
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d12c      	bne.n	8002140 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d912      	bls.n	8002116 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f4:	881a      	ldrh	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002100:	1c9a      	adds	r2, r3, #2
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800210a:	b29b      	uxth	r3, r3
 800210c:	3b02      	subs	r3, #2
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002114:	e012      	b.n	800213c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	330c      	adds	r3, #12
 8002120:	7812      	ldrb	r2, [r2, #0]
 8002122:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002132:	b29b      	uxth	r3, r3
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b01      	cmp	r3, #1
 800214c:	d148      	bne.n	80021e0 <HAL_SPI_TransmitReceive+0x3aa>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002154:	b29b      	uxth	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d042      	beq.n	80021e0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002160:	b29b      	uxth	r3, r3
 8002162:	2b01      	cmp	r3, #1
 8002164:	d923      	bls.n	80021ae <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	b292      	uxth	r2, r2
 8002172:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	1c9a      	adds	r2, r3, #2
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002184:	b29b      	uxth	r3, r3
 8002186:	3b02      	subs	r3, #2
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002196:	b29b      	uxth	r3, r3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d81f      	bhi.n	80021dc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	e016      	b.n	80021dc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f103 020c 	add.w	r2, r3, #12
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	7812      	ldrb	r2, [r2, #0]
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	1c5a      	adds	r2, r3, #1
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	3b01      	subs	r3, #1
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021dc:	2301      	movs	r3, #1
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80021e0:	f7fe fb40 	bl	8000864 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d803      	bhi.n	80021f8 <HAL_SPI_TransmitReceive+0x3c2>
 80021f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021f6:	d102      	bne.n	80021fe <HAL_SPI_TransmitReceive+0x3c8>
 80021f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d103      	bne.n	8002206 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002204:	e01c      	b.n	8002240 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800220a:	b29b      	uxth	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	f47f af5b 	bne.w	80020c8 <HAL_SPI_TransmitReceive+0x292>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002218:	b29b      	uxth	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	f47f af54 	bne.w	80020c8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f000 f937 	bl	8002498 <SPI_EndRxTxTransaction>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d006      	beq.n	800223e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2220      	movs	r2, #32
 800223a:	661a      	str	r2, [r3, #96]	; 0x60
 800223c:	e000      	b.n	8002240 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800223e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002250:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002254:	4618      	mov	r0, r3
 8002256:	3728      	adds	r7, #40	; 0x28
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	4613      	mov	r3, r2
 800226a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800226c:	f7fe fafa 	bl	8000864 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002274:	1a9b      	subs	r3, r3, r2
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	4413      	add	r3, r2
 800227a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800227c:	f7fe faf2 	bl	8000864 <HAL_GetTick>
 8002280:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002282:	4b39      	ldr	r3, [pc, #228]	; (8002368 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	015b      	lsls	r3, r3, #5
 8002288:	0d1b      	lsrs	r3, r3, #20
 800228a:	69fa      	ldr	r2, [r7, #28]
 800228c:	fb02 f303 	mul.w	r3, r2, r3
 8002290:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002292:	e054      	b.n	800233e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800229a:	d050      	beq.n	800233e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800229c:	f7fe fae2 	bl	8000864 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	69fa      	ldr	r2, [r7, #28]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d902      	bls.n	80022b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d13d      	bne.n	800232e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80022c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022ca:	d111      	bne.n	80022f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022d4:	d004      	beq.n	80022e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022de:	d107      	bne.n	80022f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022f8:	d10f      	bne.n	800231a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002318:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e017      	b.n	800235e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	3b01      	subs	r3, #1
 800233c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	4013      	ands	r3, r2
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	429a      	cmp	r2, r3
 800234c:	bf0c      	ite	eq
 800234e:	2301      	moveq	r3, #1
 8002350:	2300      	movne	r3, #0
 8002352:	b2db      	uxtb	r3, r3
 8002354:	461a      	mov	r2, r3
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	429a      	cmp	r2, r3
 800235a:	d19b      	bne.n	8002294 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3720      	adds	r7, #32
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000000 	.word	0x20000000

0800236c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	; 0x28
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
 8002378:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800237e:	f7fe fa71 	bl	8000864 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002386:	1a9b      	subs	r3, r3, r2
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	4413      	add	r3, r2
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800238e:	f7fe fa69 	bl	8000864 <HAL_GetTick>
 8002392:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	330c      	adds	r3, #12
 800239a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800239c:	4b3d      	ldr	r3, [pc, #244]	; (8002494 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	00da      	lsls	r2, r3, #3
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	0d1b      	lsrs	r3, r3, #20
 80023ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ae:	fb02 f303 	mul.w	r3, r2, r3
 80023b2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80023b4:	e060      	b.n	8002478 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80023bc:	d107      	bne.n	80023ce <SPI_WaitFifoStateUntilTimeout+0x62>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d104      	bne.n	80023ce <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80023cc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023d4:	d050      	beq.n	8002478 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80023d6:	f7fe fa45 	bl	8000864 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d902      	bls.n	80023ec <SPI_WaitFifoStateUntilTimeout+0x80>
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d13d      	bne.n	8002468 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80023fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002404:	d111      	bne.n	800242a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800240e:	d004      	beq.n	800241a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002418:	d107      	bne.n	800242a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002428:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002432:	d10f      	bne.n	8002454 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002452:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e010      	b.n	800248a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800246e:	2300      	movs	r3, #0
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	3b01      	subs	r3, #1
 8002476:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	4013      	ands	r3, r2
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	429a      	cmp	r2, r3
 8002486:	d196      	bne.n	80023b6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3728      	adds	r7, #40	; 0x28
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000000 	.word	0x20000000

08002498 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af02      	add	r7, sp, #8
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f7ff ff5b 	bl	800236c <SPI_WaitFifoStateUntilTimeout>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d007      	beq.n	80024cc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c0:	f043 0220 	orr.w	r2, r3, #32
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e027      	b.n	800251c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2200      	movs	r2, #0
 80024d4:	2180      	movs	r1, #128	; 0x80
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f7ff fec0 	bl	800225c <SPI_WaitFlagStateUntilTimeout>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d007      	beq.n	80024f2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e6:	f043 0220 	orr.w	r2, r3, #32
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e014      	b.n	800251c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f7ff ff34 	bl	800236c <SPI_WaitFifoStateUntilTimeout>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d007      	beq.n	800251a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800250e:	f043 0220 	orr.w	r2, r3, #32
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e000      	b.n	800251c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <__libc_init_array>:
 8002524:	b570      	push	{r4, r5, r6, lr}
 8002526:	4d0d      	ldr	r5, [pc, #52]	; (800255c <__libc_init_array+0x38>)
 8002528:	4c0d      	ldr	r4, [pc, #52]	; (8002560 <__libc_init_array+0x3c>)
 800252a:	1b64      	subs	r4, r4, r5
 800252c:	10a4      	asrs	r4, r4, #2
 800252e:	2600      	movs	r6, #0
 8002530:	42a6      	cmp	r6, r4
 8002532:	d109      	bne.n	8002548 <__libc_init_array+0x24>
 8002534:	4d0b      	ldr	r5, [pc, #44]	; (8002564 <__libc_init_array+0x40>)
 8002536:	4c0c      	ldr	r4, [pc, #48]	; (8002568 <__libc_init_array+0x44>)
 8002538:	f000 f820 	bl	800257c <_init>
 800253c:	1b64      	subs	r4, r4, r5
 800253e:	10a4      	asrs	r4, r4, #2
 8002540:	2600      	movs	r6, #0
 8002542:	42a6      	cmp	r6, r4
 8002544:	d105      	bne.n	8002552 <__libc_init_array+0x2e>
 8002546:	bd70      	pop	{r4, r5, r6, pc}
 8002548:	f855 3b04 	ldr.w	r3, [r5], #4
 800254c:	4798      	blx	r3
 800254e:	3601      	adds	r6, #1
 8002550:	e7ee      	b.n	8002530 <__libc_init_array+0xc>
 8002552:	f855 3b04 	ldr.w	r3, [r5], #4
 8002556:	4798      	blx	r3
 8002558:	3601      	adds	r6, #1
 800255a:	e7f2      	b.n	8002542 <__libc_init_array+0x1e>
 800255c:	080025d4 	.word	0x080025d4
 8002560:	080025d4 	.word	0x080025d4
 8002564:	080025d4 	.word	0x080025d4
 8002568:	080025d8 	.word	0x080025d8

0800256c <memset>:
 800256c:	4402      	add	r2, r0
 800256e:	4603      	mov	r3, r0
 8002570:	4293      	cmp	r3, r2
 8002572:	d100      	bne.n	8002576 <memset+0xa>
 8002574:	4770      	bx	lr
 8002576:	f803 1b01 	strb.w	r1, [r3], #1
 800257a:	e7f9      	b.n	8002570 <memset+0x4>

0800257c <_init>:
 800257c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800257e:	bf00      	nop
 8002580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002582:	bc08      	pop	{r3}
 8002584:	469e      	mov	lr, r3
 8002586:	4770      	bx	lr

08002588 <_fini>:
 8002588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800258a:	bf00      	nop
 800258c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800258e:	bc08      	pop	{r3}
 8002590:	469e      	mov	lr, r3
 8002592:	4770      	bx	lr
