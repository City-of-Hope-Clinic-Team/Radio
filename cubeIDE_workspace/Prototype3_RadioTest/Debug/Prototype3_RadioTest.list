
Prototype3_RadioTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023f8  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002584  08002584  00012584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025c4  080025c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080025c4  080025c4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025c4  080025c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025c4  080025c4  000125c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025c8  080025c8  000125c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080025cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000000c  080025d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080025d8  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ce6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013ca  00000000  00000000  00026d22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  000280f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b8  00000000  00000000  00028850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e89a  00000000  00000000  00028f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000078dc  00000000  00000000  000477a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8549  00000000  00000000  0004f07e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001075c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cb4  00000000  00000000  00107618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800256c 	.word	0x0800256c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	0800256c 	.word	0x0800256c

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fad6 	bl	8000782 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f832 	bl	800023e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f8b5 	bl	8000348 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001de:	f000 f875 	bl	80002cc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t checkStatus;
  uint8_t checkFIFO_Status;
  setupTXsimple();
 80001e2:	f000 f971 	bl	80004c8 <setupTXsimple>

  HAL_GPIO_WritePin(GPIOA, CE_Pin, GPIO_PIN_SET);
 80001e6:	2201      	movs	r2, #1
 80001e8:	2104      	movs	r1, #4
 80001ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001ee:	f000 fd8d 	bl	8000d0c <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	checkStatus = spiReadByte(REG_STATUS); // Expect x0E
 80001f2:	2007      	movs	r0, #7
 80001f4:	f000 f8d8 	bl	80003a8 <spiReadByte>
 80001f8:	4603      	mov	r3, r0
 80001fa:	71fb      	strb	r3, [r7, #7]
	checkFIFO_Status = spiReadByte(REG_FIFO_STATUS); // x11 expected
 80001fc:	2017      	movs	r0, #23
 80001fe:	f000 f8d3 	bl	80003a8 <spiReadByte>
 8000202:	4603      	mov	r3, r0
 8000204:	71bb      	strb	r3, [r7, #6]
	transmitByte(0x5C);
 8000206:	205c      	movs	r0, #92	; 0x5c
 8000208:	f000 f9a8 	bl	800055c <transmitByte>
	transmitByte(0x5D);
 800020c:	205d      	movs	r0, #93	; 0x5d
 800020e:	f000 f9a5 	bl	800055c <transmitByte>
	checkStatus = spiReadByte(REG_STATUS); // Expect x2E
 8000212:	2007      	movs	r0, #7
 8000214:	f000 f8c8 	bl	80003a8 <spiReadByte>
 8000218:	4603      	mov	r3, r0
 800021a:	71fb      	strb	r3, [r7, #7]
	spiWriteByte(REG_STATUS, 0x2E); // CLEARing datasend flag!
 800021c:	212e      	movs	r1, #46	; 0x2e
 800021e:	2007      	movs	r0, #7
 8000220:	f000 f8ee 	bl	8000400 <spiWriteByte>
	checkStatus = spiReadByte(REG_STATUS); // Expect x0E
 8000224:	2007      	movs	r0, #7
 8000226:	f000 f8bf 	bl	80003a8 <spiReadByte>
 800022a:	4603      	mov	r3, r0
 800022c:	71fb      	strb	r3, [r7, #7]
	checkFIFO_Status = spiReadByte(REG_FIFO_STATUS);// x01 expected
 800022e:	2017      	movs	r0, #23
 8000230:	f000 f8ba 	bl	80003a8 <spiReadByte>
 8000234:	4603      	mov	r3, r0
 8000236:	71bb      	strb	r3, [r7, #6]
	flushTXFIFO();
 8000238:	f000 f9b4 	bl	80005a4 <flushTXFIFO>
	checkStatus = spiReadByte(REG_STATUS); // Expect x0E
 800023c:	e7d9      	b.n	80001f2 <main+0x26>

0800023e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023e:	b580      	push	{r7, lr}
 8000240:	b096      	sub	sp, #88	; 0x58
 8000242:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000244:	f107 0314 	add.w	r3, r7, #20
 8000248:	2244      	movs	r2, #68	; 0x44
 800024a:	2100      	movs	r1, #0
 800024c:	4618      	mov	r0, r3
 800024e:	f002 f985 	bl	800255c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000252:	463b      	mov	r3, r7
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
 8000258:	605a      	str	r2, [r3, #4]
 800025a:	609a      	str	r2, [r3, #8]
 800025c:	60da      	str	r2, [r3, #12]
 800025e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000260:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000264:	f000 fd78 	bl	8000d58 <HAL_PWREx_ControlVoltageScaling>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800026e:	f000 f9b7 	bl	80005e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000272:	2310      	movs	r3, #16
 8000274:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000276:	2301      	movs	r3, #1
 8000278:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800027a:	2300      	movs	r3, #0
 800027c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800027e:	2360      	movs	r3, #96	; 0x60
 8000280:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000282:	2300      	movs	r3, #0
 8000284:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000286:	f107 0314 	add.w	r3, r7, #20
 800028a:	4618      	mov	r0, r3
 800028c:	f000 fdba 	bl	8000e04 <HAL_RCC_OscConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000296:	f000 f9a3 	bl	80005e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029a:	230f      	movs	r3, #15
 800029c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800029e:	2300      	movs	r3, #0
 80002a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ae:	463b      	mov	r3, r7
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f001 f9ba 	bl	800162c <HAL_RCC_ClockConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002be:	f000 f98f 	bl	80005e0 <Error_Handler>
  }
}
 80002c2:	bf00      	nop
 80002c4:	3758      	adds	r7, #88	; 0x58
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
	...

080002cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002d0:	4b1b      	ldr	r3, [pc, #108]	; (8000340 <MX_SPI1_Init+0x74>)
 80002d2:	4a1c      	ldr	r2, [pc, #112]	; (8000344 <MX_SPI1_Init+0x78>)
 80002d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002d6:	4b1a      	ldr	r3, [pc, #104]	; (8000340 <MX_SPI1_Init+0x74>)
 80002d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002de:	4b18      	ldr	r3, [pc, #96]	; (8000340 <MX_SPI1_Init+0x74>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002e4:	4b16      	ldr	r3, [pc, #88]	; (8000340 <MX_SPI1_Init+0x74>)
 80002e6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80002ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002ec:	4b14      	ldr	r3, [pc, #80]	; (8000340 <MX_SPI1_Init+0x74>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002f2:	4b13      	ldr	r3, [pc, #76]	; (8000340 <MX_SPI1_Init+0x74>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002f8:	4b11      	ldr	r3, [pc, #68]	; (8000340 <MX_SPI1_Init+0x74>)
 80002fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000300:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <MX_SPI1_Init+0x74>)
 8000302:	2220      	movs	r2, #32
 8000304:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000306:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <MX_SPI1_Init+0x74>)
 8000308:	2200      	movs	r2, #0
 800030a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800030c:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <MX_SPI1_Init+0x74>)
 800030e:	2200      	movs	r2, #0
 8000310:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000312:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <MX_SPI1_Init+0x74>)
 8000314:	2200      	movs	r2, #0
 8000316:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <MX_SPI1_Init+0x74>)
 800031a:	2207      	movs	r2, #7
 800031c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800031e:	4b08      	ldr	r3, [pc, #32]	; (8000340 <MX_SPI1_Init+0x74>)
 8000320:	2200      	movs	r2, #0
 8000322:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000324:	4b06      	ldr	r3, [pc, #24]	; (8000340 <MX_SPI1_Init+0x74>)
 8000326:	2208      	movs	r2, #8
 8000328:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800032a:	4805      	ldr	r0, [pc, #20]	; (8000340 <MX_SPI1_Init+0x74>)
 800032c:	f001 fb6a 	bl	8001a04 <HAL_SPI_Init>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000336:	f000 f953 	bl	80005e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20000028 	.word	0x20000028
 8000344:	40013000 	.word	0x40013000

08000348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b086      	sub	sp, #24
 800034c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	2200      	movs	r2, #0
 8000352:	601a      	str	r2, [r3, #0]
 8000354:	605a      	str	r2, [r3, #4]
 8000356:	609a      	str	r2, [r3, #8]
 8000358:	60da      	str	r2, [r3, #12]
 800035a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035c:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <MX_GPIO_Init+0x5c>)
 800035e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000360:	4a10      	ldr	r2, [pc, #64]	; (80003a4 <MX_GPIO_Init+0x5c>)
 8000362:	f043 0301 	orr.w	r3, r3, #1
 8000366:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000368:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <MX_GPIO_Init+0x5c>)
 800036a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800036c:	f003 0301 	and.w	r3, r3, #1
 8000370:	603b      	str	r3, [r7, #0]
 8000372:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	2114      	movs	r1, #20
 8000378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800037c:	f000 fcc6 	bl	8000d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8000380:	2314      	movs	r3, #20
 8000382:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000384:	2301      	movs	r3, #1
 8000386:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800038c:	2300      	movs	r3, #0
 800038e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	4619      	mov	r1, r3
 8000394:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000398:	f000 fb4e 	bl	8000a38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800039c:	bf00      	nop
 800039e:	3718      	adds	r7, #24
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40021000 	.word	0x40021000

080003a8 <spiReadByte>:

/* USER CODE BEGIN 4 */
uint8_t spitxbuffer[8];
uint8_t spirxbuffer[8];
uint8_t spiReadByte(uint8_t address)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af02      	add	r7, sp, #8
 80003ae:	4603      	mov	r3, r0
 80003b0:	71fb      	strb	r3, [r7, #7]
	spitxbuffer[0] = address;
 80003b2:	4a10      	ldr	r2, [pc, #64]	; (80003f4 <spiReadByte+0x4c>)
 80003b4:	79fb      	ldrb	r3, [r7, #7]
 80003b6:	7013      	strb	r3, [r2, #0]
	spitxbuffer[1] = 0;
 80003b8:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <spiReadByte+0x4c>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_RESET); // put CSN = 0
 80003be:	2200      	movs	r2, #0
 80003c0:	2110      	movs	r1, #16
 80003c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003c6:	f000 fca1 	bl	8000d0c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, spitxbuffer, spirxbuffer, 2*sizeof(uint8_t), HAL_MAX_DELAY);
 80003ca:	f04f 33ff 	mov.w	r3, #4294967295
 80003ce:	9300      	str	r3, [sp, #0]
 80003d0:	2302      	movs	r3, #2
 80003d2:	4a09      	ldr	r2, [pc, #36]	; (80003f8 <spiReadByte+0x50>)
 80003d4:	4907      	ldr	r1, [pc, #28]	; (80003f4 <spiReadByte+0x4c>)
 80003d6:	4809      	ldr	r0, [pc, #36]	; (80003fc <spiReadByte+0x54>)
 80003d8:	f001 fd25 	bl	8001e26 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_SET); // put CSN = 0
 80003dc:	2201      	movs	r2, #1
 80003de:	2110      	movs	r1, #16
 80003e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e4:	f000 fc92 	bl	8000d0c <HAL_GPIO_WritePin>
	return spirxbuffer[1];
 80003e8:	4b03      	ldr	r3, [pc, #12]	; (80003f8 <spiReadByte+0x50>)
 80003ea:	785b      	ldrb	r3, [r3, #1]

}
 80003ec:	4618      	mov	r0, r3
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	2000008c 	.word	0x2000008c
 80003f8:	20000094 	.word	0x20000094
 80003fc:	20000028 	.word	0x20000028

08000400 <spiWriteByte>:

void spiWriteByte(uint8_t address, uint8_t value)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af02      	add	r7, sp, #8
 8000406:	4603      	mov	r3, r0
 8000408:	460a      	mov	r2, r1
 800040a:	71fb      	strb	r3, [r7, #7]
 800040c:	4613      	mov	r3, r2
 800040e:	71bb      	strb	r3, [r7, #6]
	spitxbuffer[0] = address | 1<<5; // need to set 3 msb to 1 for writes
 8000410:	79fb      	ldrb	r3, [r7, #7]
 8000412:	f043 0320 	orr.w	r3, r3, #32
 8000416:	b2da      	uxtb	r2, r3
 8000418:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <spiWriteByte+0x54>)
 800041a:	701a      	strb	r2, [r3, #0]
	spitxbuffer[1] = value;
 800041c:	4a0d      	ldr	r2, [pc, #52]	; (8000454 <spiWriteByte+0x54>)
 800041e:	79bb      	ldrb	r3, [r7, #6]
 8000420:	7053      	strb	r3, [r2, #1]

	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_RESET); // put CSN = 0
 8000422:	2200      	movs	r2, #0
 8000424:	2110      	movs	r1, #16
 8000426:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800042a:	f000 fc6f 	bl	8000d0c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, spitxbuffer, spirxbuffer, 2, HAL_MAX_DELAY);
 800042e:	f04f 33ff 	mov.w	r3, #4294967295
 8000432:	9300      	str	r3, [sp, #0]
 8000434:	2302      	movs	r3, #2
 8000436:	4a08      	ldr	r2, [pc, #32]	; (8000458 <spiWriteByte+0x58>)
 8000438:	4906      	ldr	r1, [pc, #24]	; (8000454 <spiWriteByte+0x54>)
 800043a:	4808      	ldr	r0, [pc, #32]	; (800045c <spiWriteByte+0x5c>)
 800043c:	f001 fcf3 	bl	8001e26 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_SET); // put CSN = 0
 8000440:	2201      	movs	r2, #1
 8000442:	2110      	movs	r1, #16
 8000444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000448:	f000 fc60 	bl	8000d0c <HAL_GPIO_WritePin>


}
 800044c:	bf00      	nop
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	2000008c 	.word	0x2000008c
 8000458:	20000094 	.word	0x20000094
 800045c:	20000028 	.word	0x20000028

08000460 <spiWriteNByte>:

void spiWriteNByte(uint8_t address, const uint8_t *buf, uint8_t len)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	6039      	str	r1, [r7, #0]
 800046a:	71fb      	strb	r3, [r7, #7]
 800046c:	4613      	mov	r3, r2
 800046e:	71bb      	strb	r3, [r7, #6]
	spitxbuffer[0] = address | 1 <<5;
 8000470:	79fb      	ldrb	r3, [r7, #7]
 8000472:	f043 0320 	orr.w	r3, r3, #32
 8000476:	b2da      	uxtb	r2, r3
 8000478:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <spiWriteNByte+0x60>)
 800047a:	701a      	strb	r2, [r3, #0]
	spitxbuffer[1] = 0;
 800047c:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <spiWriteNByte+0x60>)
 800047e:	2200      	movs	r2, #0
 8000480:	705a      	strb	r2, [r3, #1]
	//Put CSN low
	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_RESET); // put CSN = 0
 8000482:	2200      	movs	r2, #0
 8000484:	2110      	movs	r1, #16
 8000486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048a:	f000 fc3f 	bl	8000d0c <HAL_GPIO_WritePin>
	//Transmit register address
	HAL_SPI_Transmit(&hspi1, spitxbuffer, 1, HAL_MAX_DELAY);	//Receive data
 800048e:	f04f 33ff 	mov.w	r3, #4294967295
 8000492:	2201      	movs	r2, #1
 8000494:	490a      	ldr	r1, [pc, #40]	; (80004c0 <spiWriteNByte+0x60>)
 8000496:	480b      	ldr	r0, [pc, #44]	; (80004c4 <spiWriteNByte+0x64>)
 8000498:	f001 fb57 	bl	8001b4a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)buf, len, HAL_MAX_DELAY);
 800049c:	79bb      	ldrb	r3, [r7, #6]
 800049e:	b29a      	uxth	r2, r3
 80004a0:	f04f 33ff 	mov.w	r3, #4294967295
 80004a4:	6839      	ldr	r1, [r7, #0]
 80004a6:	4807      	ldr	r0, [pc, #28]	; (80004c4 <spiWriteNByte+0x64>)
 80004a8:	f001 fb4f 	bl	8001b4a <HAL_SPI_Transmit>
	//Bring CSN high
	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_SET); // put CSN = 1
 80004ac:	2201      	movs	r2, #1
 80004ae:	2110      	movs	r1, #16
 80004b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b4:	f000 fc2a 	bl	8000d0c <HAL_GPIO_WritePin>
}
 80004b8:	bf00      	nop
 80004ba:	3708      	adds	r7, #8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	2000008c 	.word	0x2000008c
 80004c4:	20000028 	.word	0x20000028

080004c8 <setupTXsimple>:

void setupTXsimple(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
	spiWriteByte(REG_SETUP_RETR, 0x00); // no retransmission / acknowledgment
 80004ce:	2100      	movs	r1, #0
 80004d0:	2004      	movs	r0, #4
 80004d2:	f7ff ff95 	bl	8000400 <spiWriteByte>
	spiWriteByte(REG_EN_AA, 0x00); //no auto acknowledge
 80004d6:	2100      	movs	r1, #0
 80004d8:	2001      	movs	r0, #1
 80004da:	f7ff ff91 	bl	8000400 <spiWriteByte>
	spiWriteByte(REG_SETUP_AW, 0x02); // makes address width 4 bytes
 80004de:	2102      	movs	r1, #2
 80004e0:	2003      	movs	r0, #3
 80004e2:	f7ff ff8d 	bl	8000400 <spiWriteByte>
	spiWriteByte(REG_RF_CH, 0x02);// make frequency 2.402 Ghz
 80004e6:	2102      	movs	r1, #2
 80004e8:	2005      	movs	r0, #5
 80004ea:	f7ff ff89 	bl	8000400 <spiWriteByte>
	spiWriteByte(REG_RF_SETUP, 0x26); // lowest data rate + highest output pwr
 80004ee:	2126      	movs	r1, #38	; 0x26
 80004f0:	2006      	movs	r0, #6
 80004f2:	f7ff ff85 	bl	8000400 <spiWriteByte>

	// What is our TX_ADDRESS
	uint8_t TxAddr[4] = {0x00, 0x11, 0x22, 0x33};
 80004f6:	4b18      	ldr	r3, [pc, #96]	; (8000558 <setupTXsimple+0x90>)
 80004f8:	607b      	str	r3, [r7, #4]
	spiWriteNByte(REG_TX_ADDR, TxAddr, 4);
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	2204      	movs	r2, #4
 80004fe:	4619      	mov	r1, r3
 8000500:	2010      	movs	r0, #16
 8000502:	f7ff ffad 	bl	8000460 <spiWriteNByte>

	// Receive Pipes not used
	spiWriteByte(REG_RX_PW_P0, 0x00);
 8000506:	2100      	movs	r1, #0
 8000508:	2011      	movs	r0, #17
 800050a:	f7ff ff79 	bl	8000400 <spiWriteByte>
	spiWriteByte(REG_RX_PW_P1, 0x00);
 800050e:	2100      	movs	r1, #0
 8000510:	2012      	movs	r0, #18
 8000512:	f7ff ff75 	bl	8000400 <spiWriteByte>
	spiWriteByte(REG_RX_PW_P2, 0x00);
 8000516:	2100      	movs	r1, #0
 8000518:	2013      	movs	r0, #19
 800051a:	f7ff ff71 	bl	8000400 <spiWriteByte>
	spiWriteByte(REG_RX_PW_P3, 0x00);
 800051e:	2100      	movs	r1, #0
 8000520:	2014      	movs	r0, #20
 8000522:	f7ff ff6d 	bl	8000400 <spiWriteByte>
	spiWriteByte(REG_RX_PW_P4, 0x00);
 8000526:	2100      	movs	r1, #0
 8000528:	2015      	movs	r0, #21
 800052a:	f7ff ff69 	bl	8000400 <spiWriteByte>
	spiWriteByte(REG_RX_PW_P5, 0x00);
 800052e:	2100      	movs	r1, #0
 8000530:	2016      	movs	r0, #22
 8000532:	f7ff ff65 	bl	8000400 <spiWriteByte>

	// no shockburst stuff
	spiWriteByte(REG_DYNPD, 0x00);
 8000536:	2100      	movs	r1, #0
 8000538:	201c      	movs	r0, #28
 800053a:	f7ff ff61 	bl	8000400 <spiWriteByte>
	spiWriteByte(REG_FEATURE, 0x00);
 800053e:	2100      	movs	r1, #0
 8000540:	201d      	movs	r0, #29
 8000542:	f7ff ff5d 	bl	8000400 <spiWriteByte>

	// Do config
	spiWriteByte(REG_CONFIG, 0x0A);
 8000546:	210a      	movs	r1, #10
 8000548:	2000      	movs	r0, #0
 800054a:	f7ff ff59 	bl	8000400 <spiWriteByte>
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	33221100 	.word	0x33221100

0800055c <transmitByte>:
	buf[11] =  spiReadByte(REG_FEATURE);
	buf[12] =  spiReadByte(REG_CONFIG);
}

void transmitByte(uint8_t data)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	71fb      	strb	r3, [r7, #7]
	uint8_t txData[2];
	txData[0] = 0xB0; // using the W_TX_PAYLOAD_NOACK cmd
 8000566:	23b0      	movs	r3, #176	; 0xb0
 8000568:	733b      	strb	r3, [r7, #12]
	txData[1] = data;
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_RESET); // put CSN = 0
 800056e:	2200      	movs	r2, #0
 8000570:	2110      	movs	r1, #16
 8000572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000576:	f000 fbc9 	bl	8000d0c <HAL_GPIO_WritePin>
	// Send W_TX_Command
	HAL_SPI_Transmit(&hspi1, txData, 2, HAL_MAX_DELAY);
 800057a:	f107 010c 	add.w	r1, r7, #12
 800057e:	f04f 33ff 	mov.w	r3, #4294967295
 8000582:	2202      	movs	r2, #2
 8000584:	4806      	ldr	r0, [pc, #24]	; (80005a0 <transmitByte+0x44>)
 8000586:	f001 fae0 	bl	8001b4a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_SET); // put CSN = 0
 800058a:	2201      	movs	r2, #1
 800058c:	2110      	movs	r1, #16
 800058e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000592:	f000 fbbb 	bl	8000d0c <HAL_GPIO_WritePin>

}
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000028 	.word	0x20000028

080005a4 <flushTXFIFO>:

void flushTXFIFO(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
	uint8_t txData[2];
	txData[0] = 0xE1; // using the W_TX_PAYLOAD_NOACK cmd
 80005aa:	23e1      	movs	r3, #225	; 0xe1
 80005ac:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_RESET); // put CSN = 0
 80005ae:	2200      	movs	r2, #0
 80005b0:	2110      	movs	r1, #16
 80005b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b6:	f000 fba9 	bl	8000d0c <HAL_GPIO_WritePin>
	// Send W_TX_Command
	HAL_SPI_Transmit(&hspi1, txData, 1, HAL_MAX_DELAY);
 80005ba:	1d39      	adds	r1, r7, #4
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295
 80005c0:	2201      	movs	r2, #1
 80005c2:	4806      	ldr	r0, [pc, #24]	; (80005dc <flushTXFIFO+0x38>)
 80005c4:	f001 fac1 	bl	8001b4a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CSN_Pin, GPIO_PIN_SET); // put CSN = 0
 80005c8:	2201      	movs	r2, #1
 80005ca:	2110      	movs	r1, #16
 80005cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d0:	f000 fb9c 	bl	8000d0c <HAL_GPIO_WritePin>

}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000028 	.word	0x20000028

080005e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e4:	b672      	cpsid	i
}
 80005e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <Error_Handler+0x8>
	...

080005ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f2:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <HAL_MspInit+0x44>)
 80005f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005f6:	4a0e      	ldr	r2, [pc, #56]	; (8000630 <HAL_MspInit+0x44>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6613      	str	r3, [r2, #96]	; 0x60
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <HAL_MspInit+0x44>)
 8000600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <HAL_MspInit+0x44>)
 800060c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800060e:	4a08      	ldr	r2, [pc, #32]	; (8000630 <HAL_MspInit+0x44>)
 8000610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000614:	6593      	str	r3, [r2, #88]	; 0x58
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <HAL_MspInit+0x44>)
 8000618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800061a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061e:	603b      	str	r3, [r7, #0]
 8000620:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000

08000634 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08a      	sub	sp, #40	; 0x28
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a17      	ldr	r2, [pc, #92]	; (80006b0 <HAL_SPI_MspInit+0x7c>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d128      	bne.n	80006a8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000656:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <HAL_SPI_MspInit+0x80>)
 8000658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800065a:	4a16      	ldr	r2, [pc, #88]	; (80006b4 <HAL_SPI_MspInit+0x80>)
 800065c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000660:	6613      	str	r3, [r2, #96]	; 0x60
 8000662:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <HAL_SPI_MspInit+0x80>)
 8000664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <HAL_SPI_MspInit+0x80>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	4a10      	ldr	r2, [pc, #64]	; (80006b4 <HAL_SPI_MspInit+0x80>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <HAL_SPI_MspInit+0x80>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000686:	23e0      	movs	r3, #224	; 0xe0
 8000688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000692:	2303      	movs	r3, #3
 8000694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000696:	2305      	movs	r3, #5
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a4:	f000 f9c8 	bl	8000a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006a8:	bf00      	nop
 80006aa:	3728      	adds	r7, #40	; 0x28
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40013000 	.word	0x40013000
 80006b4:	40021000 	.word	0x40021000

080006b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <NMI_Handler+0x4>

080006be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <HardFault_Handler+0x4>

080006c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <MemManage_Handler+0x4>

080006ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <BusFault_Handler+0x4>

080006d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <UsageFault_Handler+0x4>

080006d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000704:	f000 f892 	bl	800082c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <SystemInit+0x20>)
 8000712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000716:	4a05      	ldr	r2, [pc, #20]	; (800072c <SystemInit+0x20>)
 8000718:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800071c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000768 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000734:	f7ff ffea 	bl	800070c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <LoopForever+0x6>)
  ldr r1, =_edata
 800073a:	490d      	ldr	r1, [pc, #52]	; (8000770 <LoopForever+0xa>)
  ldr r2, =_sidata
 800073c:	4a0d      	ldr	r2, [pc, #52]	; (8000774 <LoopForever+0xe>)
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000740:	e002      	b.n	8000748 <LoopCopyDataInit>

08000742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000746:	3304      	adds	r3, #4

08000748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800074c:	d3f9      	bcc.n	8000742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000750:	4c0a      	ldr	r4, [pc, #40]	; (800077c <LoopForever+0x16>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000754:	e001      	b.n	800075a <LoopFillZerobss>

08000756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000758:	3204      	adds	r2, #4

0800075a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800075c:	d3fb      	bcc.n	8000756 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800075e:	f001 fed9 	bl	8002514 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000762:	f7ff fd33 	bl	80001cc <main>

08000766 <LoopForever>:

LoopForever:
    b LoopForever
 8000766:	e7fe      	b.n	8000766 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000768:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800076c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000770:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000774:	080025cc 	.word	0x080025cc
  ldr r2, =_sbss
 8000778:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800077c:	200000a0 	.word	0x200000a0

08000780 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000780:	e7fe      	b.n	8000780 <ADC1_IRQHandler>

08000782 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000788:	2300      	movs	r3, #0
 800078a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800078c:	2003      	movs	r0, #3
 800078e:	f000 f91f 	bl	80009d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000792:	200f      	movs	r0, #15
 8000794:	f000 f80e 	bl	80007b4 <HAL_InitTick>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d002      	beq.n	80007a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	71fb      	strb	r3, [r7, #7]
 80007a2:	e001      	b.n	80007a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007a4:	f7ff ff22 	bl	80005ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007a8:	79fb      	ldrb	r3, [r7, #7]
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007bc:	2300      	movs	r3, #0
 80007be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007c0:	4b17      	ldr	r3, [pc, #92]	; (8000820 <HAL_InitTick+0x6c>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d023      	beq.n	8000810 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007c8:	4b16      	ldr	r3, [pc, #88]	; (8000824 <HAL_InitTick+0x70>)
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <HAL_InitTick+0x6c>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	4619      	mov	r1, r3
 80007d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007da:	fbb2 f3f3 	udiv	r3, r2, r3
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 f91d 	bl	8000a1e <HAL_SYSTICK_Config>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d10f      	bne.n	800080a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b0f      	cmp	r3, #15
 80007ee:	d809      	bhi.n	8000804 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007f0:	2200      	movs	r2, #0
 80007f2:	6879      	ldr	r1, [r7, #4]
 80007f4:	f04f 30ff 	mov.w	r0, #4294967295
 80007f8:	f000 f8f5 	bl	80009e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007fc:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <HAL_InitTick+0x74>)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	6013      	str	r3, [r2, #0]
 8000802:	e007      	b.n	8000814 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000804:	2301      	movs	r3, #1
 8000806:	73fb      	strb	r3, [r7, #15]
 8000808:	e004      	b.n	8000814 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800080a:	2301      	movs	r3, #1
 800080c:	73fb      	strb	r3, [r7, #15]
 800080e:	e001      	b.n	8000814 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000810:	2301      	movs	r3, #1
 8000812:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000814:	7bfb      	ldrb	r3, [r7, #15]
}
 8000816:	4618      	mov	r0, r3
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000008 	.word	0x20000008
 8000824:	20000000 	.word	0x20000000
 8000828:	20000004 	.word	0x20000004

0800082c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_IncTick+0x20>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_IncTick+0x24>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4413      	add	r3, r2
 800083c:	4a04      	ldr	r2, [pc, #16]	; (8000850 <HAL_IncTick+0x24>)
 800083e:	6013      	str	r3, [r2, #0]
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	20000008 	.word	0x20000008
 8000850:	2000009c 	.word	0x2000009c

08000854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return uwTick;
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <HAL_GetTick+0x14>)
 800085a:	681b      	ldr	r3, [r3, #0]
}
 800085c:	4618      	mov	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	2000009c 	.word	0x2000009c

0800086c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <__NVIC_SetPriorityGrouping+0x44>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000882:	68ba      	ldr	r2, [r7, #8]
 8000884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000888:	4013      	ands	r3, r2
 800088a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800089c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800089e:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <__NVIC_SetPriorityGrouping+0x44>)
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	60d3      	str	r3, [r2, #12]
}
 80008a4:	bf00      	nop
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b8:	4b04      	ldr	r3, [pc, #16]	; (80008cc <__NVIC_GetPriorityGrouping+0x18>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	0a1b      	lsrs	r3, r3, #8
 80008be:	f003 0307 	and.w	r3, r3, #7
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	6039      	str	r1, [r7, #0]
 80008da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	db0a      	blt.n	80008fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	490c      	ldr	r1, [pc, #48]	; (800091c <__NVIC_SetPriority+0x4c>)
 80008ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ee:	0112      	lsls	r2, r2, #4
 80008f0:	b2d2      	uxtb	r2, r2
 80008f2:	440b      	add	r3, r1
 80008f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f8:	e00a      	b.n	8000910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4908      	ldr	r1, [pc, #32]	; (8000920 <__NVIC_SetPriority+0x50>)
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	f003 030f 	and.w	r3, r3, #15
 8000906:	3b04      	subs	r3, #4
 8000908:	0112      	lsls	r2, r2, #4
 800090a:	b2d2      	uxtb	r2, r2
 800090c:	440b      	add	r3, r1
 800090e:	761a      	strb	r2, [r3, #24]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	e000e100 	.word	0xe000e100
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000924:	b480      	push	{r7}
 8000926:	b089      	sub	sp, #36	; 0x24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	f1c3 0307 	rsb	r3, r3, #7
 800093e:	2b04      	cmp	r3, #4
 8000940:	bf28      	it	cs
 8000942:	2304      	movcs	r3, #4
 8000944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	3304      	adds	r3, #4
 800094a:	2b06      	cmp	r3, #6
 800094c:	d902      	bls.n	8000954 <NVIC_EncodePriority+0x30>
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3b03      	subs	r3, #3
 8000952:	e000      	b.n	8000956 <NVIC_EncodePriority+0x32>
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000958:	f04f 32ff 	mov.w	r2, #4294967295
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	43da      	mvns	r2, r3
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	401a      	ands	r2, r3
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800096c:	f04f 31ff 	mov.w	r1, #4294967295
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	fa01 f303 	lsl.w	r3, r1, r3
 8000976:	43d9      	mvns	r1, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800097c:	4313      	orrs	r3, r2
         );
}
 800097e:	4618      	mov	r0, r3
 8000980:	3724      	adds	r7, #36	; 0x24
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
	...

0800098c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3b01      	subs	r3, #1
 8000998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800099c:	d301      	bcc.n	80009a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800099e:	2301      	movs	r3, #1
 80009a0:	e00f      	b.n	80009c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <SysTick_Config+0x40>)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009aa:	210f      	movs	r1, #15
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f7ff ff8e 	bl	80008d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <SysTick_Config+0x40>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ba:	4b04      	ldr	r3, [pc, #16]	; (80009cc <SysTick_Config+0x40>)
 80009bc:	2207      	movs	r2, #7
 80009be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	e000e010 	.word	0xe000e010

080009d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f7ff ff47 	bl	800086c <__NVIC_SetPriorityGrouping>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b086      	sub	sp, #24
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	4603      	mov	r3, r0
 80009ee:	60b9      	str	r1, [r7, #8]
 80009f0:	607a      	str	r2, [r7, #4]
 80009f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009f8:	f7ff ff5c 	bl	80008b4 <__NVIC_GetPriorityGrouping>
 80009fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	68b9      	ldr	r1, [r7, #8]
 8000a02:	6978      	ldr	r0, [r7, #20]
 8000a04:	f7ff ff8e 	bl	8000924 <NVIC_EncodePriority>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a0e:	4611      	mov	r1, r2
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ff5d 	bl	80008d0 <__NVIC_SetPriority>
}
 8000a16:	bf00      	nop
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b082      	sub	sp, #8
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f7ff ffb0 	bl	800098c <SysTick_Config>
 8000a2c:	4603      	mov	r3, r0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b087      	sub	sp, #28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a46:	e148      	b.n	8000cda <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	fa01 f303 	lsl.w	r3, r1, r3
 8000a54:	4013      	ands	r3, r2
 8000a56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	f000 813a 	beq.w	8000cd4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f003 0303 	and.w	r3, r3, #3
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d005      	beq.n	8000a78 <HAL_GPIO_Init+0x40>
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f003 0303 	and.w	r3, r3, #3
 8000a74:	2b02      	cmp	r3, #2
 8000a76:	d130      	bne.n	8000ada <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	2203      	movs	r2, #3
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	68da      	ldr	r2, [r3, #12]
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000aae:	2201      	movs	r2, #1
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4013      	ands	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	091b      	lsrs	r3, r3, #4
 8000ac4:	f003 0201 	and.w	r2, r3, #1
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f003 0303 	and.w	r3, r3, #3
 8000ae2:	2b03      	cmp	r3, #3
 8000ae4:	d017      	beq.n	8000b16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	68db      	ldr	r3, [r3, #12]
 8000aea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	2203      	movs	r2, #3
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4013      	ands	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	689a      	ldr	r2, [r3, #8]
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f003 0303 	and.w	r3, r3, #3
 8000b1e:	2b02      	cmp	r3, #2
 8000b20:	d123      	bne.n	8000b6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	08da      	lsrs	r2, r3, #3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	3208      	adds	r2, #8
 8000b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	220f      	movs	r2, #15
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4013      	ands	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	691a      	ldr	r2, [r3, #16]
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	f003 0307 	and.w	r3, r3, #7
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	08da      	lsrs	r2, r3, #3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3208      	adds	r2, #8
 8000b64:	6939      	ldr	r1, [r7, #16]
 8000b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	2203      	movs	r2, #3
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f003 0203 	and.w	r2, r3, #3
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f000 8094 	beq.w	8000cd4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bac:	4b52      	ldr	r3, [pc, #328]	; (8000cf8 <HAL_GPIO_Init+0x2c0>)
 8000bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb0:	4a51      	ldr	r2, [pc, #324]	; (8000cf8 <HAL_GPIO_Init+0x2c0>)
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	6613      	str	r3, [r2, #96]	; 0x60
 8000bb8:	4b4f      	ldr	r3, [pc, #316]	; (8000cf8 <HAL_GPIO_Init+0x2c0>)
 8000bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bc4:	4a4d      	ldr	r2, [pc, #308]	; (8000cfc <HAL_GPIO_Init+0x2c4>)
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	089b      	lsrs	r3, r3, #2
 8000bca:	3302      	adds	r3, #2
 8000bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	f003 0303 	and.w	r3, r3, #3
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	220f      	movs	r2, #15
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4013      	ands	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bee:	d00d      	beq.n	8000c0c <HAL_GPIO_Init+0x1d4>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a43      	ldr	r2, [pc, #268]	; (8000d00 <HAL_GPIO_Init+0x2c8>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d007      	beq.n	8000c08 <HAL_GPIO_Init+0x1d0>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a42      	ldr	r2, [pc, #264]	; (8000d04 <HAL_GPIO_Init+0x2cc>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d101      	bne.n	8000c04 <HAL_GPIO_Init+0x1cc>
 8000c00:	2302      	movs	r3, #2
 8000c02:	e004      	b.n	8000c0e <HAL_GPIO_Init+0x1d6>
 8000c04:	2307      	movs	r3, #7
 8000c06:	e002      	b.n	8000c0e <HAL_GPIO_Init+0x1d6>
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e000      	b.n	8000c0e <HAL_GPIO_Init+0x1d6>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	697a      	ldr	r2, [r7, #20]
 8000c10:	f002 0203 	and.w	r2, r2, #3
 8000c14:	0092      	lsls	r2, r2, #2
 8000c16:	4093      	lsls	r3, r2
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c1e:	4937      	ldr	r1, [pc, #220]	; (8000cfc <HAL_GPIO_Init+0x2c4>)
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	089b      	lsrs	r3, r3, #2
 8000c24:	3302      	adds	r3, #2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c2c:	4b36      	ldr	r3, [pc, #216]	; (8000d08 <HAL_GPIO_Init+0x2d0>)
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	43db      	mvns	r3, r3
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d003      	beq.n	8000c50 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c50:	4a2d      	ldr	r2, [pc, #180]	; (8000d08 <HAL_GPIO_Init+0x2d0>)
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c56:	4b2c      	ldr	r3, [pc, #176]	; (8000d08 <HAL_GPIO_Init+0x2d0>)
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	4013      	ands	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d003      	beq.n	8000c7a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c7a:	4a23      	ldr	r2, [pc, #140]	; (8000d08 <HAL_GPIO_Init+0x2d0>)
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c80:	4b21      	ldr	r3, [pc, #132]	; (8000d08 <HAL_GPIO_Init+0x2d0>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d003      	beq.n	8000ca4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ca4:	4a18      	ldr	r2, [pc, #96]	; (8000d08 <HAL_GPIO_Init+0x2d0>)
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000caa:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <HAL_GPIO_Init+0x2d0>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cce:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <HAL_GPIO_Init+0x2d0>)
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f47f aeaf 	bne.w	8000a48 <HAL_GPIO_Init+0x10>
  }
}
 8000cea:	bf00      	nop
 8000cec:	bf00      	nop
 8000cee:	371c      	adds	r7, #28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40010000 	.word	0x40010000
 8000d00:	48000400 	.word	0x48000400
 8000d04:	48000800 	.word	0x48000800
 8000d08:	40010400 	.word	0x40010400

08000d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	460b      	mov	r3, r1
 8000d16:	807b      	strh	r3, [r7, #2]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d1c:	787b      	ldrb	r3, [r7, #1]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d003      	beq.n	8000d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d22:	887a      	ldrh	r2, [r7, #2]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d28:	e002      	b.n	8000d30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d2a:	887a      	ldrh	r2, [r7, #2]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40007000 	.word	0x40007000

08000d58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d66:	d130      	bne.n	8000dca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d68:	4b23      	ldr	r3, [pc, #140]	; (8000df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d74:	d038      	beq.n	8000de8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d76:	4b20      	ldr	r3, [pc, #128]	; (8000df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d7e:	4a1e      	ldr	r2, [pc, #120]	; (8000df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d84:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d86:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2232      	movs	r2, #50	; 0x32
 8000d8c:	fb02 f303 	mul.w	r3, r2, r3
 8000d90:	4a1b      	ldr	r2, [pc, #108]	; (8000e00 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000d92:	fba2 2303 	umull	r2, r3, r2, r3
 8000d96:	0c9b      	lsrs	r3, r3, #18
 8000d98:	3301      	adds	r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d9c:	e002      	b.n	8000da4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	3b01      	subs	r3, #1
 8000da2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000da4:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000da6:	695b      	ldr	r3, [r3, #20]
 8000da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000db0:	d102      	bne.n	8000db8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1f2      	bne.n	8000d9e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000db8:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dba:	695b      	ldr	r3, [r3, #20]
 8000dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dc4:	d110      	bne.n	8000de8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e00f      	b.n	8000dea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dd6:	d007      	beq.n	8000de8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dd8:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000de0:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000de6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40007000 	.word	0x40007000
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	431bde83 	.word	0x431bde83

08000e04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d102      	bne.n	8000e18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	f000 bc02 	b.w	800161c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e18:	4b96      	ldr	r3, [pc, #600]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	f003 030c 	and.w	r3, r3, #12
 8000e20:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e22:	4b94      	ldr	r3, [pc, #592]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	f003 0303 	and.w	r3, r3, #3
 8000e2a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f003 0310 	and.w	r3, r3, #16
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	f000 80e4 	beq.w	8001002 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d007      	beq.n	8000e50 <HAL_RCC_OscConfig+0x4c>
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	2b0c      	cmp	r3, #12
 8000e44:	f040 808b 	bne.w	8000f5e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	f040 8087 	bne.w	8000f5e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e50:	4b88      	ldr	r3, [pc, #544]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d005      	beq.n	8000e68 <HAL_RCC_OscConfig+0x64>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d101      	bne.n	8000e68 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	e3d9      	b.n	800161c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6a1a      	ldr	r2, [r3, #32]
 8000e6c:	4b81      	ldr	r3, [pc, #516]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 0308 	and.w	r3, r3, #8
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d004      	beq.n	8000e82 <HAL_RCC_OscConfig+0x7e>
 8000e78:	4b7e      	ldr	r3, [pc, #504]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e80:	e005      	b.n	8000e8e <HAL_RCC_OscConfig+0x8a>
 8000e82:	4b7c      	ldr	r3, [pc, #496]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e88:	091b      	lsrs	r3, r3, #4
 8000e8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d223      	bcs.n	8000eda <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a1b      	ldr	r3, [r3, #32]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 fd54 	bl	8001944 <RCC_SetFlashLatencyFromMSIRange>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e3ba      	b.n	800161c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ea6:	4b73      	ldr	r3, [pc, #460]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a72      	ldr	r2, [pc, #456]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000eac:	f043 0308 	orr.w	r3, r3, #8
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	4b70      	ldr	r3, [pc, #448]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6a1b      	ldr	r3, [r3, #32]
 8000ebe:	496d      	ldr	r1, [pc, #436]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ec4:	4b6b      	ldr	r3, [pc, #428]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	69db      	ldr	r3, [r3, #28]
 8000ed0:	021b      	lsls	r3, r3, #8
 8000ed2:	4968      	ldr	r1, [pc, #416]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	604b      	str	r3, [r1, #4]
 8000ed8:	e025      	b.n	8000f26 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000eda:	4b66      	ldr	r3, [pc, #408]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a65      	ldr	r2, [pc, #404]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000ee0:	f043 0308 	orr.w	r3, r3, #8
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	4b63      	ldr	r3, [pc, #396]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6a1b      	ldr	r3, [r3, #32]
 8000ef2:	4960      	ldr	r1, [pc, #384]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ef8:	4b5e      	ldr	r3, [pc, #376]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	69db      	ldr	r3, [r3, #28]
 8000f04:	021b      	lsls	r3, r3, #8
 8000f06:	495b      	ldr	r1, [pc, #364]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d109      	bne.n	8000f26 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a1b      	ldr	r3, [r3, #32]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 fd14 	bl	8001944 <RCC_SetFlashLatencyFromMSIRange>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e37a      	b.n	800161c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f26:	f000 fc81 	bl	800182c <HAL_RCC_GetSysClockFreq>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	4b51      	ldr	r3, [pc, #324]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	091b      	lsrs	r3, r3, #4
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	4950      	ldr	r1, [pc, #320]	; (8001078 <HAL_RCC_OscConfig+0x274>)
 8000f38:	5ccb      	ldrb	r3, [r1, r3]
 8000f3a:	f003 031f 	and.w	r3, r3, #31
 8000f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f42:	4a4e      	ldr	r2, [pc, #312]	; (800107c <HAL_RCC_OscConfig+0x278>)
 8000f44:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f46:	4b4e      	ldr	r3, [pc, #312]	; (8001080 <HAL_RCC_OscConfig+0x27c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fc32 	bl	80007b4 <HAL_InitTick>
 8000f50:	4603      	mov	r3, r0
 8000f52:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d052      	beq.n	8001000 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	e35e      	b.n	800161c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d032      	beq.n	8000fcc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f66:	4b43      	ldr	r3, [pc, #268]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a42      	ldr	r2, [pc, #264]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f72:	f7ff fc6f 	bl	8000854 <HAL_GetTick>
 8000f76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f78:	e008      	b.n	8000f8c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f7a:	f7ff fc6b 	bl	8000854 <HAL_GetTick>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d901      	bls.n	8000f8c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e347      	b.n	800161c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f8c:	4b39      	ldr	r3, [pc, #228]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d0f0      	beq.n	8000f7a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f98:	4b36      	ldr	r3, [pc, #216]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a35      	ldr	r2, [pc, #212]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000f9e:	f043 0308 	orr.w	r3, r3, #8
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	4b33      	ldr	r3, [pc, #204]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a1b      	ldr	r3, [r3, #32]
 8000fb0:	4930      	ldr	r1, [pc, #192]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fb6:	4b2f      	ldr	r3, [pc, #188]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	021b      	lsls	r3, r3, #8
 8000fc4:	492b      	ldr	r1, [pc, #172]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	604b      	str	r3, [r1, #4]
 8000fca:	e01a      	b.n	8001002 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000fcc:	4b29      	ldr	r3, [pc, #164]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a28      	ldr	r2, [pc, #160]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000fd2:	f023 0301 	bic.w	r3, r3, #1
 8000fd6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fd8:	f7ff fc3c 	bl	8000854 <HAL_GetTick>
 8000fdc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fde:	e008      	b.n	8000ff2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fe0:	f7ff fc38 	bl	8000854 <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d901      	bls.n	8000ff2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e314      	b.n	800161c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ff2:	4b20      	ldr	r3, [pc, #128]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1f0      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x1dc>
 8000ffe:	e000      	b.n	8001002 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001000:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b00      	cmp	r3, #0
 800100c:	d073      	beq.n	80010f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	2b08      	cmp	r3, #8
 8001012:	d005      	beq.n	8001020 <HAL_RCC_OscConfig+0x21c>
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	2b0c      	cmp	r3, #12
 8001018:	d10e      	bne.n	8001038 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	2b03      	cmp	r3, #3
 800101e:	d10b      	bne.n	8001038 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001020:	4b14      	ldr	r3, [pc, #80]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d063      	beq.n	80010f4 <HAL_RCC_OscConfig+0x2f0>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d15f      	bne.n	80010f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e2f1      	b.n	800161c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001040:	d106      	bne.n	8001050 <HAL_RCC_OscConfig+0x24c>
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8001048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	e025      	b.n	800109c <HAL_RCC_OscConfig+0x298>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001058:	d114      	bne.n	8001084 <HAL_RCC_OscConfig+0x280>
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a05      	ldr	r2, [pc, #20]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8001060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	4b03      	ldr	r3, [pc, #12]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a02      	ldr	r2, [pc, #8]	; (8001074 <HAL_RCC_OscConfig+0x270>)
 800106c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	e013      	b.n	800109c <HAL_RCC_OscConfig+0x298>
 8001074:	40021000 	.word	0x40021000
 8001078:	08002584 	.word	0x08002584
 800107c:	20000000 	.word	0x20000000
 8001080:	20000004 	.word	0x20000004
 8001084:	4ba0      	ldr	r3, [pc, #640]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a9f      	ldr	r2, [pc, #636]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 800108a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	4b9d      	ldr	r3, [pc, #628]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a9c      	ldr	r2, [pc, #624]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 8001096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800109a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d013      	beq.n	80010cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a4:	f7ff fbd6 	bl	8000854 <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010ac:	f7ff fbd2 	bl	8000854 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b64      	cmp	r3, #100	; 0x64
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e2ae      	b.n	800161c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010be:	4b92      	ldr	r3, [pc, #584]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d0f0      	beq.n	80010ac <HAL_RCC_OscConfig+0x2a8>
 80010ca:	e014      	b.n	80010f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010cc:	f7ff fbc2 	bl	8000854 <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010d4:	f7ff fbbe 	bl	8000854 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b64      	cmp	r3, #100	; 0x64
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e29a      	b.n	800161c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010e6:	4b88      	ldr	r3, [pc, #544]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1f0      	bne.n	80010d4 <HAL_RCC_OscConfig+0x2d0>
 80010f2:	e000      	b.n	80010f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d060      	beq.n	80011c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	2b04      	cmp	r3, #4
 8001106:	d005      	beq.n	8001114 <HAL_RCC_OscConfig+0x310>
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	2b0c      	cmp	r3, #12
 800110c:	d119      	bne.n	8001142 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d116      	bne.n	8001142 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001114:	4b7c      	ldr	r3, [pc, #496]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800111c:	2b00      	cmp	r3, #0
 800111e:	d005      	beq.n	800112c <HAL_RCC_OscConfig+0x328>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d101      	bne.n	800112c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e277      	b.n	800161c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112c:	4b76      	ldr	r3, [pc, #472]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	061b      	lsls	r3, r3, #24
 800113a:	4973      	ldr	r1, [pc, #460]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 800113c:	4313      	orrs	r3, r2
 800113e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001140:	e040      	b.n	80011c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d023      	beq.n	8001192 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800114a:	4b6f      	ldr	r3, [pc, #444]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a6e      	ldr	r2, [pc, #440]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 8001150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001156:	f7ff fb7d 	bl	8000854 <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800115e:	f7ff fb79 	bl	8000854 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e255      	b.n	800161c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001170:	4b65      	ldr	r3, [pc, #404]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001178:	2b00      	cmp	r3, #0
 800117a:	d0f0      	beq.n	800115e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800117c:	4b62      	ldr	r3, [pc, #392]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	061b      	lsls	r3, r3, #24
 800118a:	495f      	ldr	r1, [pc, #380]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 800118c:	4313      	orrs	r3, r2
 800118e:	604b      	str	r3, [r1, #4]
 8001190:	e018      	b.n	80011c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001192:	4b5d      	ldr	r3, [pc, #372]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a5c      	ldr	r2, [pc, #368]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 8001198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800119c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800119e:	f7ff fb59 	bl	8000854 <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011a6:	f7ff fb55 	bl	8000854 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e231      	b.n	800161c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011b8:	4b53      	ldr	r3, [pc, #332]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1f0      	bne.n	80011a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0308 	and.w	r3, r3, #8
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d03c      	beq.n	800124a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d01c      	beq.n	8001212 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011d8:	4b4b      	ldr	r3, [pc, #300]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 80011da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011de:	4a4a      	ldr	r2, [pc, #296]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e8:	f7ff fb34 	bl	8000854 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011f0:	f7ff fb30 	bl	8000854 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e20c      	b.n	800161c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001202:	4b41      	ldr	r3, [pc, #260]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 8001204:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0ef      	beq.n	80011f0 <HAL_RCC_OscConfig+0x3ec>
 8001210:	e01b      	b.n	800124a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001212:	4b3d      	ldr	r3, [pc, #244]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 8001214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001218:	4a3b      	ldr	r2, [pc, #236]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 800121a:	f023 0301 	bic.w	r3, r3, #1
 800121e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001222:	f7ff fb17 	bl	8000854 <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800122a:	f7ff fb13 	bl	8000854 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e1ef      	b.n	800161c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800123c:	4b32      	ldr	r3, [pc, #200]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 800123e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1ef      	bne.n	800122a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 80a6 	beq.w	80013a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001258:	2300      	movs	r3, #0
 800125a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800125c:	4b2a      	ldr	r3, [pc, #168]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 800125e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d10d      	bne.n	8001284 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001268:	4b27      	ldr	r3, [pc, #156]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 800126a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126c:	4a26      	ldr	r2, [pc, #152]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 800126e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001272:	6593      	str	r3, [r2, #88]	; 0x58
 8001274:	4b24      	ldr	r3, [pc, #144]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 8001276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001280:	2301      	movs	r3, #1
 8001282:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001284:	4b21      	ldr	r3, [pc, #132]	; (800130c <HAL_RCC_OscConfig+0x508>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800128c:	2b00      	cmp	r3, #0
 800128e:	d118      	bne.n	80012c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001290:	4b1e      	ldr	r3, [pc, #120]	; (800130c <HAL_RCC_OscConfig+0x508>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a1d      	ldr	r2, [pc, #116]	; (800130c <HAL_RCC_OscConfig+0x508>)
 8001296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800129c:	f7ff fada 	bl	8000854 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012a4:	f7ff fad6 	bl	8000854 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e1b2      	b.n	800161c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <HAL_RCC_OscConfig+0x508>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f0      	beq.n	80012a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d108      	bne.n	80012dc <HAL_RCC_OscConfig+0x4d8>
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 80012cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012d0:	4a0d      	ldr	r2, [pc, #52]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012da:	e029      	b.n	8001330 <HAL_RCC_OscConfig+0x52c>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	2b05      	cmp	r3, #5
 80012e2:	d115      	bne.n	8001310 <HAL_RCC_OscConfig+0x50c>
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 80012e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ea:	4a07      	ldr	r2, [pc, #28]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 80012ec:	f043 0304 	orr.w	r3, r3, #4
 80012f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012f4:	4b04      	ldr	r3, [pc, #16]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 80012f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012fa:	4a03      	ldr	r2, [pc, #12]	; (8001308 <HAL_RCC_OscConfig+0x504>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001304:	e014      	b.n	8001330 <HAL_RCC_OscConfig+0x52c>
 8001306:	bf00      	nop
 8001308:	40021000 	.word	0x40021000
 800130c:	40007000 	.word	0x40007000
 8001310:	4b9a      	ldr	r3, [pc, #616]	; (800157c <HAL_RCC_OscConfig+0x778>)
 8001312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001316:	4a99      	ldr	r2, [pc, #612]	; (800157c <HAL_RCC_OscConfig+0x778>)
 8001318:	f023 0301 	bic.w	r3, r3, #1
 800131c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001320:	4b96      	ldr	r3, [pc, #600]	; (800157c <HAL_RCC_OscConfig+0x778>)
 8001322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001326:	4a95      	ldr	r2, [pc, #596]	; (800157c <HAL_RCC_OscConfig+0x778>)
 8001328:	f023 0304 	bic.w	r3, r3, #4
 800132c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d016      	beq.n	8001366 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001338:	f7ff fa8c 	bl	8000854 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800133e:	e00a      	b.n	8001356 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001340:	f7ff fa88 	bl	8000854 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	f241 3288 	movw	r2, #5000	; 0x1388
 800134e:	4293      	cmp	r3, r2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e162      	b.n	800161c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001356:	4b89      	ldr	r3, [pc, #548]	; (800157c <HAL_RCC_OscConfig+0x778>)
 8001358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0ed      	beq.n	8001340 <HAL_RCC_OscConfig+0x53c>
 8001364:	e015      	b.n	8001392 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001366:	f7ff fa75 	bl	8000854 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800136c:	e00a      	b.n	8001384 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800136e:	f7ff fa71 	bl	8000854 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	f241 3288 	movw	r2, #5000	; 0x1388
 800137c:	4293      	cmp	r3, r2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e14b      	b.n	800161c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001384:	4b7d      	ldr	r3, [pc, #500]	; (800157c <HAL_RCC_OscConfig+0x778>)
 8001386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1ed      	bne.n	800136e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001392:	7ffb      	ldrb	r3, [r7, #31]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d105      	bne.n	80013a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001398:	4b78      	ldr	r3, [pc, #480]	; (800157c <HAL_RCC_OscConfig+0x778>)
 800139a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139c:	4a77      	ldr	r2, [pc, #476]	; (800157c <HAL_RCC_OscConfig+0x778>)
 800139e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0320 	and.w	r3, r3, #32
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d03c      	beq.n	800142a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d01c      	beq.n	80013f2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80013b8:	4b70      	ldr	r3, [pc, #448]	; (800157c <HAL_RCC_OscConfig+0x778>)
 80013ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013be:	4a6f      	ldr	r2, [pc, #444]	; (800157c <HAL_RCC_OscConfig+0x778>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c8:	f7ff fa44 	bl	8000854 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013d0:	f7ff fa40 	bl	8000854 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e11c      	b.n	800161c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013e2:	4b66      	ldr	r3, [pc, #408]	; (800157c <HAL_RCC_OscConfig+0x778>)
 80013e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0ef      	beq.n	80013d0 <HAL_RCC_OscConfig+0x5cc>
 80013f0:	e01b      	b.n	800142a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80013f2:	4b62      	ldr	r3, [pc, #392]	; (800157c <HAL_RCC_OscConfig+0x778>)
 80013f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013f8:	4a60      	ldr	r2, [pc, #384]	; (800157c <HAL_RCC_OscConfig+0x778>)
 80013fa:	f023 0301 	bic.w	r3, r3, #1
 80013fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001402:	f7ff fa27 	bl	8000854 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800140a:	f7ff fa23 	bl	8000854 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e0ff      	b.n	800161c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800141c:	4b57      	ldr	r3, [pc, #348]	; (800157c <HAL_RCC_OscConfig+0x778>)
 800141e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1ef      	bne.n	800140a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 80f3 	beq.w	800161a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001438:	2b02      	cmp	r3, #2
 800143a:	f040 80c9 	bne.w	80015d0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800143e:	4b4f      	ldr	r3, [pc, #316]	; (800157c <HAL_RCC_OscConfig+0x778>)
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	f003 0203 	and.w	r2, r3, #3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144e:	429a      	cmp	r2, r3
 8001450:	d12c      	bne.n	80014ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	3b01      	subs	r3, #1
 800145e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001460:	429a      	cmp	r2, r3
 8001462:	d123      	bne.n	80014ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800146e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001470:	429a      	cmp	r2, r3
 8001472:	d11b      	bne.n	80014ac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800147e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001480:	429a      	cmp	r2, r3
 8001482:	d113      	bne.n	80014ac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800148e:	085b      	lsrs	r3, r3, #1
 8001490:	3b01      	subs	r3, #1
 8001492:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001494:	429a      	cmp	r2, r3
 8001496:	d109      	bne.n	80014ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	085b      	lsrs	r3, r3, #1
 80014a4:	3b01      	subs	r3, #1
 80014a6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d06b      	beq.n	8001584 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	2b0c      	cmp	r3, #12
 80014b0:	d062      	beq.n	8001578 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80014b2:	4b32      	ldr	r3, [pc, #200]	; (800157c <HAL_RCC_OscConfig+0x778>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e0ac      	b.n	800161c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80014c2:	4b2e      	ldr	r3, [pc, #184]	; (800157c <HAL_RCC_OscConfig+0x778>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a2d      	ldr	r2, [pc, #180]	; (800157c <HAL_RCC_OscConfig+0x778>)
 80014c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014ce:	f7ff f9c1 	bl	8000854 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d6:	f7ff f9bd 	bl	8000854 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e099      	b.n	800161c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014e8:	4b24      	ldr	r3, [pc, #144]	; (800157c <HAL_RCC_OscConfig+0x778>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f0      	bne.n	80014d6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014f4:	4b21      	ldr	r3, [pc, #132]	; (800157c <HAL_RCC_OscConfig+0x778>)
 80014f6:	68da      	ldr	r2, [r3, #12]
 80014f8:	4b21      	ldr	r3, [pc, #132]	; (8001580 <HAL_RCC_OscConfig+0x77c>)
 80014fa:	4013      	ands	r3, r2
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001504:	3a01      	subs	r2, #1
 8001506:	0112      	lsls	r2, r2, #4
 8001508:	4311      	orrs	r1, r2
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800150e:	0212      	lsls	r2, r2, #8
 8001510:	4311      	orrs	r1, r2
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001516:	0852      	lsrs	r2, r2, #1
 8001518:	3a01      	subs	r2, #1
 800151a:	0552      	lsls	r2, r2, #21
 800151c:	4311      	orrs	r1, r2
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001522:	0852      	lsrs	r2, r2, #1
 8001524:	3a01      	subs	r2, #1
 8001526:	0652      	lsls	r2, r2, #25
 8001528:	4311      	orrs	r1, r2
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800152e:	06d2      	lsls	r2, r2, #27
 8001530:	430a      	orrs	r2, r1
 8001532:	4912      	ldr	r1, [pc, #72]	; (800157c <HAL_RCC_OscConfig+0x778>)
 8001534:	4313      	orrs	r3, r2
 8001536:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001538:	4b10      	ldr	r3, [pc, #64]	; (800157c <HAL_RCC_OscConfig+0x778>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0f      	ldr	r2, [pc, #60]	; (800157c <HAL_RCC_OscConfig+0x778>)
 800153e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001542:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001544:	4b0d      	ldr	r3, [pc, #52]	; (800157c <HAL_RCC_OscConfig+0x778>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	4a0c      	ldr	r2, [pc, #48]	; (800157c <HAL_RCC_OscConfig+0x778>)
 800154a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800154e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001550:	f7ff f980 	bl	8000854 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001558:	f7ff f97c 	bl	8000854 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e058      	b.n	800161c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <HAL_RCC_OscConfig+0x778>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0f0      	beq.n	8001558 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001576:	e050      	b.n	800161a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e04f      	b.n	800161c <HAL_RCC_OscConfig+0x818>
 800157c:	40021000 	.word	0x40021000
 8001580:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001584:	4b27      	ldr	r3, [pc, #156]	; (8001624 <HAL_RCC_OscConfig+0x820>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d144      	bne.n	800161a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001590:	4b24      	ldr	r3, [pc, #144]	; (8001624 <HAL_RCC_OscConfig+0x820>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a23      	ldr	r2, [pc, #140]	; (8001624 <HAL_RCC_OscConfig+0x820>)
 8001596:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800159a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800159c:	4b21      	ldr	r3, [pc, #132]	; (8001624 <HAL_RCC_OscConfig+0x820>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	4a20      	ldr	r2, [pc, #128]	; (8001624 <HAL_RCC_OscConfig+0x820>)
 80015a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80015a8:	f7ff f954 	bl	8000854 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b0:	f7ff f950 	bl	8000854 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e02c      	b.n	800161c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015c2:	4b18      	ldr	r3, [pc, #96]	; (8001624 <HAL_RCC_OscConfig+0x820>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCC_OscConfig+0x7ac>
 80015ce:	e024      	b.n	800161a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	2b0c      	cmp	r3, #12
 80015d4:	d01f      	beq.n	8001616 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <HAL_RCC_OscConfig+0x820>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a12      	ldr	r2, [pc, #72]	; (8001624 <HAL_RCC_OscConfig+0x820>)
 80015dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e2:	f7ff f937 	bl	8000854 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ea:	f7ff f933 	bl	8000854 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e00f      	b.n	800161c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015fc:	4b09      	ldr	r3, [pc, #36]	; (8001624 <HAL_RCC_OscConfig+0x820>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1f0      	bne.n	80015ea <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_RCC_OscConfig+0x820>)
 800160a:	68da      	ldr	r2, [r3, #12]
 800160c:	4905      	ldr	r1, [pc, #20]	; (8001624 <HAL_RCC_OscConfig+0x820>)
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_RCC_OscConfig+0x824>)
 8001610:	4013      	ands	r3, r2
 8001612:	60cb      	str	r3, [r1, #12]
 8001614:	e001      	b.n	800161a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3720      	adds	r7, #32
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40021000 	.word	0x40021000
 8001628:	feeefffc 	.word	0xfeeefffc

0800162c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e0e7      	b.n	8001810 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001640:	4b75      	ldr	r3, [pc, #468]	; (8001818 <HAL_RCC_ClockConfig+0x1ec>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	429a      	cmp	r2, r3
 800164c:	d910      	bls.n	8001670 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164e:	4b72      	ldr	r3, [pc, #456]	; (8001818 <HAL_RCC_ClockConfig+0x1ec>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f023 0207 	bic.w	r2, r3, #7
 8001656:	4970      	ldr	r1, [pc, #448]	; (8001818 <HAL_RCC_ClockConfig+0x1ec>)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	4313      	orrs	r3, r2
 800165c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800165e:	4b6e      	ldr	r3, [pc, #440]	; (8001818 <HAL_RCC_ClockConfig+0x1ec>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d001      	beq.n	8001670 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e0cf      	b.n	8001810 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d010      	beq.n	800169e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	4b66      	ldr	r3, [pc, #408]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001688:	429a      	cmp	r2, r3
 800168a:	d908      	bls.n	800169e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800168c:	4b63      	ldr	r3, [pc, #396]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	4960      	ldr	r1, [pc, #384]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 800169a:	4313      	orrs	r3, r2
 800169c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d04c      	beq.n	8001744 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	d107      	bne.n	80016c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016b2:	4b5a      	ldr	r3, [pc, #360]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d121      	bne.n	8001702 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e0a6      	b.n	8001810 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d107      	bne.n	80016da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ca:	4b54      	ldr	r3, [pc, #336]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d115      	bne.n	8001702 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e09a      	b.n	8001810 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d107      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016e2:	4b4e      	ldr	r3, [pc, #312]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d109      	bne.n	8001702 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e08e      	b.n	8001810 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016f2:	4b4a      	ldr	r3, [pc, #296]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e086      	b.n	8001810 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001702:	4b46      	ldr	r3, [pc, #280]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f023 0203 	bic.w	r2, r3, #3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	4943      	ldr	r1, [pc, #268]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 8001710:	4313      	orrs	r3, r2
 8001712:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001714:	f7ff f89e 	bl	8000854 <HAL_GetTick>
 8001718:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171a:	e00a      	b.n	8001732 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800171c:	f7ff f89a 	bl	8000854 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	f241 3288 	movw	r2, #5000	; 0x1388
 800172a:	4293      	cmp	r3, r2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e06e      	b.n	8001810 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001732:	4b3a      	ldr	r3, [pc, #232]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 020c 	and.w	r2, r3, #12
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	429a      	cmp	r2, r3
 8001742:	d1eb      	bne.n	800171c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d010      	beq.n	8001772 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	4b31      	ldr	r3, [pc, #196]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800175c:	429a      	cmp	r2, r3
 800175e:	d208      	bcs.n	8001772 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001760:	4b2e      	ldr	r3, [pc, #184]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	492b      	ldr	r1, [pc, #172]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 800176e:	4313      	orrs	r3, r2
 8001770:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001772:	4b29      	ldr	r3, [pc, #164]	; (8001818 <HAL_RCC_ClockConfig+0x1ec>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	429a      	cmp	r2, r3
 800177e:	d210      	bcs.n	80017a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001780:	4b25      	ldr	r3, [pc, #148]	; (8001818 <HAL_RCC_ClockConfig+0x1ec>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f023 0207 	bic.w	r2, r3, #7
 8001788:	4923      	ldr	r1, [pc, #140]	; (8001818 <HAL_RCC_ClockConfig+0x1ec>)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	4313      	orrs	r3, r2
 800178e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001790:	4b21      	ldr	r3, [pc, #132]	; (8001818 <HAL_RCC_ClockConfig+0x1ec>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d001      	beq.n	80017a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e036      	b.n	8001810 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d008      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017ae:	4b1b      	ldr	r3, [pc, #108]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	4918      	ldr	r1, [pc, #96]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0308 	and.w	r3, r3, #8
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d009      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	4910      	ldr	r1, [pc, #64]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017e0:	f000 f824 	bl	800182c <HAL_RCC_GetSysClockFreq>
 80017e4:	4602      	mov	r2, r0
 80017e6:	4b0d      	ldr	r3, [pc, #52]	; (800181c <HAL_RCC_ClockConfig+0x1f0>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	091b      	lsrs	r3, r3, #4
 80017ec:	f003 030f 	and.w	r3, r3, #15
 80017f0:	490b      	ldr	r1, [pc, #44]	; (8001820 <HAL_RCC_ClockConfig+0x1f4>)
 80017f2:	5ccb      	ldrb	r3, [r1, r3]
 80017f4:	f003 031f 	and.w	r3, r3, #31
 80017f8:	fa22 f303 	lsr.w	r3, r2, r3
 80017fc:	4a09      	ldr	r2, [pc, #36]	; (8001824 <HAL_RCC_ClockConfig+0x1f8>)
 80017fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_RCC_ClockConfig+0x1fc>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe ffd5 	bl	80007b4 <HAL_InitTick>
 800180a:	4603      	mov	r3, r0
 800180c:	72fb      	strb	r3, [r7, #11]

  return status;
 800180e:	7afb      	ldrb	r3, [r7, #11]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40022000 	.word	0x40022000
 800181c:	40021000 	.word	0x40021000
 8001820:	08002584 	.word	0x08002584
 8001824:	20000000 	.word	0x20000000
 8001828:	20000004 	.word	0x20000004

0800182c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800182c:	b480      	push	{r7}
 800182e:	b089      	sub	sp, #36	; 0x24
 8001830:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
 8001836:	2300      	movs	r3, #0
 8001838:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800183a:	4b3e      	ldr	r3, [pc, #248]	; (8001934 <HAL_RCC_GetSysClockFreq+0x108>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001844:	4b3b      	ldr	r3, [pc, #236]	; (8001934 <HAL_RCC_GetSysClockFreq+0x108>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_RCC_GetSysClockFreq+0x34>
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	2b0c      	cmp	r3, #12
 8001858:	d121      	bne.n	800189e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d11e      	bne.n	800189e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001860:	4b34      	ldr	r3, [pc, #208]	; (8001934 <HAL_RCC_GetSysClockFreq+0x108>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	2b00      	cmp	r3, #0
 800186a:	d107      	bne.n	800187c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800186c:	4b31      	ldr	r3, [pc, #196]	; (8001934 <HAL_RCC_GetSysClockFreq+0x108>)
 800186e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001872:	0a1b      	lsrs	r3, r3, #8
 8001874:	f003 030f 	and.w	r3, r3, #15
 8001878:	61fb      	str	r3, [r7, #28]
 800187a:	e005      	b.n	8001888 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800187c:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <HAL_RCC_GetSysClockFreq+0x108>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001888:	4a2b      	ldr	r2, [pc, #172]	; (8001938 <HAL_RCC_GetSysClockFreq+0x10c>)
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001890:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10d      	bne.n	80018b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800189c:	e00a      	b.n	80018b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	2b04      	cmp	r3, #4
 80018a2:	d102      	bne.n	80018aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80018a4:	4b25      	ldr	r3, [pc, #148]	; (800193c <HAL_RCC_GetSysClockFreq+0x110>)
 80018a6:	61bb      	str	r3, [r7, #24]
 80018a8:	e004      	b.n	80018b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	d101      	bne.n	80018b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018b0:	4b23      	ldr	r3, [pc, #140]	; (8001940 <HAL_RCC_GetSysClockFreq+0x114>)
 80018b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	2b0c      	cmp	r3, #12
 80018b8:	d134      	bne.n	8001924 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018ba:	4b1e      	ldr	r3, [pc, #120]	; (8001934 <HAL_RCC_GetSysClockFreq+0x108>)
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d003      	beq.n	80018d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d003      	beq.n	80018d8 <HAL_RCC_GetSysClockFreq+0xac>
 80018d0:	e005      	b.n	80018de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80018d2:	4b1a      	ldr	r3, [pc, #104]	; (800193c <HAL_RCC_GetSysClockFreq+0x110>)
 80018d4:	617b      	str	r3, [r7, #20]
      break;
 80018d6:	e005      	b.n	80018e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80018d8:	4b19      	ldr	r3, [pc, #100]	; (8001940 <HAL_RCC_GetSysClockFreq+0x114>)
 80018da:	617b      	str	r3, [r7, #20]
      break;
 80018dc:	e002      	b.n	80018e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	617b      	str	r3, [r7, #20]
      break;
 80018e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018e4:	4b13      	ldr	r3, [pc, #76]	; (8001934 <HAL_RCC_GetSysClockFreq+0x108>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	091b      	lsrs	r3, r3, #4
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	3301      	adds	r3, #1
 80018f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <HAL_RCC_GetSysClockFreq+0x108>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	0a1b      	lsrs	r3, r3, #8
 80018f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	fb03 f202 	mul.w	r2, r3, r2
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	fbb2 f3f3 	udiv	r3, r2, r3
 8001908:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <HAL_RCC_GetSysClockFreq+0x108>)
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	0e5b      	lsrs	r3, r3, #25
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	3301      	adds	r3, #1
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001922:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001924:	69bb      	ldr	r3, [r7, #24]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3724      	adds	r7, #36	; 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000
 8001938:	08002594 	.word	0x08002594
 800193c:	00f42400 	.word	0x00f42400
 8001940:	007a1200 	.word	0x007a1200

08001944 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001950:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800195c:	f7ff f9ee 	bl	8000d3c <HAL_PWREx_GetVoltageRange>
 8001960:	6178      	str	r0, [r7, #20]
 8001962:	e014      	b.n	800198e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001964:	4b25      	ldr	r3, [pc, #148]	; (80019fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001968:	4a24      	ldr	r2, [pc, #144]	; (80019fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800196a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196e:	6593      	str	r3, [r2, #88]	; 0x58
 8001970:	4b22      	ldr	r3, [pc, #136]	; (80019fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800197c:	f7ff f9de 	bl	8000d3c <HAL_PWREx_GetVoltageRange>
 8001980:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001982:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001986:	4a1d      	ldr	r2, [pc, #116]	; (80019fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001988:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800198c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001994:	d10b      	bne.n	80019ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b80      	cmp	r3, #128	; 0x80
 800199a:	d919      	bls.n	80019d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2ba0      	cmp	r3, #160	; 0xa0
 80019a0:	d902      	bls.n	80019a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019a2:	2302      	movs	r3, #2
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	e013      	b.n	80019d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019a8:	2301      	movs	r3, #1
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	e010      	b.n	80019d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b80      	cmp	r3, #128	; 0x80
 80019b2:	d902      	bls.n	80019ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80019b4:	2303      	movs	r3, #3
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	e00a      	b.n	80019d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b80      	cmp	r3, #128	; 0x80
 80019be:	d102      	bne.n	80019c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019c0:	2302      	movs	r3, #2
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	e004      	b.n	80019d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b70      	cmp	r3, #112	; 0x70
 80019ca:	d101      	bne.n	80019d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019cc:	2301      	movs	r3, #1
 80019ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f023 0207 	bic.w	r2, r3, #7
 80019d8:	4909      	ldr	r1, [pc, #36]	; (8001a00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	4313      	orrs	r3, r2
 80019de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80019e0:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d001      	beq.n	80019f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e000      	b.n	80019f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40022000 	.word	0x40022000

08001a04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e095      	b.n	8001b42 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d108      	bne.n	8001a30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a26:	d009      	beq.n	8001a3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	61da      	str	r2, [r3, #28]
 8001a2e:	e005      	b.n	8001a3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d106      	bne.n	8001a5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7fe fdec 	bl	8000634 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2202      	movs	r2, #2
 8001a60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001a7c:	d902      	bls.n	8001a84 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	e002      	b.n	8001a8a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a88:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001a92:	d007      	beq.n	8001aa4 <HAL_SPI_Init+0xa0>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001a9c:	d002      	beq.n	8001aa4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001adc:	431a      	orrs	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae6:	ea42 0103 	orr.w	r1, r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	0c1b      	lsrs	r3, r3, #16
 8001b00:	f003 0204 	and.w	r2, r3, #4
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	f003 0310 	and.w	r3, r3, #16
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001b20:	ea42 0103 	orr.w	r1, r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b088      	sub	sp, #32
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	603b      	str	r3, [r7, #0]
 8001b56:	4613      	mov	r3, r2
 8001b58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <HAL_SPI_Transmit+0x22>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e158      	b.n	8001e1e <HAL_SPI_Transmit+0x2d4>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b74:	f7fe fe6e 	bl	8000854 <HAL_GetTick>
 8001b78:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001b7a:	88fb      	ldrh	r3, [r7, #6]
 8001b7c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d002      	beq.n	8001b90 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b8e:	e13d      	b.n	8001e0c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d002      	beq.n	8001b9c <HAL_SPI_Transmit+0x52>
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d102      	bne.n	8001ba2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ba0:	e134      	b.n	8001e0c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	88fa      	ldrh	r2, [r7, #6]
 8001bba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	88fa      	ldrh	r2, [r7, #6]
 8001bc0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bec:	d10f      	bne.n	8001c0e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bfc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c18:	2b40      	cmp	r3, #64	; 0x40
 8001c1a:	d007      	beq.n	8001c2c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001c34:	d94b      	bls.n	8001cce <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <HAL_SPI_Transmit+0xfa>
 8001c3e:	8afb      	ldrh	r3, [r7, #22]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d13e      	bne.n	8001cc2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c48:	881a      	ldrh	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c54:	1c9a      	adds	r2, r3, #2
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c68:	e02b      	b.n	8001cc2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d112      	bne.n	8001c9e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7c:	881a      	ldrh	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c88:	1c9a      	adds	r2, r3, #2
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	3b01      	subs	r3, #1
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c9c:	e011      	b.n	8001cc2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c9e:	f7fe fdd9 	bl	8000854 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d803      	bhi.n	8001cb6 <HAL_SPI_Transmit+0x16c>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb4:	d102      	bne.n	8001cbc <HAL_SPI_Transmit+0x172>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d102      	bne.n	8001cc2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001cc0:	e0a4      	b.n	8001e0c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1ce      	bne.n	8001c6a <HAL_SPI_Transmit+0x120>
 8001ccc:	e07c      	b.n	8001dc8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <HAL_SPI_Transmit+0x192>
 8001cd6:	8afb      	ldrh	r3, [r7, #22]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d170      	bne.n	8001dbe <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d912      	bls.n	8001d0c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cea:	881a      	ldrh	r2, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf6:	1c9a      	adds	r2, r3, #2
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	3b02      	subs	r3, #2
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d0a:	e058      	b.n	8001dbe <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	330c      	adds	r3, #12
 8001d16:	7812      	ldrb	r2, [r2, #0]
 8001d18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1e:	1c5a      	adds	r2, r3, #1
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001d32:	e044      	b.n	8001dbe <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d12b      	bne.n	8001d9a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d912      	bls.n	8001d72 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d50:	881a      	ldrh	r2, [r3, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5c:	1c9a      	adds	r2, r3, #2
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	3b02      	subs	r3, #2
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d70:	e025      	b.n	8001dbe <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	330c      	adds	r3, #12
 8001d7c:	7812      	ldrb	r2, [r2, #0]
 8001d7e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d84:	1c5a      	adds	r2, r3, #1
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	3b01      	subs	r3, #1
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d98:	e011      	b.n	8001dbe <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d9a:	f7fe fd5b 	bl	8000854 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d803      	bhi.n	8001db2 <HAL_SPI_Transmit+0x268>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db0:	d102      	bne.n	8001db8 <HAL_SPI_Transmit+0x26e>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d102      	bne.n	8001dbe <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001dbc:	e026      	b.n	8001e0c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1b5      	bne.n	8001d34 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	6839      	ldr	r1, [r7, #0]
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 fb5b 	bl	8002488 <SPI_EndRxTxTransaction>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d002      	beq.n	8001dde <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10a      	bne.n	8001dfc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d002      	beq.n	8001e0a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	77fb      	strb	r3, [r7, #31]
 8001e08:	e000      	b.n	8001e0c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8001e0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001e1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3720      	adds	r7, #32
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b08a      	sub	sp, #40	; 0x28
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
 8001e32:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001e34:	2301      	movs	r3, #1
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_SPI_TransmitReceive+0x26>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e1fb      	b.n	8002244 <HAL_SPI_TransmitReceive+0x41e>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e54:	f7fe fcfe 	bl	8000854 <HAL_GetTick>
 8001e58:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001e60:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001e68:	887b      	ldrh	r3, [r7, #2]
 8001e6a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8001e6c:	887b      	ldrh	r3, [r7, #2]
 8001e6e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001e70:	7efb      	ldrb	r3, [r7, #27]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d00e      	beq.n	8001e94 <HAL_SPI_TransmitReceive+0x6e>
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e7c:	d106      	bne.n	8001e8c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d102      	bne.n	8001e8c <HAL_SPI_TransmitReceive+0x66>
 8001e86:	7efb      	ldrb	r3, [r7, #27]
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d003      	beq.n	8001e94 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001e92:	e1cd      	b.n	8002230 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d005      	beq.n	8001ea6 <HAL_SPI_TransmitReceive+0x80>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <HAL_SPI_TransmitReceive+0x80>
 8001ea0:	887b      	ldrh	r3, [r7, #2]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d103      	bne.n	8001eae <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001eac:	e1c0      	b.n	8002230 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	d003      	beq.n	8001ec2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2205      	movs	r2, #5
 8001ebe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	887a      	ldrh	r2, [r7, #2]
 8001ed2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	887a      	ldrh	r2, [r7, #2]
 8001eda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	887a      	ldrh	r2, [r7, #2]
 8001ee8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	887a      	ldrh	r2, [r7, #2]
 8001eee:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f04:	d802      	bhi.n	8001f0c <HAL_SPI_TransmitReceive+0xe6>
 8001f06:	8a3b      	ldrh	r3, [r7, #16]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d908      	bls.n	8001f1e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	e007      	b.n	8001f2e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f2c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f38:	2b40      	cmp	r3, #64	; 0x40
 8001f3a:	d007      	beq.n	8001f4c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f54:	d97c      	bls.n	8002050 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <HAL_SPI_TransmitReceive+0x13e>
 8001f5e:	8a7b      	ldrh	r3, [r7, #18]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d169      	bne.n	8002038 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f68:	881a      	ldrh	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f74:	1c9a      	adds	r2, r3, #2
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f88:	e056      	b.n	8002038 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d11b      	bne.n	8001fd0 <HAL_SPI_TransmitReceive+0x1aa>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d016      	beq.n	8001fd0 <HAL_SPI_TransmitReceive+0x1aa>
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d113      	bne.n	8001fd0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fac:	881a      	ldrh	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb8:	1c9a      	adds	r2, r3, #2
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d11c      	bne.n	8002018 <HAL_SPI_TransmitReceive+0x1f2>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d016      	beq.n	8002018 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68da      	ldr	r2, [r3, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	b292      	uxth	r2, r2
 8001ff6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	1c9a      	adds	r2, r3, #2
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002008:	b29b      	uxth	r3, r3
 800200a:	3b01      	subs	r3, #1
 800200c:	b29a      	uxth	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002014:	2301      	movs	r3, #1
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002018:	f7fe fc1c 	bl	8000854 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002024:	429a      	cmp	r2, r3
 8002026:	d807      	bhi.n	8002038 <HAL_SPI_TransmitReceive+0x212>
 8002028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202e:	d003      	beq.n	8002038 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002036:	e0fb      	b.n	8002230 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800203c:	b29b      	uxth	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1a3      	bne.n	8001f8a <HAL_SPI_TransmitReceive+0x164>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002048:	b29b      	uxth	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d19d      	bne.n	8001f8a <HAL_SPI_TransmitReceive+0x164>
 800204e:	e0df      	b.n	8002210 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_SPI_TransmitReceive+0x23a>
 8002058:	8a7b      	ldrh	r3, [r7, #18]
 800205a:	2b01      	cmp	r3, #1
 800205c:	f040 80cb 	bne.w	80021f6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002064:	b29b      	uxth	r3, r3
 8002066:	2b01      	cmp	r3, #1
 8002068:	d912      	bls.n	8002090 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206e:	881a      	ldrh	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207a:	1c9a      	adds	r2, r3, #2
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002084:	b29b      	uxth	r3, r3
 8002086:	3b02      	subs	r3, #2
 8002088:	b29a      	uxth	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800208e:	e0b2      	b.n	80021f6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	330c      	adds	r3, #12
 800209a:	7812      	ldrb	r2, [r2, #0]
 800209c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a2:	1c5a      	adds	r2, r3, #1
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	3b01      	subs	r3, #1
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020b6:	e09e      	b.n	80021f6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d134      	bne.n	8002130 <HAL_SPI_TransmitReceive+0x30a>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d02f      	beq.n	8002130 <HAL_SPI_TransmitReceive+0x30a>
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d12c      	bne.n	8002130 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020da:	b29b      	uxth	r3, r3
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d912      	bls.n	8002106 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e4:	881a      	ldrh	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f0:	1c9a      	adds	r2, r3, #2
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3b02      	subs	r3, #2
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002104:	e012      	b.n	800212c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	330c      	adds	r3, #12
 8002110:	7812      	ldrb	r2, [r2, #0]
 8002112:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002122:	b29b      	uxth	r3, r3
 8002124:	3b01      	subs	r3, #1
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b01      	cmp	r3, #1
 800213c:	d148      	bne.n	80021d0 <HAL_SPI_TransmitReceive+0x3aa>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002144:	b29b      	uxth	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d042      	beq.n	80021d0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002150:	b29b      	uxth	r3, r3
 8002152:	2b01      	cmp	r3, #1
 8002154:	d923      	bls.n	800219e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	b292      	uxth	r2, r2
 8002162:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	1c9a      	adds	r2, r3, #2
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002174:	b29b      	uxth	r3, r3
 8002176:	3b02      	subs	r3, #2
 8002178:	b29a      	uxth	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002186:	b29b      	uxth	r3, r3
 8002188:	2b01      	cmp	r3, #1
 800218a:	d81f      	bhi.n	80021cc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	e016      	b.n	80021cc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f103 020c 	add.w	r2, r3, #12
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	7812      	ldrb	r2, [r2, #0]
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b4:	1c5a      	adds	r2, r3, #1
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021cc:	2301      	movs	r3, #1
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80021d0:	f7fe fb40 	bl	8000854 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021dc:	429a      	cmp	r2, r3
 80021de:	d803      	bhi.n	80021e8 <HAL_SPI_TransmitReceive+0x3c2>
 80021e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e6:	d102      	bne.n	80021ee <HAL_SPI_TransmitReceive+0x3c8>
 80021e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d103      	bne.n	80021f6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80021f4:	e01c      	b.n	8002230 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f47f af5b 	bne.w	80020b8 <HAL_SPI_TransmitReceive+0x292>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002208:	b29b      	uxth	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	f47f af54 	bne.w	80020b8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002210:	69fa      	ldr	r2, [r7, #28]
 8002212:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f000 f937 	bl	8002488 <SPI_EndRxTxTransaction>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d006      	beq.n	800222e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2220      	movs	r2, #32
 800222a:	661a      	str	r2, [r3, #96]	; 0x60
 800222c:	e000      	b.n	8002230 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800222e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002240:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002244:	4618      	mov	r0, r3
 8002246:	3728      	adds	r7, #40	; 0x28
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b088      	sub	sp, #32
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	603b      	str	r3, [r7, #0]
 8002258:	4613      	mov	r3, r2
 800225a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800225c:	f7fe fafa 	bl	8000854 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002264:	1a9b      	subs	r3, r3, r2
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	4413      	add	r3, r2
 800226a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800226c:	f7fe faf2 	bl	8000854 <HAL_GetTick>
 8002270:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002272:	4b39      	ldr	r3, [pc, #228]	; (8002358 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	015b      	lsls	r3, r3, #5
 8002278:	0d1b      	lsrs	r3, r3, #20
 800227a:	69fa      	ldr	r2, [r7, #28]
 800227c:	fb02 f303 	mul.w	r3, r2, r3
 8002280:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002282:	e054      	b.n	800232e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228a:	d050      	beq.n	800232e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800228c:	f7fe fae2 	bl	8000854 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	69fa      	ldr	r2, [r7, #28]
 8002298:	429a      	cmp	r2, r3
 800229a:	d902      	bls.n	80022a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d13d      	bne.n	800231e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80022b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022ba:	d111      	bne.n	80022e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022c4:	d004      	beq.n	80022d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ce:	d107      	bne.n	80022e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022e8:	d10f      	bne.n	800230a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002308:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e017      	b.n	800234e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	3b01      	subs	r3, #1
 800232c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	4013      	ands	r3, r2
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	429a      	cmp	r2, r3
 800233c:	bf0c      	ite	eq
 800233e:	2301      	moveq	r3, #1
 8002340:	2300      	movne	r3, #0
 8002342:	b2db      	uxtb	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	429a      	cmp	r2, r3
 800234a:	d19b      	bne.n	8002284 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3720      	adds	r7, #32
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000000 	.word	0x20000000

0800235c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08a      	sub	sp, #40	; 0x28
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
 8002368:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800236e:	f7fe fa71 	bl	8000854 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002376:	1a9b      	subs	r3, r3, r2
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	4413      	add	r3, r2
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800237e:	f7fe fa69 	bl	8000854 <HAL_GetTick>
 8002382:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	330c      	adds	r3, #12
 800238a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800238c:	4b3d      	ldr	r3, [pc, #244]	; (8002484 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	00da      	lsls	r2, r3, #3
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	0d1b      	lsrs	r3, r3, #20
 800239c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800239e:	fb02 f303 	mul.w	r3, r2, r3
 80023a2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80023a4:	e060      	b.n	8002468 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80023ac:	d107      	bne.n	80023be <SPI_WaitFifoStateUntilTimeout+0x62>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d104      	bne.n	80023be <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80023bc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c4:	d050      	beq.n	8002468 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80023c6:	f7fe fa45 	bl	8000854 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	6a3b      	ldr	r3, [r7, #32]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d902      	bls.n	80023dc <SPI_WaitFifoStateUntilTimeout+0x80>
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d13d      	bne.n	8002458 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80023ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023f4:	d111      	bne.n	800241a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023fe:	d004      	beq.n	800240a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002408:	d107      	bne.n	800241a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002418:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002422:	d10f      	bne.n	8002444 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002442:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e010      	b.n	800247a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800245e:	2300      	movs	r3, #0
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	3b01      	subs	r3, #1
 8002466:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	4013      	ands	r3, r2
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	429a      	cmp	r2, r3
 8002476:	d196      	bne.n	80023a6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3728      	adds	r7, #40	; 0x28
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000000 	.word	0x20000000

08002488 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af02      	add	r7, sp, #8
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2200      	movs	r2, #0
 800249c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f7ff ff5b 	bl	800235c <SPI_WaitFifoStateUntilTimeout>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d007      	beq.n	80024bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b0:	f043 0220 	orr.w	r2, r3, #32
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e027      	b.n	800250c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2200      	movs	r2, #0
 80024c4:	2180      	movs	r1, #128	; 0x80
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f7ff fec0 	bl	800224c <SPI_WaitFlagStateUntilTimeout>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d007      	beq.n	80024e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d6:	f043 0220 	orr.w	r2, r3, #32
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e014      	b.n	800250c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f7ff ff34 	bl	800235c <SPI_WaitFifoStateUntilTimeout>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d007      	beq.n	800250a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024fe:	f043 0220 	orr.w	r2, r3, #32
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e000      	b.n	800250c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <__libc_init_array>:
 8002514:	b570      	push	{r4, r5, r6, lr}
 8002516:	4d0d      	ldr	r5, [pc, #52]	; (800254c <__libc_init_array+0x38>)
 8002518:	4c0d      	ldr	r4, [pc, #52]	; (8002550 <__libc_init_array+0x3c>)
 800251a:	1b64      	subs	r4, r4, r5
 800251c:	10a4      	asrs	r4, r4, #2
 800251e:	2600      	movs	r6, #0
 8002520:	42a6      	cmp	r6, r4
 8002522:	d109      	bne.n	8002538 <__libc_init_array+0x24>
 8002524:	4d0b      	ldr	r5, [pc, #44]	; (8002554 <__libc_init_array+0x40>)
 8002526:	4c0c      	ldr	r4, [pc, #48]	; (8002558 <__libc_init_array+0x44>)
 8002528:	f000 f820 	bl	800256c <_init>
 800252c:	1b64      	subs	r4, r4, r5
 800252e:	10a4      	asrs	r4, r4, #2
 8002530:	2600      	movs	r6, #0
 8002532:	42a6      	cmp	r6, r4
 8002534:	d105      	bne.n	8002542 <__libc_init_array+0x2e>
 8002536:	bd70      	pop	{r4, r5, r6, pc}
 8002538:	f855 3b04 	ldr.w	r3, [r5], #4
 800253c:	4798      	blx	r3
 800253e:	3601      	adds	r6, #1
 8002540:	e7ee      	b.n	8002520 <__libc_init_array+0xc>
 8002542:	f855 3b04 	ldr.w	r3, [r5], #4
 8002546:	4798      	blx	r3
 8002548:	3601      	adds	r6, #1
 800254a:	e7f2      	b.n	8002532 <__libc_init_array+0x1e>
 800254c:	080025c4 	.word	0x080025c4
 8002550:	080025c4 	.word	0x080025c4
 8002554:	080025c4 	.word	0x080025c4
 8002558:	080025c8 	.word	0x080025c8

0800255c <memset>:
 800255c:	4402      	add	r2, r0
 800255e:	4603      	mov	r3, r0
 8002560:	4293      	cmp	r3, r2
 8002562:	d100      	bne.n	8002566 <memset+0xa>
 8002564:	4770      	bx	lr
 8002566:	f803 1b01 	strb.w	r1, [r3], #1
 800256a:	e7f9      	b.n	8002560 <memset+0x4>

0800256c <_init>:
 800256c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800256e:	bf00      	nop
 8002570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002572:	bc08      	pop	{r3}
 8002574:	469e      	mov	lr, r3
 8002576:	4770      	bx	lr

08002578 <_fini>:
 8002578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800257a:	bf00      	nop
 800257c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800257e:	bc08      	pop	{r3}
 8002580:	469e      	mov	lr, r3
 8002582:	4770      	bx	lr
